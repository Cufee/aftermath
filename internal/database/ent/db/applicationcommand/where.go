// Code generated by ent, DO NOT EDIT.

package applicationcommand

import (
	"entgo.io/ent/dialect/sql"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEQ(FieldName, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEQ(FieldVersion, v))
}

// OptionsHash applies equality check predicate on the "options_hash" field. It's identical to OptionsHashEQ.
func OptionsHash(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEQ(FieldOptionsHash, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldContainsFold(FieldName, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldContainsFold(FieldVersion, v))
}

// OptionsHashEQ applies the EQ predicate on the "options_hash" field.
func OptionsHashEQ(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEQ(FieldOptionsHash, v))
}

// OptionsHashNEQ applies the NEQ predicate on the "options_hash" field.
func OptionsHashNEQ(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldNEQ(FieldOptionsHash, v))
}

// OptionsHashIn applies the In predicate on the "options_hash" field.
func OptionsHashIn(vs ...string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldIn(FieldOptionsHash, vs...))
}

// OptionsHashNotIn applies the NotIn predicate on the "options_hash" field.
func OptionsHashNotIn(vs ...string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldNotIn(FieldOptionsHash, vs...))
}

// OptionsHashGT applies the GT predicate on the "options_hash" field.
func OptionsHashGT(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldGT(FieldOptionsHash, v))
}

// OptionsHashGTE applies the GTE predicate on the "options_hash" field.
func OptionsHashGTE(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldGTE(FieldOptionsHash, v))
}

// OptionsHashLT applies the LT predicate on the "options_hash" field.
func OptionsHashLT(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldLT(FieldOptionsHash, v))
}

// OptionsHashLTE applies the LTE predicate on the "options_hash" field.
func OptionsHashLTE(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldLTE(FieldOptionsHash, v))
}

// OptionsHashContains applies the Contains predicate on the "options_hash" field.
func OptionsHashContains(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldContains(FieldOptionsHash, v))
}

// OptionsHashHasPrefix applies the HasPrefix predicate on the "options_hash" field.
func OptionsHashHasPrefix(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldHasPrefix(FieldOptionsHash, v))
}

// OptionsHashHasSuffix applies the HasSuffix predicate on the "options_hash" field.
func OptionsHashHasSuffix(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldHasSuffix(FieldOptionsHash, v))
}

// OptionsHashEqualFold applies the EqualFold predicate on the "options_hash" field.
func OptionsHashEqualFold(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldEqualFold(FieldOptionsHash, v))
}

// OptionsHashContainsFold applies the ContainsFold predicate on the "options_hash" field.
func OptionsHashContainsFold(v string) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.FieldContainsFold(FieldOptionsHash, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApplicationCommand) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApplicationCommand) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApplicationCommand) predicate.ApplicationCommand {
	return predicate.ApplicationCommand(sql.NotPredicates(p))
}
