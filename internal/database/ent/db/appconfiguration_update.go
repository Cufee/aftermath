// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/appconfiguration"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
)

// AppConfigurationUpdate is the builder for updating AppConfiguration entities.
type AppConfigurationUpdate struct {
	config
	hooks    []Hook
	mutation *AppConfigurationMutation
}

// Where appends a list predicates to the AppConfigurationUpdate builder.
func (acu *AppConfigurationUpdate) Where(ps ...predicate.AppConfiguration) *AppConfigurationUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *AppConfigurationUpdate) SetUpdatedAt(i int64) *AppConfigurationUpdate {
	acu.mutation.ResetUpdatedAt()
	acu.mutation.SetUpdatedAt(i)
	return acu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (acu *AppConfigurationUpdate) AddUpdatedAt(i int64) *AppConfigurationUpdate {
	acu.mutation.AddUpdatedAt(i)
	return acu
}

// SetKey sets the "key" field.
func (acu *AppConfigurationUpdate) SetKey(s string) *AppConfigurationUpdate {
	acu.mutation.SetKey(s)
	return acu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (acu *AppConfigurationUpdate) SetNillableKey(s *string) *AppConfigurationUpdate {
	if s != nil {
		acu.SetKey(*s)
	}
	return acu
}

// SetValue sets the "value" field.
func (acu *AppConfigurationUpdate) SetValue(a any) *AppConfigurationUpdate {
	acu.mutation.SetValue(a)
	return acu
}

// SetMetadata sets the "metadata" field.
func (acu *AppConfigurationUpdate) SetMetadata(m map[string]interface{}) *AppConfigurationUpdate {
	acu.mutation.SetMetadata(m)
	return acu
}

// ClearMetadata clears the value of the "metadata" field.
func (acu *AppConfigurationUpdate) ClearMetadata() *AppConfigurationUpdate {
	acu.mutation.ClearMetadata()
	return acu
}

// Mutation returns the AppConfigurationMutation object of the builder.
func (acu *AppConfigurationUpdate) Mutation() *AppConfigurationMutation {
	return acu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AppConfigurationUpdate) Save(ctx context.Context) (int, error) {
	acu.defaults()
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AppConfigurationUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AppConfigurationUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AppConfigurationUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *AppConfigurationUpdate) defaults() {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		v := appconfiguration.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acu *AppConfigurationUpdate) check() error {
	if v, ok := acu.mutation.Key(); ok {
		if err := appconfiguration.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "AppConfiguration.key": %w`, err)}
		}
	}
	return nil
}

func (acu *AppConfigurationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := acu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(appconfiguration.Table, appconfiguration.Columns, sqlgraph.NewFieldSpec(appconfiguration.FieldID, field.TypeString))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.SetField(appconfiguration.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := acu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appconfiguration.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := acu.mutation.Key(); ok {
		_spec.SetField(appconfiguration.FieldKey, field.TypeString, value)
	}
	if value, ok := acu.mutation.Value(); ok {
		_spec.SetField(appconfiguration.FieldValue, field.TypeJSON, value)
	}
	if value, ok := acu.mutation.Metadata(); ok {
		_spec.SetField(appconfiguration.FieldMetadata, field.TypeJSON, value)
	}
	if acu.mutation.MetadataCleared() {
		_spec.ClearField(appconfiguration.FieldMetadata, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appconfiguration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AppConfigurationUpdateOne is the builder for updating a single AppConfiguration entity.
type AppConfigurationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppConfigurationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *AppConfigurationUpdateOne) SetUpdatedAt(i int64) *AppConfigurationUpdateOne {
	acuo.mutation.ResetUpdatedAt()
	acuo.mutation.SetUpdatedAt(i)
	return acuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (acuo *AppConfigurationUpdateOne) AddUpdatedAt(i int64) *AppConfigurationUpdateOne {
	acuo.mutation.AddUpdatedAt(i)
	return acuo
}

// SetKey sets the "key" field.
func (acuo *AppConfigurationUpdateOne) SetKey(s string) *AppConfigurationUpdateOne {
	acuo.mutation.SetKey(s)
	return acuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (acuo *AppConfigurationUpdateOne) SetNillableKey(s *string) *AppConfigurationUpdateOne {
	if s != nil {
		acuo.SetKey(*s)
	}
	return acuo
}

// SetValue sets the "value" field.
func (acuo *AppConfigurationUpdateOne) SetValue(a any) *AppConfigurationUpdateOne {
	acuo.mutation.SetValue(a)
	return acuo
}

// SetMetadata sets the "metadata" field.
func (acuo *AppConfigurationUpdateOne) SetMetadata(m map[string]interface{}) *AppConfigurationUpdateOne {
	acuo.mutation.SetMetadata(m)
	return acuo
}

// ClearMetadata clears the value of the "metadata" field.
func (acuo *AppConfigurationUpdateOne) ClearMetadata() *AppConfigurationUpdateOne {
	acuo.mutation.ClearMetadata()
	return acuo
}

// Mutation returns the AppConfigurationMutation object of the builder.
func (acuo *AppConfigurationUpdateOne) Mutation() *AppConfigurationMutation {
	return acuo.mutation
}

// Where appends a list predicates to the AppConfigurationUpdate builder.
func (acuo *AppConfigurationUpdateOne) Where(ps ...predicate.AppConfiguration) *AppConfigurationUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AppConfigurationUpdateOne) Select(field string, fields ...string) *AppConfigurationUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AppConfiguration entity.
func (acuo *AppConfigurationUpdateOne) Save(ctx context.Context) (*AppConfiguration, error) {
	acuo.defaults()
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AppConfigurationUpdateOne) SaveX(ctx context.Context) *AppConfiguration {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AppConfigurationUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AppConfigurationUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *AppConfigurationUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		v := appconfiguration.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acuo *AppConfigurationUpdateOne) check() error {
	if v, ok := acuo.mutation.Key(); ok {
		if err := appconfiguration.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "AppConfiguration.key": %w`, err)}
		}
	}
	return nil
}

func (acuo *AppConfigurationUpdateOne) sqlSave(ctx context.Context) (_node *AppConfiguration, err error) {
	if err := acuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appconfiguration.Table, appconfiguration.Columns, sqlgraph.NewFieldSpec(appconfiguration.FieldID, field.TypeString))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "AppConfiguration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appconfiguration.FieldID)
		for _, f := range fields {
			if !appconfiguration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != appconfiguration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appconfiguration.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := acuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(appconfiguration.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := acuo.mutation.Key(); ok {
		_spec.SetField(appconfiguration.FieldKey, field.TypeString, value)
	}
	if value, ok := acuo.mutation.Value(); ok {
		_spec.SetField(appconfiguration.FieldValue, field.TypeJSON, value)
	}
	if value, ok := acuo.mutation.Metadata(); ok {
		_spec.SetField(appconfiguration.FieldMetadata, field.TypeJSON, value)
	}
	if acuo.mutation.MetadataCleared() {
		_spec.ClearField(appconfiguration.FieldMetadata, field.TypeJSON)
	}
	_node = &AppConfiguration{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appconfiguration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
