// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/user"
	"github.com/cufee/aftermath/internal/database/ent/db/widgetsettings"
	"github.com/cufee/aftermath/internal/database/models"
)

// WidgetSettingsCreate is the builder for creating a WidgetSettings entity.
type WidgetSettingsCreate struct {
	config
	mutation *WidgetSettingsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (wsc *WidgetSettingsCreate) SetCreatedAt(t time.Time) *WidgetSettingsCreate {
	wsc.mutation.SetCreatedAt(t)
	return wsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wsc *WidgetSettingsCreate) SetNillableCreatedAt(t *time.Time) *WidgetSettingsCreate {
	if t != nil {
		wsc.SetCreatedAt(*t)
	}
	return wsc
}

// SetUpdatedAt sets the "updated_at" field.
func (wsc *WidgetSettingsCreate) SetUpdatedAt(t time.Time) *WidgetSettingsCreate {
	wsc.mutation.SetUpdatedAt(t)
	return wsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wsc *WidgetSettingsCreate) SetNillableUpdatedAt(t *time.Time) *WidgetSettingsCreate {
	if t != nil {
		wsc.SetUpdatedAt(*t)
	}
	return wsc
}

// SetReferenceID sets the "reference_id" field.
func (wsc *WidgetSettingsCreate) SetReferenceID(s string) *WidgetSettingsCreate {
	wsc.mutation.SetReferenceID(s)
	return wsc
}

// SetTitle sets the "title" field.
func (wsc *WidgetSettingsCreate) SetTitle(s string) *WidgetSettingsCreate {
	wsc.mutation.SetTitle(s)
	return wsc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (wsc *WidgetSettingsCreate) SetNillableTitle(s *string) *WidgetSettingsCreate {
	if s != nil {
		wsc.SetTitle(*s)
	}
	return wsc
}

// SetUserID sets the "user_id" field.
func (wsc *WidgetSettingsCreate) SetUserID(s string) *WidgetSettingsCreate {
	wsc.mutation.SetUserID(s)
	return wsc
}

// SetSnapshotID sets the "snapshot_id" field.
func (wsc *WidgetSettingsCreate) SetSnapshotID(s string) *WidgetSettingsCreate {
	wsc.mutation.SetSnapshotID(s)
	return wsc
}

// SetNillableSnapshotID sets the "snapshot_id" field if the given value is not nil.
func (wsc *WidgetSettingsCreate) SetNillableSnapshotID(s *string) *WidgetSettingsCreate {
	if s != nil {
		wsc.SetSnapshotID(*s)
	}
	return wsc
}

// SetMetadata sets the "metadata" field.
func (wsc *WidgetSettingsCreate) SetMetadata(m map[string]interface{}) *WidgetSettingsCreate {
	wsc.mutation.SetMetadata(m)
	return wsc
}

// SetStyles sets the "styles" field.
func (wsc *WidgetSettingsCreate) SetStyles(ms models.WidgetStyling) *WidgetSettingsCreate {
	wsc.mutation.SetStyles(ms)
	return wsc
}

// SetID sets the "id" field.
func (wsc *WidgetSettingsCreate) SetID(s string) *WidgetSettingsCreate {
	wsc.mutation.SetID(s)
	return wsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wsc *WidgetSettingsCreate) SetNillableID(s *string) *WidgetSettingsCreate {
	if s != nil {
		wsc.SetID(*s)
	}
	return wsc
}

// SetUser sets the "user" edge to the User entity.
func (wsc *WidgetSettingsCreate) SetUser(u *User) *WidgetSettingsCreate {
	return wsc.SetUserID(u.ID)
}

// Mutation returns the WidgetSettingsMutation object of the builder.
func (wsc *WidgetSettingsCreate) Mutation() *WidgetSettingsMutation {
	return wsc.mutation
}

// Save creates the WidgetSettings in the database.
func (wsc *WidgetSettingsCreate) Save(ctx context.Context) (*WidgetSettings, error) {
	wsc.defaults()
	return withHooks(ctx, wsc.sqlSave, wsc.mutation, wsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wsc *WidgetSettingsCreate) SaveX(ctx context.Context) *WidgetSettings {
	v, err := wsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wsc *WidgetSettingsCreate) Exec(ctx context.Context) error {
	_, err := wsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsc *WidgetSettingsCreate) ExecX(ctx context.Context) {
	if err := wsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsc *WidgetSettingsCreate) defaults() {
	if _, ok := wsc.mutation.CreatedAt(); !ok {
		v := widgetsettings.DefaultCreatedAt()
		wsc.mutation.SetCreatedAt(v)
	}
	if _, ok := wsc.mutation.UpdatedAt(); !ok {
		v := widgetsettings.DefaultUpdatedAt()
		wsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wsc.mutation.ID(); !ok {
		v := widgetsettings.DefaultID()
		wsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wsc *WidgetSettingsCreate) check() error {
	if _, ok := wsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "WidgetSettings.created_at"`)}
	}
	if _, ok := wsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "WidgetSettings.updated_at"`)}
	}
	if _, ok := wsc.mutation.ReferenceID(); !ok {
		return &ValidationError{Name: "reference_id", err: errors.New(`db: missing required field "WidgetSettings.reference_id"`)}
	}
	if _, ok := wsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`db: missing required field "WidgetSettings.user_id"`)}
	}
	if _, ok := wsc.mutation.Metadata(); !ok {
		return &ValidationError{Name: "metadata", err: errors.New(`db: missing required field "WidgetSettings.metadata"`)}
	}
	if _, ok := wsc.mutation.Styles(); !ok {
		return &ValidationError{Name: "styles", err: errors.New(`db: missing required field "WidgetSettings.styles"`)}
	}
	if _, ok := wsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`db: missing required edge "WidgetSettings.user"`)}
	}
	return nil
}

func (wsc *WidgetSettingsCreate) sqlSave(ctx context.Context) (*WidgetSettings, error) {
	if err := wsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected WidgetSettings.ID type: %T", _spec.ID.Value)
		}
	}
	wsc.mutation.id = &_node.ID
	wsc.mutation.done = true
	return _node, nil
}

func (wsc *WidgetSettingsCreate) createSpec() (*WidgetSettings, *sqlgraph.CreateSpec) {
	var (
		_node = &WidgetSettings{config: wsc.config}
		_spec = sqlgraph.NewCreateSpec(widgetsettings.Table, sqlgraph.NewFieldSpec(widgetsettings.FieldID, field.TypeString))
	)
	if id, ok := wsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wsc.mutation.CreatedAt(); ok {
		_spec.SetField(widgetsettings.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wsc.mutation.UpdatedAt(); ok {
		_spec.SetField(widgetsettings.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wsc.mutation.ReferenceID(); ok {
		_spec.SetField(widgetsettings.FieldReferenceID, field.TypeString, value)
		_node.ReferenceID = value
	}
	if value, ok := wsc.mutation.Title(); ok {
		_spec.SetField(widgetsettings.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := wsc.mutation.SnapshotID(); ok {
		_spec.SetField(widgetsettings.FieldSnapshotID, field.TypeString, value)
		_node.SnapshotID = value
	}
	if value, ok := wsc.mutation.Metadata(); ok {
		_spec.SetField(widgetsettings.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := wsc.mutation.Styles(); ok {
		_spec.SetField(widgetsettings.FieldStyles, field.TypeJSON, value)
		_node.Styles = value
	}
	if nodes := wsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   widgetsettings.UserTable,
			Columns: []string{widgetsettings.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WidgetSettingsCreateBulk is the builder for creating many WidgetSettings entities in bulk.
type WidgetSettingsCreateBulk struct {
	config
	err      error
	builders []*WidgetSettingsCreate
}

// Save creates the WidgetSettings entities in the database.
func (wscb *WidgetSettingsCreateBulk) Save(ctx context.Context) ([]*WidgetSettings, error) {
	if wscb.err != nil {
		return nil, wscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wscb.builders))
	nodes := make([]*WidgetSettings, len(wscb.builders))
	mutators := make([]Mutator, len(wscb.builders))
	for i := range wscb.builders {
		func(i int, root context.Context) {
			builder := wscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WidgetSettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wscb *WidgetSettingsCreateBulk) SaveX(ctx context.Context) []*WidgetSettings {
	v, err := wscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wscb *WidgetSettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := wscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wscb *WidgetSettingsCreateBulk) ExecX(ctx context.Context) {
	if err := wscb.Exec(ctx); err != nil {
		panic(err)
	}
}
