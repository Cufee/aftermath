// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cufee/aftermath/internal/database/ent/db/discordinteraction"
	"github.com/cufee/aftermath/internal/database/ent/db/user"
	"github.com/cufee/aftermath/internal/database/models"
)

// DiscordInteraction is the model entity for the DiscordInteraction schema.
type DiscordInteraction struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Result holds the value of the "result" field.
	Result string `json:"result,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID string `json:"event_id,omitempty"`
	// GuildID holds the value of the "guild_id" field.
	GuildID string `json:"guild_id,omitempty"`
	// Snowflake holds the value of the "snowflake" field.
	Snowflake string `json:"snowflake,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID string `json:"channel_id,omitempty"`
	// MessageID holds the value of the "message_id" field.
	MessageID string `json:"message_id,omitempty"`
	// Type holds the value of the "type" field.
	Type models.DiscordInteractionType `json:"type,omitempty"`
	// Locale holds the value of the "locale" field.
	Locale string `json:"locale,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiscordInteractionQuery when eager-loading is set.
	Edges        DiscordInteractionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DiscordInteractionEdges holds the relations/edges for other nodes in the graph.
type DiscordInteractionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiscordInteractionEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DiscordInteraction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case discordinteraction.FieldMetadata:
			values[i] = new([]byte)
		case discordinteraction.FieldID, discordinteraction.FieldResult, discordinteraction.FieldUserID, discordinteraction.FieldEventID, discordinteraction.FieldGuildID, discordinteraction.FieldSnowflake, discordinteraction.FieldChannelID, discordinteraction.FieldMessageID, discordinteraction.FieldType, discordinteraction.FieldLocale:
			values[i] = new(sql.NullString)
		case discordinteraction.FieldCreatedAt, discordinteraction.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DiscordInteraction fields.
func (di *DiscordInteraction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case discordinteraction.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				di.ID = value.String
			}
		case discordinteraction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				di.CreatedAt = value.Time
			}
		case discordinteraction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				di.UpdatedAt = value.Time
			}
		case discordinteraction.FieldResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				di.Result = value.String
			}
		case discordinteraction.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				di.UserID = value.String
			}
		case discordinteraction.FieldEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				di.EventID = value.String
			}
		case discordinteraction.FieldGuildID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guild_id", values[i])
			} else if value.Valid {
				di.GuildID = value.String
			}
		case discordinteraction.FieldSnowflake:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field snowflake", values[i])
			} else if value.Valid {
				di.Snowflake = value.String
			}
		case discordinteraction.FieldChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				di.ChannelID = value.String
			}
		case discordinteraction.FieldMessageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message_id", values[i])
			} else if value.Valid {
				di.MessageID = value.String
			}
		case discordinteraction.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				di.Type = models.DiscordInteractionType(value.String)
			}
		case discordinteraction.FieldLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locale", values[i])
			} else if value.Valid {
				di.Locale = value.String
			}
		case discordinteraction.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &di.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			di.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DiscordInteraction.
// This includes values selected through modifiers, order, etc.
func (di *DiscordInteraction) Value(name string) (ent.Value, error) {
	return di.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the DiscordInteraction entity.
func (di *DiscordInteraction) QueryUser() *UserQuery {
	return NewDiscordInteractionClient(di.config).QueryUser(di)
}

// Update returns a builder for updating this DiscordInteraction.
// Note that you need to call DiscordInteraction.Unwrap() before calling this method if this DiscordInteraction
// was returned from a transaction, and the transaction was committed or rolled back.
func (di *DiscordInteraction) Update() *DiscordInteractionUpdateOne {
	return NewDiscordInteractionClient(di.config).UpdateOne(di)
}

// Unwrap unwraps the DiscordInteraction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (di *DiscordInteraction) Unwrap() *DiscordInteraction {
	_tx, ok := di.config.driver.(*txDriver)
	if !ok {
		panic("db: DiscordInteraction is not a transactional entity")
	}
	di.config.driver = _tx.drv
	return di
}

// String implements the fmt.Stringer.
func (di *DiscordInteraction) String() string {
	var builder strings.Builder
	builder.WriteString("DiscordInteraction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", di.ID))
	builder.WriteString("created_at=")
	builder.WriteString(di.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(di.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(di.Result)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(di.UserID)
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(di.EventID)
	builder.WriteString(", ")
	builder.WriteString("guild_id=")
	builder.WriteString(di.GuildID)
	builder.WriteString(", ")
	builder.WriteString("snowflake=")
	builder.WriteString(di.Snowflake)
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(di.ChannelID)
	builder.WriteString(", ")
	builder.WriteString("message_id=")
	builder.WriteString(di.MessageID)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", di.Type))
	builder.WriteString(", ")
	builder.WriteString("locale=")
	builder.WriteString(di.Locale)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", di.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// DiscordInteractions is a parsable slice of DiscordInteraction.
type DiscordInteractions []*DiscordInteraction
