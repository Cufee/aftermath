// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"github.com/cufee/aftermath/internal/database/ent/db/widgetsettings"
)

// WidgetSettingsDelete is the builder for deleting a WidgetSettings entity.
type WidgetSettingsDelete struct {
	config
	hooks    []Hook
	mutation *WidgetSettingsMutation
}

// Where appends a list predicates to the WidgetSettingsDelete builder.
func (wsd *WidgetSettingsDelete) Where(ps ...predicate.WidgetSettings) *WidgetSettingsDelete {
	wsd.mutation.Where(ps...)
	return wsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wsd *WidgetSettingsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wsd.sqlExec, wsd.mutation, wsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wsd *WidgetSettingsDelete) ExecX(ctx context.Context) int {
	n, err := wsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wsd *WidgetSettingsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(widgetsettings.Table, sqlgraph.NewFieldSpec(widgetsettings.FieldID, field.TypeString))
	if ps := wsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wsd.mutation.done = true
	return affected, err
}

// WidgetSettingsDeleteOne is the builder for deleting a single WidgetSettings entity.
type WidgetSettingsDeleteOne struct {
	wsd *WidgetSettingsDelete
}

// Where appends a list predicates to the WidgetSettingsDelete builder.
func (wsdo *WidgetSettingsDeleteOne) Where(ps ...predicate.WidgetSettings) *WidgetSettingsDeleteOne {
	wsdo.wsd.mutation.Where(ps...)
	return wsdo
}

// Exec executes the deletion query.
func (wsdo *WidgetSettingsDeleteOne) Exec(ctx context.Context) error {
	n, err := wsdo.wsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{widgetsettings.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wsdo *WidgetSettingsDeleteOne) ExecX(ctx context.Context) {
	if err := wsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
