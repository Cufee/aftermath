// Code generated by ent, DO NOT EDIT.

package db

import (
	"github.com/cufee/aftermath/internal/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cufee/aftermath/internal/database/ent/db/user"
	"github.com/cufee/aftermath/internal/database/ent/db/widgetsettings"
	"github.com/cufee/aftermath/internal/database/models"
)

// WidgetSettings is the model entity for the WidgetSettings schema.
type WidgetSettings struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ReferenceID holds the value of the "reference_id" field.
	ReferenceID string `json:"reference_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// SessionFrom holds the value of the "session_from" field.
	SessionFrom time.Time `json:"session_from,omitempty"`
	// SessionReferenceID holds the value of the "session_reference_id" field.
	SessionReferenceID string `json:"session_reference_id,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Styles holds the value of the "styles" field.
	Styles models.WidgetStyling `json:"styles,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WidgetSettingsQuery when eager-loading is set.
	Edges        WidgetSettingsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WidgetSettingsEdges holds the relations/edges for other nodes in the graph.
type WidgetSettingsEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WidgetSettingsEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WidgetSettings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case widgetsettings.FieldMetadata, widgetsettings.FieldStyles:
			values[i] = new([]byte)
		case widgetsettings.FieldID, widgetsettings.FieldReferenceID, widgetsettings.FieldTitle, widgetsettings.FieldUserID, widgetsettings.FieldSessionReferenceID:
			values[i] = new(sql.NullString)
		case widgetsettings.FieldCreatedAt, widgetsettings.FieldUpdatedAt, widgetsettings.FieldSessionFrom:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WidgetSettings fields.
func (ws *WidgetSettings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case widgetsettings.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ws.ID = value.String
			}
		case widgetsettings.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ws.CreatedAt = value.Time
			}
		case widgetsettings.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ws.UpdatedAt = value.Time
			}
		case widgetsettings.FieldReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_id", values[i])
			} else if value.Valid {
				ws.ReferenceID = value.String
			}
		case widgetsettings.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ws.Title = value.String
			}
		case widgetsettings.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ws.UserID = value.String
			}
		case widgetsettings.FieldSessionFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field session_from", values[i])
			} else if value.Valid {
				ws.SessionFrom = value.Time
			}
		case widgetsettings.FieldSessionReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_reference_id", values[i])
			} else if value.Valid {
				ws.SessionReferenceID = value.String
			}
		case widgetsettings.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ws.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case widgetsettings.FieldStyles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field styles", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ws.Styles); err != nil {
					return fmt.Errorf("unmarshal field styles: %w", err)
				}
			}
		default:
			ws.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WidgetSettings.
// This includes values selected through modifiers, order, etc.
func (ws *WidgetSettings) Value(name string) (ent.Value, error) {
	return ws.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the WidgetSettings entity.
func (ws *WidgetSettings) QueryUser() *UserQuery {
	return NewWidgetSettingsClient(ws.config).QueryUser(ws)
}

// Update returns a builder for updating this WidgetSettings.
// Note that you need to call WidgetSettings.Unwrap() before calling this method if this WidgetSettings
// was returned from a transaction, and the transaction was committed or rolled back.
func (ws *WidgetSettings) Update() *WidgetSettingsUpdateOne {
	return NewWidgetSettingsClient(ws.config).UpdateOne(ws)
}

// Unwrap unwraps the WidgetSettings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ws *WidgetSettings) Unwrap() *WidgetSettings {
	_tx, ok := ws.config.driver.(*txDriver)
	if !ok {
		panic("db: WidgetSettings is not a transactional entity")
	}
	ws.config.driver = _tx.drv
	return ws
}

// String implements the fmt.Stringer.
func (ws *WidgetSettings) String() string {
	var builder strings.Builder
	builder.WriteString("WidgetSettings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ws.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ws.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ws.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("reference_id=")
	builder.WriteString(ws.ReferenceID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ws.Title)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(ws.UserID)
	builder.WriteString(", ")
	builder.WriteString("session_from=")
	builder.WriteString(ws.SessionFrom.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("session_reference_id=")
	builder.WriteString(ws.SessionReferenceID)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", ws.Metadata))
	builder.WriteString(", ")
	builder.WriteString("styles=")
	builder.WriteString(fmt.Sprintf("%v", ws.Styles))
	builder.WriteByte(')')
	return builder.String()
}

// WidgetSettingsSlice is a parsable slice of WidgetSettings.
type WidgetSettingsSlice []*WidgetSettings
