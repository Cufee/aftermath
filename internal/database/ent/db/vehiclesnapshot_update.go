// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"github.com/cufee/aftermath/internal/database/ent/db/vehiclesnapshot"
	"github.com/cufee/aftermath/internal/database/models"
	"github.com/cufee/aftermath/internal/stats/frame"
)

// VehicleSnapshotUpdate is the builder for updating VehicleSnapshot entities.
type VehicleSnapshotUpdate struct {
	config
	hooks     []Hook
	mutation  *VehicleSnapshotMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the VehicleSnapshotUpdate builder.
func (vsu *VehicleSnapshotUpdate) Where(ps ...predicate.VehicleSnapshot) *VehicleSnapshotUpdate {
	vsu.mutation.Where(ps...)
	return vsu
}

// SetUpdatedAt sets the "updated_at" field.
func (vsu *VehicleSnapshotUpdate) SetUpdatedAt(t time.Time) *VehicleSnapshotUpdate {
	vsu.mutation.SetUpdatedAt(t)
	return vsu
}

// SetType sets the "type" field.
func (vsu *VehicleSnapshotUpdate) SetType(mt models.SnapshotType) *VehicleSnapshotUpdate {
	vsu.mutation.SetType(mt)
	return vsu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vsu *VehicleSnapshotUpdate) SetNillableType(mt *models.SnapshotType) *VehicleSnapshotUpdate {
	if mt != nil {
		vsu.SetType(*mt)
	}
	return vsu
}

// SetReferenceID sets the "reference_id" field.
func (vsu *VehicleSnapshotUpdate) SetReferenceID(s string) *VehicleSnapshotUpdate {
	vsu.mutation.SetReferenceID(s)
	return vsu
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (vsu *VehicleSnapshotUpdate) SetNillableReferenceID(s *string) *VehicleSnapshotUpdate {
	if s != nil {
		vsu.SetReferenceID(*s)
	}
	return vsu
}

// SetBattles sets the "battles" field.
func (vsu *VehicleSnapshotUpdate) SetBattles(i int) *VehicleSnapshotUpdate {
	vsu.mutation.ResetBattles()
	vsu.mutation.SetBattles(i)
	return vsu
}

// SetNillableBattles sets the "battles" field if the given value is not nil.
func (vsu *VehicleSnapshotUpdate) SetNillableBattles(i *int) *VehicleSnapshotUpdate {
	if i != nil {
		vsu.SetBattles(*i)
	}
	return vsu
}

// AddBattles adds i to the "battles" field.
func (vsu *VehicleSnapshotUpdate) AddBattles(i int) *VehicleSnapshotUpdate {
	vsu.mutation.AddBattles(i)
	return vsu
}

// SetLastBattleTime sets the "last_battle_time" field.
func (vsu *VehicleSnapshotUpdate) SetLastBattleTime(t time.Time) *VehicleSnapshotUpdate {
	vsu.mutation.SetLastBattleTime(t)
	return vsu
}

// SetNillableLastBattleTime sets the "last_battle_time" field if the given value is not nil.
func (vsu *VehicleSnapshotUpdate) SetNillableLastBattleTime(t *time.Time) *VehicleSnapshotUpdate {
	if t != nil {
		vsu.SetLastBattleTime(*t)
	}
	return vsu
}

// SetFrame sets the "frame" field.
func (vsu *VehicleSnapshotUpdate) SetFrame(ff frame.StatsFrame) *VehicleSnapshotUpdate {
	vsu.mutation.SetFrame(ff)
	return vsu
}

// SetNillableFrame sets the "frame" field if the given value is not nil.
func (vsu *VehicleSnapshotUpdate) SetNillableFrame(ff *frame.StatsFrame) *VehicleSnapshotUpdate {
	if ff != nil {
		vsu.SetFrame(*ff)
	}
	return vsu
}

// Mutation returns the VehicleSnapshotMutation object of the builder.
func (vsu *VehicleSnapshotUpdate) Mutation() *VehicleSnapshotMutation {
	return vsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vsu *VehicleSnapshotUpdate) Save(ctx context.Context) (int, error) {
	vsu.defaults()
	return withHooks(ctx, vsu.sqlSave, vsu.mutation, vsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsu *VehicleSnapshotUpdate) SaveX(ctx context.Context) int {
	affected, err := vsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vsu *VehicleSnapshotUpdate) Exec(ctx context.Context) error {
	_, err := vsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsu *VehicleSnapshotUpdate) ExecX(ctx context.Context) {
	if err := vsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vsu *VehicleSnapshotUpdate) defaults() {
	if _, ok := vsu.mutation.UpdatedAt(); !ok {
		v := vehiclesnapshot.UpdateDefaultUpdatedAt()
		vsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vsu *VehicleSnapshotUpdate) check() error {
	if v, ok := vsu.mutation.GetType(); ok {
		if err := vehiclesnapshot.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "VehicleSnapshot.type": %w`, err)}
		}
	}
	if v, ok := vsu.mutation.ReferenceID(); ok {
		if err := vehiclesnapshot.ReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "reference_id", err: fmt.Errorf(`db: validator failed for field "VehicleSnapshot.reference_id": %w`, err)}
		}
	}
	if _, ok := vsu.mutation.AccountID(); vsu.mutation.AccountCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "VehicleSnapshot.account"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vsu *VehicleSnapshotUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VehicleSnapshotUpdate {
	vsu.modifiers = append(vsu.modifiers, modifiers...)
	return vsu
}

func (vsu *VehicleSnapshotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(vehiclesnapshot.Table, vehiclesnapshot.Columns, sqlgraph.NewFieldSpec(vehiclesnapshot.FieldID, field.TypeString))
	if ps := vsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vsu.mutation.UpdatedAt(); ok {
		_spec.SetField(vehiclesnapshot.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vsu.mutation.GetType(); ok {
		_spec.SetField(vehiclesnapshot.FieldType, field.TypeEnum, value)
	}
	if value, ok := vsu.mutation.ReferenceID(); ok {
		_spec.SetField(vehiclesnapshot.FieldReferenceID, field.TypeString, value)
	}
	if value, ok := vsu.mutation.Battles(); ok {
		_spec.SetField(vehiclesnapshot.FieldBattles, field.TypeInt, value)
	}
	if value, ok := vsu.mutation.AddedBattles(); ok {
		_spec.AddField(vehiclesnapshot.FieldBattles, field.TypeInt, value)
	}
	if value, ok := vsu.mutation.LastBattleTime(); ok {
		_spec.SetField(vehiclesnapshot.FieldLastBattleTime, field.TypeTime, value)
	}
	if value, ok := vsu.mutation.Frame(); ok {
		_spec.SetField(vehiclesnapshot.FieldFrame, field.TypeJSON, value)
	}
	_spec.AddModifiers(vsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, vsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehiclesnapshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vsu.mutation.done = true
	return n, nil
}

// VehicleSnapshotUpdateOne is the builder for updating a single VehicleSnapshot entity.
type VehicleSnapshotUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *VehicleSnapshotMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (vsuo *VehicleSnapshotUpdateOne) SetUpdatedAt(t time.Time) *VehicleSnapshotUpdateOne {
	vsuo.mutation.SetUpdatedAt(t)
	return vsuo
}

// SetType sets the "type" field.
func (vsuo *VehicleSnapshotUpdateOne) SetType(mt models.SnapshotType) *VehicleSnapshotUpdateOne {
	vsuo.mutation.SetType(mt)
	return vsuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vsuo *VehicleSnapshotUpdateOne) SetNillableType(mt *models.SnapshotType) *VehicleSnapshotUpdateOne {
	if mt != nil {
		vsuo.SetType(*mt)
	}
	return vsuo
}

// SetReferenceID sets the "reference_id" field.
func (vsuo *VehicleSnapshotUpdateOne) SetReferenceID(s string) *VehicleSnapshotUpdateOne {
	vsuo.mutation.SetReferenceID(s)
	return vsuo
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (vsuo *VehicleSnapshotUpdateOne) SetNillableReferenceID(s *string) *VehicleSnapshotUpdateOne {
	if s != nil {
		vsuo.SetReferenceID(*s)
	}
	return vsuo
}

// SetBattles sets the "battles" field.
func (vsuo *VehicleSnapshotUpdateOne) SetBattles(i int) *VehicleSnapshotUpdateOne {
	vsuo.mutation.ResetBattles()
	vsuo.mutation.SetBattles(i)
	return vsuo
}

// SetNillableBattles sets the "battles" field if the given value is not nil.
func (vsuo *VehicleSnapshotUpdateOne) SetNillableBattles(i *int) *VehicleSnapshotUpdateOne {
	if i != nil {
		vsuo.SetBattles(*i)
	}
	return vsuo
}

// AddBattles adds i to the "battles" field.
func (vsuo *VehicleSnapshotUpdateOne) AddBattles(i int) *VehicleSnapshotUpdateOne {
	vsuo.mutation.AddBattles(i)
	return vsuo
}

// SetLastBattleTime sets the "last_battle_time" field.
func (vsuo *VehicleSnapshotUpdateOne) SetLastBattleTime(t time.Time) *VehicleSnapshotUpdateOne {
	vsuo.mutation.SetLastBattleTime(t)
	return vsuo
}

// SetNillableLastBattleTime sets the "last_battle_time" field if the given value is not nil.
func (vsuo *VehicleSnapshotUpdateOne) SetNillableLastBattleTime(t *time.Time) *VehicleSnapshotUpdateOne {
	if t != nil {
		vsuo.SetLastBattleTime(*t)
	}
	return vsuo
}

// SetFrame sets the "frame" field.
func (vsuo *VehicleSnapshotUpdateOne) SetFrame(ff frame.StatsFrame) *VehicleSnapshotUpdateOne {
	vsuo.mutation.SetFrame(ff)
	return vsuo
}

// SetNillableFrame sets the "frame" field if the given value is not nil.
func (vsuo *VehicleSnapshotUpdateOne) SetNillableFrame(ff *frame.StatsFrame) *VehicleSnapshotUpdateOne {
	if ff != nil {
		vsuo.SetFrame(*ff)
	}
	return vsuo
}

// Mutation returns the VehicleSnapshotMutation object of the builder.
func (vsuo *VehicleSnapshotUpdateOne) Mutation() *VehicleSnapshotMutation {
	return vsuo.mutation
}

// Where appends a list predicates to the VehicleSnapshotUpdate builder.
func (vsuo *VehicleSnapshotUpdateOne) Where(ps ...predicate.VehicleSnapshot) *VehicleSnapshotUpdateOne {
	vsuo.mutation.Where(ps...)
	return vsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vsuo *VehicleSnapshotUpdateOne) Select(field string, fields ...string) *VehicleSnapshotUpdateOne {
	vsuo.fields = append([]string{field}, fields...)
	return vsuo
}

// Save executes the query and returns the updated VehicleSnapshot entity.
func (vsuo *VehicleSnapshotUpdateOne) Save(ctx context.Context) (*VehicleSnapshot, error) {
	vsuo.defaults()
	return withHooks(ctx, vsuo.sqlSave, vsuo.mutation, vsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsuo *VehicleSnapshotUpdateOne) SaveX(ctx context.Context) *VehicleSnapshot {
	node, err := vsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vsuo *VehicleSnapshotUpdateOne) Exec(ctx context.Context) error {
	_, err := vsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsuo *VehicleSnapshotUpdateOne) ExecX(ctx context.Context) {
	if err := vsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vsuo *VehicleSnapshotUpdateOne) defaults() {
	if _, ok := vsuo.mutation.UpdatedAt(); !ok {
		v := vehiclesnapshot.UpdateDefaultUpdatedAt()
		vsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vsuo *VehicleSnapshotUpdateOne) check() error {
	if v, ok := vsuo.mutation.GetType(); ok {
		if err := vehiclesnapshot.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "VehicleSnapshot.type": %w`, err)}
		}
	}
	if v, ok := vsuo.mutation.ReferenceID(); ok {
		if err := vehiclesnapshot.ReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "reference_id", err: fmt.Errorf(`db: validator failed for field "VehicleSnapshot.reference_id": %w`, err)}
		}
	}
	if _, ok := vsuo.mutation.AccountID(); vsuo.mutation.AccountCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "VehicleSnapshot.account"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (vsuo *VehicleSnapshotUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *VehicleSnapshotUpdateOne {
	vsuo.modifiers = append(vsuo.modifiers, modifiers...)
	return vsuo
}

func (vsuo *VehicleSnapshotUpdateOne) sqlSave(ctx context.Context) (_node *VehicleSnapshot, err error) {
	if err := vsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vehiclesnapshot.Table, vehiclesnapshot.Columns, sqlgraph.NewFieldSpec(vehiclesnapshot.FieldID, field.TypeString))
	id, ok := vsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "VehicleSnapshot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehiclesnapshot.FieldID)
		for _, f := range fields {
			if !vehiclesnapshot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != vehiclesnapshot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vehiclesnapshot.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vsuo.mutation.GetType(); ok {
		_spec.SetField(vehiclesnapshot.FieldType, field.TypeEnum, value)
	}
	if value, ok := vsuo.mutation.ReferenceID(); ok {
		_spec.SetField(vehiclesnapshot.FieldReferenceID, field.TypeString, value)
	}
	if value, ok := vsuo.mutation.Battles(); ok {
		_spec.SetField(vehiclesnapshot.FieldBattles, field.TypeInt, value)
	}
	if value, ok := vsuo.mutation.AddedBattles(); ok {
		_spec.AddField(vehiclesnapshot.FieldBattles, field.TypeInt, value)
	}
	if value, ok := vsuo.mutation.LastBattleTime(); ok {
		_spec.SetField(vehiclesnapshot.FieldLastBattleTime, field.TypeTime, value)
	}
	if value, ok := vsuo.mutation.Frame(); ok {
		_spec.SetField(vehiclesnapshot.FieldFrame, field.TypeJSON, value)
	}
	_spec.AddModifiers(vsuo.modifiers...)
	_node = &VehicleSnapshot{config: vsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehiclesnapshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vsuo.mutation.done = true
	return _node, nil
}
