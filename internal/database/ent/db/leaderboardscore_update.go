// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/leaderboardscore"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"github.com/cufee/aftermath/internal/database/models"
)

// LeaderboardScoreUpdate is the builder for updating LeaderboardScore entities.
type LeaderboardScoreUpdate struct {
	config
	hooks     []Hook
	mutation  *LeaderboardScoreMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the LeaderboardScoreUpdate builder.
func (lsu *LeaderboardScoreUpdate) Where(ps ...predicate.LeaderboardScore) *LeaderboardScoreUpdate {
	lsu.mutation.Where(ps...)
	return lsu
}

// SetUpdatedAt sets the "updated_at" field.
func (lsu *LeaderboardScoreUpdate) SetUpdatedAt(t time.Time) *LeaderboardScoreUpdate {
	lsu.mutation.SetUpdatedAt(t)
	return lsu
}

// SetType sets the "type" field.
func (lsu *LeaderboardScoreUpdate) SetType(mt models.ScoreType) *LeaderboardScoreUpdate {
	lsu.mutation.SetType(mt)
	return lsu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (lsu *LeaderboardScoreUpdate) SetNillableType(mt *models.ScoreType) *LeaderboardScoreUpdate {
	if mt != nil {
		lsu.SetType(*mt)
	}
	return lsu
}

// SetScore sets the "score" field.
func (lsu *LeaderboardScoreUpdate) SetScore(f float32) *LeaderboardScoreUpdate {
	lsu.mutation.ResetScore()
	lsu.mutation.SetScore(f)
	return lsu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (lsu *LeaderboardScoreUpdate) SetNillableScore(f *float32) *LeaderboardScoreUpdate {
	if f != nil {
		lsu.SetScore(*f)
	}
	return lsu
}

// AddScore adds f to the "score" field.
func (lsu *LeaderboardScoreUpdate) AddScore(f float32) *LeaderboardScoreUpdate {
	lsu.mutation.AddScore(f)
	return lsu
}

// SetAccountID sets the "account_id" field.
func (lsu *LeaderboardScoreUpdate) SetAccountID(s string) *LeaderboardScoreUpdate {
	lsu.mutation.SetAccountID(s)
	return lsu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (lsu *LeaderboardScoreUpdate) SetNillableAccountID(s *string) *LeaderboardScoreUpdate {
	if s != nil {
		lsu.SetAccountID(*s)
	}
	return lsu
}

// SetReferenceID sets the "reference_id" field.
func (lsu *LeaderboardScoreUpdate) SetReferenceID(s string) *LeaderboardScoreUpdate {
	lsu.mutation.SetReferenceID(s)
	return lsu
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (lsu *LeaderboardScoreUpdate) SetNillableReferenceID(s *string) *LeaderboardScoreUpdate {
	if s != nil {
		lsu.SetReferenceID(*s)
	}
	return lsu
}

// SetLeaderboardID sets the "leaderboard_id" field.
func (lsu *LeaderboardScoreUpdate) SetLeaderboardID(s string) *LeaderboardScoreUpdate {
	lsu.mutation.SetLeaderboardID(s)
	return lsu
}

// SetNillableLeaderboardID sets the "leaderboard_id" field if the given value is not nil.
func (lsu *LeaderboardScoreUpdate) SetNillableLeaderboardID(s *string) *LeaderboardScoreUpdate {
	if s != nil {
		lsu.SetLeaderboardID(*s)
	}
	return lsu
}

// SetMeta sets the "meta" field.
func (lsu *LeaderboardScoreUpdate) SetMeta(m map[string]interface{}) *LeaderboardScoreUpdate {
	lsu.mutation.SetMeta(m)
	return lsu
}

// Mutation returns the LeaderboardScoreMutation object of the builder.
func (lsu *LeaderboardScoreUpdate) Mutation() *LeaderboardScoreMutation {
	return lsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lsu *LeaderboardScoreUpdate) Save(ctx context.Context) (int, error) {
	lsu.defaults()
	return withHooks(ctx, lsu.sqlSave, lsu.mutation, lsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lsu *LeaderboardScoreUpdate) SaveX(ctx context.Context) int {
	affected, err := lsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lsu *LeaderboardScoreUpdate) Exec(ctx context.Context) error {
	_, err := lsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsu *LeaderboardScoreUpdate) ExecX(ctx context.Context) {
	if err := lsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lsu *LeaderboardScoreUpdate) defaults() {
	if _, ok := lsu.mutation.UpdatedAt(); !ok {
		v := leaderboardscore.UpdateDefaultUpdatedAt()
		lsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsu *LeaderboardScoreUpdate) check() error {
	if v, ok := lsu.mutation.GetType(); ok {
		if err := leaderboardscore.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "LeaderboardScore.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lsu *LeaderboardScoreUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LeaderboardScoreUpdate {
	lsu.modifiers = append(lsu.modifiers, modifiers...)
	return lsu
}

func (lsu *LeaderboardScoreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(leaderboardscore.Table, leaderboardscore.Columns, sqlgraph.NewFieldSpec(leaderboardscore.FieldID, field.TypeString))
	if ps := lsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lsu.mutation.UpdatedAt(); ok {
		_spec.SetField(leaderboardscore.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lsu.mutation.GetType(); ok {
		_spec.SetField(leaderboardscore.FieldType, field.TypeEnum, value)
	}
	if value, ok := lsu.mutation.Score(); ok {
		_spec.SetField(leaderboardscore.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := lsu.mutation.AddedScore(); ok {
		_spec.AddField(leaderboardscore.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := lsu.mutation.AccountID(); ok {
		_spec.SetField(leaderboardscore.FieldAccountID, field.TypeString, value)
	}
	if value, ok := lsu.mutation.ReferenceID(); ok {
		_spec.SetField(leaderboardscore.FieldReferenceID, field.TypeString, value)
	}
	if value, ok := lsu.mutation.LeaderboardID(); ok {
		_spec.SetField(leaderboardscore.FieldLeaderboardID, field.TypeString, value)
	}
	if value, ok := lsu.mutation.Meta(); ok {
		_spec.SetField(leaderboardscore.FieldMeta, field.TypeJSON, value)
	}
	_spec.AddModifiers(lsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, lsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{leaderboardscore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lsu.mutation.done = true
	return n, nil
}

// LeaderboardScoreUpdateOne is the builder for updating a single LeaderboardScore entity.
type LeaderboardScoreUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *LeaderboardScoreMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (lsuo *LeaderboardScoreUpdateOne) SetUpdatedAt(t time.Time) *LeaderboardScoreUpdateOne {
	lsuo.mutation.SetUpdatedAt(t)
	return lsuo
}

// SetType sets the "type" field.
func (lsuo *LeaderboardScoreUpdateOne) SetType(mt models.ScoreType) *LeaderboardScoreUpdateOne {
	lsuo.mutation.SetType(mt)
	return lsuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (lsuo *LeaderboardScoreUpdateOne) SetNillableType(mt *models.ScoreType) *LeaderboardScoreUpdateOne {
	if mt != nil {
		lsuo.SetType(*mt)
	}
	return lsuo
}

// SetScore sets the "score" field.
func (lsuo *LeaderboardScoreUpdateOne) SetScore(f float32) *LeaderboardScoreUpdateOne {
	lsuo.mutation.ResetScore()
	lsuo.mutation.SetScore(f)
	return lsuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (lsuo *LeaderboardScoreUpdateOne) SetNillableScore(f *float32) *LeaderboardScoreUpdateOne {
	if f != nil {
		lsuo.SetScore(*f)
	}
	return lsuo
}

// AddScore adds f to the "score" field.
func (lsuo *LeaderboardScoreUpdateOne) AddScore(f float32) *LeaderboardScoreUpdateOne {
	lsuo.mutation.AddScore(f)
	return lsuo
}

// SetAccountID sets the "account_id" field.
func (lsuo *LeaderboardScoreUpdateOne) SetAccountID(s string) *LeaderboardScoreUpdateOne {
	lsuo.mutation.SetAccountID(s)
	return lsuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (lsuo *LeaderboardScoreUpdateOne) SetNillableAccountID(s *string) *LeaderboardScoreUpdateOne {
	if s != nil {
		lsuo.SetAccountID(*s)
	}
	return lsuo
}

// SetReferenceID sets the "reference_id" field.
func (lsuo *LeaderboardScoreUpdateOne) SetReferenceID(s string) *LeaderboardScoreUpdateOne {
	lsuo.mutation.SetReferenceID(s)
	return lsuo
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (lsuo *LeaderboardScoreUpdateOne) SetNillableReferenceID(s *string) *LeaderboardScoreUpdateOne {
	if s != nil {
		lsuo.SetReferenceID(*s)
	}
	return lsuo
}

// SetLeaderboardID sets the "leaderboard_id" field.
func (lsuo *LeaderboardScoreUpdateOne) SetLeaderboardID(s string) *LeaderboardScoreUpdateOne {
	lsuo.mutation.SetLeaderboardID(s)
	return lsuo
}

// SetNillableLeaderboardID sets the "leaderboard_id" field if the given value is not nil.
func (lsuo *LeaderboardScoreUpdateOne) SetNillableLeaderboardID(s *string) *LeaderboardScoreUpdateOne {
	if s != nil {
		lsuo.SetLeaderboardID(*s)
	}
	return lsuo
}

// SetMeta sets the "meta" field.
func (lsuo *LeaderboardScoreUpdateOne) SetMeta(m map[string]interface{}) *LeaderboardScoreUpdateOne {
	lsuo.mutation.SetMeta(m)
	return lsuo
}

// Mutation returns the LeaderboardScoreMutation object of the builder.
func (lsuo *LeaderboardScoreUpdateOne) Mutation() *LeaderboardScoreMutation {
	return lsuo.mutation
}

// Where appends a list predicates to the LeaderboardScoreUpdate builder.
func (lsuo *LeaderboardScoreUpdateOne) Where(ps ...predicate.LeaderboardScore) *LeaderboardScoreUpdateOne {
	lsuo.mutation.Where(ps...)
	return lsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lsuo *LeaderboardScoreUpdateOne) Select(field string, fields ...string) *LeaderboardScoreUpdateOne {
	lsuo.fields = append([]string{field}, fields...)
	return lsuo
}

// Save executes the query and returns the updated LeaderboardScore entity.
func (lsuo *LeaderboardScoreUpdateOne) Save(ctx context.Context) (*LeaderboardScore, error) {
	lsuo.defaults()
	return withHooks(ctx, lsuo.sqlSave, lsuo.mutation, lsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lsuo *LeaderboardScoreUpdateOne) SaveX(ctx context.Context) *LeaderboardScore {
	node, err := lsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lsuo *LeaderboardScoreUpdateOne) Exec(ctx context.Context) error {
	_, err := lsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsuo *LeaderboardScoreUpdateOne) ExecX(ctx context.Context) {
	if err := lsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lsuo *LeaderboardScoreUpdateOne) defaults() {
	if _, ok := lsuo.mutation.UpdatedAt(); !ok {
		v := leaderboardscore.UpdateDefaultUpdatedAt()
		lsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsuo *LeaderboardScoreUpdateOne) check() error {
	if v, ok := lsuo.mutation.GetType(); ok {
		if err := leaderboardscore.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "LeaderboardScore.type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (lsuo *LeaderboardScoreUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *LeaderboardScoreUpdateOne {
	lsuo.modifiers = append(lsuo.modifiers, modifiers...)
	return lsuo
}

func (lsuo *LeaderboardScoreUpdateOne) sqlSave(ctx context.Context) (_node *LeaderboardScore, err error) {
	if err := lsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(leaderboardscore.Table, leaderboardscore.Columns, sqlgraph.NewFieldSpec(leaderboardscore.FieldID, field.TypeString))
	id, ok := lsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "LeaderboardScore.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, leaderboardscore.FieldID)
		for _, f := range fields {
			if !leaderboardscore.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != leaderboardscore.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(leaderboardscore.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lsuo.mutation.GetType(); ok {
		_spec.SetField(leaderboardscore.FieldType, field.TypeEnum, value)
	}
	if value, ok := lsuo.mutation.Score(); ok {
		_spec.SetField(leaderboardscore.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := lsuo.mutation.AddedScore(); ok {
		_spec.AddField(leaderboardscore.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := lsuo.mutation.AccountID(); ok {
		_spec.SetField(leaderboardscore.FieldAccountID, field.TypeString, value)
	}
	if value, ok := lsuo.mutation.ReferenceID(); ok {
		_spec.SetField(leaderboardscore.FieldReferenceID, field.TypeString, value)
	}
	if value, ok := lsuo.mutation.LeaderboardID(); ok {
		_spec.SetField(leaderboardscore.FieldLeaderboardID, field.TypeString, value)
	}
	if value, ok := lsuo.mutation.Meta(); ok {
		_spec.SetField(leaderboardscore.FieldMeta, field.TypeJSON, value)
	}
	_spec.AddModifiers(lsuo.modifiers...)
	_node = &LeaderboardScore{config: lsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{leaderboardscore.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lsuo.mutation.done = true
	return _node, nil
}
