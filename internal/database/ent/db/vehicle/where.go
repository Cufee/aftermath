// Code generated by ent, DO NOT EDIT.

package vehicle

import (
	"entgo.io/ent/dialect/sql"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldUpdatedAt, v))
}

// Tier applies equality check predicate on the "tier" field. It's identical to TierEQ.
func Tier(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldTier, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldUpdatedAt, v))
}

// TierEQ applies the EQ predicate on the "tier" field.
func TierEQ(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldEQ(FieldTier, v))
}

// TierNEQ applies the NEQ predicate on the "tier" field.
func TierNEQ(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNEQ(FieldTier, v))
}

// TierIn applies the In predicate on the "tier" field.
func TierIn(vs ...int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldIn(FieldTier, vs...))
}

// TierNotIn applies the NotIn predicate on the "tier" field.
func TierNotIn(vs ...int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldNotIn(FieldTier, vs...))
}

// TierGT applies the GT predicate on the "tier" field.
func TierGT(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGT(FieldTier, v))
}

// TierGTE applies the GTE predicate on the "tier" field.
func TierGTE(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldGTE(FieldTier, v))
}

// TierLT applies the LT predicate on the "tier" field.
func TierLT(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLT(FieldTier, v))
}

// TierLTE applies the LTE predicate on the "tier" field.
func TierLTE(v int) predicate.Vehicle {
	return predicate.Vehicle(sql.FieldLTE(FieldTier, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vehicle) predicate.Vehicle {
	return predicate.Vehicle(sql.NotPredicates(p))
}
