// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/gamemode"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"golang.org/x/text/language"
)

// GameModeUpdate is the builder for updating GameMode entities.
type GameModeUpdate struct {
	config
	hooks     []Hook
	mutation  *GameModeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GameModeUpdate builder.
func (gmu *GameModeUpdate) Where(ps ...predicate.GameMode) *GameModeUpdate {
	gmu.mutation.Where(ps...)
	return gmu
}

// SetUpdatedAt sets the "updated_at" field.
func (gmu *GameModeUpdate) SetUpdatedAt(t time.Time) *GameModeUpdate {
	gmu.mutation.SetUpdatedAt(t)
	return gmu
}

// SetLocalizedNames sets the "localized_names" field.
func (gmu *GameModeUpdate) SetLocalizedNames(m map[language.Tag]string) *GameModeUpdate {
	gmu.mutation.SetLocalizedNames(m)
	return gmu
}

// Mutation returns the GameModeMutation object of the builder.
func (gmu *GameModeUpdate) Mutation() *GameModeMutation {
	return gmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gmu *GameModeUpdate) Save(ctx context.Context) (int, error) {
	gmu.defaults()
	return withHooks(ctx, gmu.sqlSave, gmu.mutation, gmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gmu *GameModeUpdate) SaveX(ctx context.Context) int {
	affected, err := gmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gmu *GameModeUpdate) Exec(ctx context.Context) error {
	_, err := gmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmu *GameModeUpdate) ExecX(ctx context.Context) {
	if err := gmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gmu *GameModeUpdate) defaults() {
	if _, ok := gmu.mutation.UpdatedAt(); !ok {
		v := gamemode.UpdateDefaultUpdatedAt()
		gmu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gmu *GameModeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GameModeUpdate {
	gmu.modifiers = append(gmu.modifiers, modifiers...)
	return gmu
}

func (gmu *GameModeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(gamemode.Table, gamemode.Columns, sqlgraph.NewFieldSpec(gamemode.FieldID, field.TypeString))
	if ps := gmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gmu.mutation.UpdatedAt(); ok {
		_spec.SetField(gamemode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gmu.mutation.LocalizedNames(); ok {
		_spec.SetField(gamemode.FieldLocalizedNames, field.TypeJSON, value)
	}
	_spec.AddModifiers(gmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gamemode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gmu.mutation.done = true
	return n, nil
}

// GameModeUpdateOne is the builder for updating a single GameMode entity.
type GameModeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GameModeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (gmuo *GameModeUpdateOne) SetUpdatedAt(t time.Time) *GameModeUpdateOne {
	gmuo.mutation.SetUpdatedAt(t)
	return gmuo
}

// SetLocalizedNames sets the "localized_names" field.
func (gmuo *GameModeUpdateOne) SetLocalizedNames(m map[language.Tag]string) *GameModeUpdateOne {
	gmuo.mutation.SetLocalizedNames(m)
	return gmuo
}

// Mutation returns the GameModeMutation object of the builder.
func (gmuo *GameModeUpdateOne) Mutation() *GameModeMutation {
	return gmuo.mutation
}

// Where appends a list predicates to the GameModeUpdate builder.
func (gmuo *GameModeUpdateOne) Where(ps ...predicate.GameMode) *GameModeUpdateOne {
	gmuo.mutation.Where(ps...)
	return gmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gmuo *GameModeUpdateOne) Select(field string, fields ...string) *GameModeUpdateOne {
	gmuo.fields = append([]string{field}, fields...)
	return gmuo
}

// Save executes the query and returns the updated GameMode entity.
func (gmuo *GameModeUpdateOne) Save(ctx context.Context) (*GameMode, error) {
	gmuo.defaults()
	return withHooks(ctx, gmuo.sqlSave, gmuo.mutation, gmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gmuo *GameModeUpdateOne) SaveX(ctx context.Context) *GameMode {
	node, err := gmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gmuo *GameModeUpdateOne) Exec(ctx context.Context) error {
	_, err := gmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmuo *GameModeUpdateOne) ExecX(ctx context.Context) {
	if err := gmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gmuo *GameModeUpdateOne) defaults() {
	if _, ok := gmuo.mutation.UpdatedAt(); !ok {
		v := gamemode.UpdateDefaultUpdatedAt()
		gmuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gmuo *GameModeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GameModeUpdateOne {
	gmuo.modifiers = append(gmuo.modifiers, modifiers...)
	return gmuo
}

func (gmuo *GameModeUpdateOne) sqlSave(ctx context.Context) (_node *GameMode, err error) {
	_spec := sqlgraph.NewUpdateSpec(gamemode.Table, gamemode.Columns, sqlgraph.NewFieldSpec(gamemode.FieldID, field.TypeString))
	id, ok := gmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "GameMode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamemode.FieldID)
		for _, f := range fields {
			if !gamemode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != gamemode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(gamemode.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gmuo.mutation.LocalizedNames(); ok {
		_spec.SetField(gamemode.FieldLocalizedNames, field.TypeJSON, value)
	}
	_spec.AddModifiers(gmuo.modifiers...)
	_node = &GameMode{config: gmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gamemode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gmuo.mutation.done = true
	return _node, nil
}
