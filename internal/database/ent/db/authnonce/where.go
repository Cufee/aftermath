// Code generated by ent, DO NOT EDIT.

package authnonce

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEQ(FieldUpdatedAt, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEQ(FieldActive, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEQ(FieldExpiresAt, v))
}

// Identifier applies equality check predicate on the "identifier" field. It's identical to IdentifierEQ.
func Identifier(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEQ(FieldIdentifier, v))
}

// PublicID applies equality check predicate on the "public_id" field. It's identical to PublicIDEQ.
func PublicID(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEQ(FieldPublicID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldLTE(FieldUpdatedAt, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldNEQ(FieldActive, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldLTE(FieldExpiresAt, v))
}

// IdentifierEQ applies the EQ predicate on the "identifier" field.
func IdentifierEQ(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEQ(FieldIdentifier, v))
}

// IdentifierNEQ applies the NEQ predicate on the "identifier" field.
func IdentifierNEQ(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldNEQ(FieldIdentifier, v))
}

// IdentifierIn applies the In predicate on the "identifier" field.
func IdentifierIn(vs ...string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldIn(FieldIdentifier, vs...))
}

// IdentifierNotIn applies the NotIn predicate on the "identifier" field.
func IdentifierNotIn(vs ...string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldNotIn(FieldIdentifier, vs...))
}

// IdentifierGT applies the GT predicate on the "identifier" field.
func IdentifierGT(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldGT(FieldIdentifier, v))
}

// IdentifierGTE applies the GTE predicate on the "identifier" field.
func IdentifierGTE(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldGTE(FieldIdentifier, v))
}

// IdentifierLT applies the LT predicate on the "identifier" field.
func IdentifierLT(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldLT(FieldIdentifier, v))
}

// IdentifierLTE applies the LTE predicate on the "identifier" field.
func IdentifierLTE(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldLTE(FieldIdentifier, v))
}

// IdentifierContains applies the Contains predicate on the "identifier" field.
func IdentifierContains(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldContains(FieldIdentifier, v))
}

// IdentifierHasPrefix applies the HasPrefix predicate on the "identifier" field.
func IdentifierHasPrefix(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldHasPrefix(FieldIdentifier, v))
}

// IdentifierHasSuffix applies the HasSuffix predicate on the "identifier" field.
func IdentifierHasSuffix(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldHasSuffix(FieldIdentifier, v))
}

// IdentifierEqualFold applies the EqualFold predicate on the "identifier" field.
func IdentifierEqualFold(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEqualFold(FieldIdentifier, v))
}

// IdentifierContainsFold applies the ContainsFold predicate on the "identifier" field.
func IdentifierContainsFold(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldContainsFold(FieldIdentifier, v))
}

// PublicIDEQ applies the EQ predicate on the "public_id" field.
func PublicIDEQ(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEQ(FieldPublicID, v))
}

// PublicIDNEQ applies the NEQ predicate on the "public_id" field.
func PublicIDNEQ(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldNEQ(FieldPublicID, v))
}

// PublicIDIn applies the In predicate on the "public_id" field.
func PublicIDIn(vs ...string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldIn(FieldPublicID, vs...))
}

// PublicIDNotIn applies the NotIn predicate on the "public_id" field.
func PublicIDNotIn(vs ...string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldNotIn(FieldPublicID, vs...))
}

// PublicIDGT applies the GT predicate on the "public_id" field.
func PublicIDGT(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldGT(FieldPublicID, v))
}

// PublicIDGTE applies the GTE predicate on the "public_id" field.
func PublicIDGTE(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldGTE(FieldPublicID, v))
}

// PublicIDLT applies the LT predicate on the "public_id" field.
func PublicIDLT(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldLT(FieldPublicID, v))
}

// PublicIDLTE applies the LTE predicate on the "public_id" field.
func PublicIDLTE(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldLTE(FieldPublicID, v))
}

// PublicIDContains applies the Contains predicate on the "public_id" field.
func PublicIDContains(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldContains(FieldPublicID, v))
}

// PublicIDHasPrefix applies the HasPrefix predicate on the "public_id" field.
func PublicIDHasPrefix(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldHasPrefix(FieldPublicID, v))
}

// PublicIDHasSuffix applies the HasSuffix predicate on the "public_id" field.
func PublicIDHasSuffix(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldHasSuffix(FieldPublicID, v))
}

// PublicIDEqualFold applies the EqualFold predicate on the "public_id" field.
func PublicIDEqualFold(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldEqualFold(FieldPublicID, v))
}

// PublicIDContainsFold applies the ContainsFold predicate on the "public_id" field.
func PublicIDContainsFold(v string) predicate.AuthNonce {
	return predicate.AuthNonce(sql.FieldContainsFold(FieldPublicID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuthNonce) predicate.AuthNonce {
	return predicate.AuthNonce(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuthNonce) predicate.AuthNonce {
	return predicate.AuthNonce(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuthNonce) predicate.AuthNonce {
	return predicate.AuthNonce(sql.NotPredicates(p))
}
