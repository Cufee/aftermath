// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/cufee/aftermath/internal/database/ent/db"
)

// The AccountFunc type is an adapter to allow the use of ordinary
// function as Account mutator.
type AccountFunc func(context.Context, *db.AccountMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f AccountFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.AccountMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.AccountMutation", m)
}

// The AccountSnapshotFunc type is an adapter to allow the use of ordinary
// function as AccountSnapshot mutator.
type AccountSnapshotFunc func(context.Context, *db.AccountSnapshotMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f AccountSnapshotFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.AccountSnapshotMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.AccountSnapshotMutation", m)
}

// The AppConfigurationFunc type is an adapter to allow the use of ordinary
// function as AppConfiguration mutator.
type AppConfigurationFunc func(context.Context, *db.AppConfigurationMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f AppConfigurationFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.AppConfigurationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.AppConfigurationMutation", m)
}

// The ApplicationCommandFunc type is an adapter to allow the use of ordinary
// function as ApplicationCommand mutator.
type ApplicationCommandFunc func(context.Context, *db.ApplicationCommandMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ApplicationCommandFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ApplicationCommandMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ApplicationCommandMutation", m)
}

// The AuthNonceFunc type is an adapter to allow the use of ordinary
// function as AuthNonce mutator.
type AuthNonceFunc func(context.Context, *db.AuthNonceMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f AuthNonceFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.AuthNonceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.AuthNonceMutation", m)
}

// The ClanFunc type is an adapter to allow the use of ordinary
// function as Clan mutator.
type ClanFunc func(context.Context, *db.ClanMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f ClanFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.ClanMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.ClanMutation", m)
}

// The CronTaskFunc type is an adapter to allow the use of ordinary
// function as CronTask mutator.
type CronTaskFunc func(context.Context, *db.CronTaskMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f CronTaskFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.CronTaskMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.CronTaskMutation", m)
}

// The DiscordInteractionFunc type is an adapter to allow the use of ordinary
// function as DiscordInteraction mutator.
type DiscordInteractionFunc func(context.Context, *db.DiscordInteractionMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f DiscordInteractionFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.DiscordInteractionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.DiscordInteractionMutation", m)
}

// The GameMapFunc type is an adapter to allow the use of ordinary
// function as GameMap mutator.
type GameMapFunc func(context.Context, *db.GameMapMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f GameMapFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.GameMapMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.GameMapMutation", m)
}

// The LeaderboardScoreFunc type is an adapter to allow the use of ordinary
// function as LeaderboardScore mutator.
type LeaderboardScoreFunc func(context.Context, *db.LeaderboardScoreMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f LeaderboardScoreFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.LeaderboardScoreMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.LeaderboardScoreMutation", m)
}

// The SessionFunc type is an adapter to allow the use of ordinary
// function as Session mutator.
type SessionFunc func(context.Context, *db.SessionMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f SessionFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.SessionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.SessionMutation", m)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *db.UserMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.UserMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.UserMutation", m)
}

// The UserConnectionFunc type is an adapter to allow the use of ordinary
// function as UserConnection mutator.
type UserConnectionFunc func(context.Context, *db.UserConnectionMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f UserConnectionFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.UserConnectionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.UserConnectionMutation", m)
}

// The UserContentFunc type is an adapter to allow the use of ordinary
// function as UserContent mutator.
type UserContentFunc func(context.Context, *db.UserContentMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f UserContentFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.UserContentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.UserContentMutation", m)
}

// The UserSubscriptionFunc type is an adapter to allow the use of ordinary
// function as UserSubscription mutator.
type UserSubscriptionFunc func(context.Context, *db.UserSubscriptionMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f UserSubscriptionFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.UserSubscriptionMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.UserSubscriptionMutation", m)
}

// The VehicleFunc type is an adapter to allow the use of ordinary
// function as Vehicle mutator.
type VehicleFunc func(context.Context, *db.VehicleMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f VehicleFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.VehicleMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.VehicleMutation", m)
}

// The VehicleAverageFunc type is an adapter to allow the use of ordinary
// function as VehicleAverage mutator.
type VehicleAverageFunc func(context.Context, *db.VehicleAverageMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f VehicleAverageFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.VehicleAverageMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.VehicleAverageMutation", m)
}

// The VehicleSnapshotFunc type is an adapter to allow the use of ordinary
// function as VehicleSnapshot mutator.
type VehicleSnapshotFunc func(context.Context, *db.VehicleSnapshotMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f VehicleSnapshotFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.VehicleSnapshotMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.VehicleSnapshotMutation", m)
}

// The WidgetSettingsFunc type is an adapter to allow the use of ordinary
// function as WidgetSettings mutator.
type WidgetSettingsFunc func(context.Context, *db.WidgetSettingsMutation) (db.Value, error)

// Mutate calls f(ctx, m).
func (f WidgetSettingsFunc) Mutate(ctx context.Context, m db.Mutation) (db.Value, error) {
	if mv, ok := m.(*db.WidgetSettingsMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *db.WidgetSettingsMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, db.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m db.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m db.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m db.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op db.Op) Condition {
	return func(_ context.Context, m db.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m db.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m db.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m db.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk db.Hook, cond Condition) db.Hook {
	return func(next db.Mutator) db.Mutator {
		return db.MutateFunc(func(ctx context.Context, m db.Mutation) (db.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, db.Delete|db.Create)
func On(hk db.Hook, op db.Op) db.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, db.Update|db.UpdateOne)
func Unless(hk db.Hook, op db.Op) db.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) db.Hook {
	return func(db.Mutator) db.Mutator {
		return db.MutateFunc(func(context.Context, db.Mutation) (db.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []db.Hook {
//		return []db.Hook{
//			Reject(db.Delete|db.Update),
//		}
//	}
func Reject(op db.Op) db.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []db.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...db.Hook) Chain {
	return Chain{append([]db.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() db.Hook {
	return func(mutator db.Mutator) db.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...db.Hook) Chain {
	newHooks := make([]db.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
