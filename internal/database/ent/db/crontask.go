// Code generated by ent, DO NOT EDIT.

package db

import (
	"github.com/cufee/aftermath/internal/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cufee/aftermath/internal/database/ent/db/crontask"
	"github.com/cufee/aftermath/internal/database/models"
)

// CronTask is the model entity for the CronTask schema.
type CronTask struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Type holds the value of the "type" field.
	Type models.TaskType `json:"type,omitempty"`
	// ReferenceID holds the value of the "reference_id" field.
	ReferenceID string `json:"reference_id,omitempty"`
	// Targets holds the value of the "targets" field.
	Targets []string `json:"targets,omitempty"`
	// Status holds the value of the "status" field.
	Status models.TaskStatus `json:"status,omitempty"`
	// ScheduledAfter holds the value of the "scheduled_after" field.
	ScheduledAfter time.Time `json:"scheduled_after,omitempty"`
	// LastRun holds the value of the "last_run" field.
	LastRun time.Time `json:"last_run,omitempty"`
	// TriesLeft holds the value of the "tries_left" field.
	TriesLeft int `json:"tries_left,omitempty"`
	// Logs holds the value of the "logs" field.
	Logs []models.TaskLog `json:"logs,omitempty"`
	// Data holds the value of the "data" field.
	Data         map[string]string `json:"data,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CronTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case crontask.FieldTargets, crontask.FieldLogs, crontask.FieldData:
			values[i] = new([]byte)
		case crontask.FieldTriesLeft:
			values[i] = new(sql.NullInt64)
		case crontask.FieldID, crontask.FieldType, crontask.FieldReferenceID, crontask.FieldStatus:
			values[i] = new(sql.NullString)
		case crontask.FieldCreatedAt, crontask.FieldUpdatedAt, crontask.FieldScheduledAfter, crontask.FieldLastRun:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CronTask fields.
func (ct *CronTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case crontask.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ct.ID = value.String
			}
		case crontask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ct.CreatedAt = value.Time
			}
		case crontask.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ct.UpdatedAt = value.Time
			}
		case crontask.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ct.Type = models.TaskType(value.String)
			}
		case crontask.FieldReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_id", values[i])
			} else if value.Valid {
				ct.ReferenceID = value.String
			}
		case crontask.FieldTargets:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field targets", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ct.Targets); err != nil {
					return fmt.Errorf("unmarshal field targets: %w", err)
				}
			}
		case crontask.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ct.Status = models.TaskStatus(value.String)
			}
		case crontask.FieldScheduledAfter:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_after", values[i])
			} else if value.Valid {
				ct.ScheduledAfter = value.Time
			}
		case crontask.FieldLastRun:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_run", values[i])
			} else if value.Valid {
				ct.LastRun = value.Time
			}
		case crontask.FieldTriesLeft:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tries_left", values[i])
			} else if value.Valid {
				ct.TriesLeft = int(value.Int64)
			}
		case crontask.FieldLogs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field logs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ct.Logs); err != nil {
					return fmt.Errorf("unmarshal field logs: %w", err)
				}
			}
		case crontask.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ct.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		default:
			ct.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CronTask.
// This includes values selected through modifiers, order, etc.
func (ct *CronTask) Value(name string) (ent.Value, error) {
	return ct.selectValues.Get(name)
}

// Update returns a builder for updating this CronTask.
// Note that you need to call CronTask.Unwrap() before calling this method if this CronTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *CronTask) Update() *CronTaskUpdateOne {
	return NewCronTaskClient(ct.config).UpdateOne(ct)
}

// Unwrap unwraps the CronTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *CronTask) Unwrap() *CronTask {
	_tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("db: CronTask is not a transactional entity")
	}
	ct.config.driver = _tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *CronTask) String() string {
	var builder strings.Builder
	builder.WriteString("CronTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ct.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ct.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ct.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ct.Type))
	builder.WriteString(", ")
	builder.WriteString("reference_id=")
	builder.WriteString(ct.ReferenceID)
	builder.WriteString(", ")
	builder.WriteString("targets=")
	builder.WriteString(fmt.Sprintf("%v", ct.Targets))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ct.Status))
	builder.WriteString(", ")
	builder.WriteString("scheduled_after=")
	builder.WriteString(ct.ScheduledAfter.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_run=")
	builder.WriteString(ct.LastRun.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tries_left=")
	builder.WriteString(fmt.Sprintf("%v", ct.TriesLeft))
	builder.WriteString(", ")
	builder.WriteString("logs=")
	builder.WriteString(fmt.Sprintf("%v", ct.Logs))
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", ct.Data))
	builder.WriteByte(')')
	return builder.String()
}

// CronTasks is a parsable slice of CronTask.
type CronTasks []*CronTask
