// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/gamemode"
	"golang.org/x/text/language"
)

// GameModeCreate is the builder for creating a GameMode entity.
type GameModeCreate struct {
	config
	mutation *GameModeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (gmc *GameModeCreate) SetCreatedAt(t time.Time) *GameModeCreate {
	gmc.mutation.SetCreatedAt(t)
	return gmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gmc *GameModeCreate) SetNillableCreatedAt(t *time.Time) *GameModeCreate {
	if t != nil {
		gmc.SetCreatedAt(*t)
	}
	return gmc
}

// SetUpdatedAt sets the "updated_at" field.
func (gmc *GameModeCreate) SetUpdatedAt(t time.Time) *GameModeCreate {
	gmc.mutation.SetUpdatedAt(t)
	return gmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gmc *GameModeCreate) SetNillableUpdatedAt(t *time.Time) *GameModeCreate {
	if t != nil {
		gmc.SetUpdatedAt(*t)
	}
	return gmc
}

// SetLocalizedNames sets the "localized_names" field.
func (gmc *GameModeCreate) SetLocalizedNames(m map[language.Tag]string) *GameModeCreate {
	gmc.mutation.SetLocalizedNames(m)
	return gmc
}

// SetID sets the "id" field.
func (gmc *GameModeCreate) SetID(s string) *GameModeCreate {
	gmc.mutation.SetID(s)
	return gmc
}

// Mutation returns the GameModeMutation object of the builder.
func (gmc *GameModeCreate) Mutation() *GameModeMutation {
	return gmc.mutation
}

// Save creates the GameMode in the database.
func (gmc *GameModeCreate) Save(ctx context.Context) (*GameMode, error) {
	gmc.defaults()
	return withHooks(ctx, gmc.sqlSave, gmc.mutation, gmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gmc *GameModeCreate) SaveX(ctx context.Context) *GameMode {
	v, err := gmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gmc *GameModeCreate) Exec(ctx context.Context) error {
	_, err := gmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmc *GameModeCreate) ExecX(ctx context.Context) {
	if err := gmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gmc *GameModeCreate) defaults() {
	if _, ok := gmc.mutation.CreatedAt(); !ok {
		v := gamemode.DefaultCreatedAt()
		gmc.mutation.SetCreatedAt(v)
	}
	if _, ok := gmc.mutation.UpdatedAt(); !ok {
		v := gamemode.DefaultUpdatedAt()
		gmc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gmc *GameModeCreate) check() error {
	if _, ok := gmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "GameMode.created_at"`)}
	}
	if _, ok := gmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "GameMode.updated_at"`)}
	}
	if _, ok := gmc.mutation.LocalizedNames(); !ok {
		return &ValidationError{Name: "localized_names", err: errors.New(`db: missing required field "GameMode.localized_names"`)}
	}
	return nil
}

func (gmc *GameModeCreate) sqlSave(ctx context.Context) (*GameMode, error) {
	if err := gmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected GameMode.ID type: %T", _spec.ID.Value)
		}
	}
	gmc.mutation.id = &_node.ID
	gmc.mutation.done = true
	return _node, nil
}

func (gmc *GameModeCreate) createSpec() (*GameMode, *sqlgraph.CreateSpec) {
	var (
		_node = &GameMode{config: gmc.config}
		_spec = sqlgraph.NewCreateSpec(gamemode.Table, sqlgraph.NewFieldSpec(gamemode.FieldID, field.TypeString))
	)
	if id, ok := gmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gmc.mutation.CreatedAt(); ok {
		_spec.SetField(gamemode.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gmc.mutation.UpdatedAt(); ok {
		_spec.SetField(gamemode.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gmc.mutation.LocalizedNames(); ok {
		_spec.SetField(gamemode.FieldLocalizedNames, field.TypeJSON, value)
		_node.LocalizedNames = value
	}
	return _node, _spec
}

// GameModeCreateBulk is the builder for creating many GameMode entities in bulk.
type GameModeCreateBulk struct {
	config
	err      error
	builders []*GameModeCreate
}

// Save creates the GameMode entities in the database.
func (gmcb *GameModeCreateBulk) Save(ctx context.Context) ([]*GameMode, error) {
	if gmcb.err != nil {
		return nil, gmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gmcb.builders))
	nodes := make([]*GameMode, len(gmcb.builders))
	mutators := make([]Mutator, len(gmcb.builders))
	for i := range gmcb.builders {
		func(i int, root context.Context) {
			builder := gmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameModeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gmcb *GameModeCreateBulk) SaveX(ctx context.Context) []*GameMode {
	v, err := gmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gmcb *GameModeCreateBulk) Exec(ctx context.Context) error {
	_, err := gmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmcb *GameModeCreateBulk) ExecX(ctx context.Context) {
	if err := gmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
