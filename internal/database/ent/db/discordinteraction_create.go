// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/discordinteraction"
	"github.com/cufee/aftermath/internal/database/ent/db/user"
	"github.com/cufee/aftermath/internal/database/models"
)

// DiscordInteractionCreate is the builder for creating a DiscordInteraction entity.
type DiscordInteractionCreate struct {
	config
	mutation *DiscordInteractionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dic *DiscordInteractionCreate) SetCreatedAt(t time.Time) *DiscordInteractionCreate {
	dic.mutation.SetCreatedAt(t)
	return dic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dic *DiscordInteractionCreate) SetNillableCreatedAt(t *time.Time) *DiscordInteractionCreate {
	if t != nil {
		dic.SetCreatedAt(*t)
	}
	return dic
}

// SetUpdatedAt sets the "updated_at" field.
func (dic *DiscordInteractionCreate) SetUpdatedAt(t time.Time) *DiscordInteractionCreate {
	dic.mutation.SetUpdatedAt(t)
	return dic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dic *DiscordInteractionCreate) SetNillableUpdatedAt(t *time.Time) *DiscordInteractionCreate {
	if t != nil {
		dic.SetUpdatedAt(*t)
	}
	return dic
}

// SetResult sets the "result" field.
func (dic *DiscordInteractionCreate) SetResult(s string) *DiscordInteractionCreate {
	dic.mutation.SetResult(s)
	return dic
}

// SetUserID sets the "user_id" field.
func (dic *DiscordInteractionCreate) SetUserID(s string) *DiscordInteractionCreate {
	dic.mutation.SetUserID(s)
	return dic
}

// SetEventID sets the "event_id" field.
func (dic *DiscordInteractionCreate) SetEventID(s string) *DiscordInteractionCreate {
	dic.mutation.SetEventID(s)
	return dic
}

// SetGuildID sets the "guild_id" field.
func (dic *DiscordInteractionCreate) SetGuildID(s string) *DiscordInteractionCreate {
	dic.mutation.SetGuildID(s)
	return dic
}

// SetChannelID sets the "channel_id" field.
func (dic *DiscordInteractionCreate) SetChannelID(s string) *DiscordInteractionCreate {
	dic.mutation.SetChannelID(s)
	return dic
}

// SetMessageID sets the "message_id" field.
func (dic *DiscordInteractionCreate) SetMessageID(s string) *DiscordInteractionCreate {
	dic.mutation.SetMessageID(s)
	return dic
}

// SetType sets the "type" field.
func (dic *DiscordInteractionCreate) SetType(mit models.DiscordInteractionType) *DiscordInteractionCreate {
	dic.mutation.SetType(mit)
	return dic
}

// SetLocale sets the "locale" field.
func (dic *DiscordInteractionCreate) SetLocale(s string) *DiscordInteractionCreate {
	dic.mutation.SetLocale(s)
	return dic
}

// SetMetadata sets the "metadata" field.
func (dic *DiscordInteractionCreate) SetMetadata(m map[string]interface{}) *DiscordInteractionCreate {
	dic.mutation.SetMetadata(m)
	return dic
}

// SetID sets the "id" field.
func (dic *DiscordInteractionCreate) SetID(s string) *DiscordInteractionCreate {
	dic.mutation.SetID(s)
	return dic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dic *DiscordInteractionCreate) SetNillableID(s *string) *DiscordInteractionCreate {
	if s != nil {
		dic.SetID(*s)
	}
	return dic
}

// SetUser sets the "user" edge to the User entity.
func (dic *DiscordInteractionCreate) SetUser(u *User) *DiscordInteractionCreate {
	return dic.SetUserID(u.ID)
}

// Mutation returns the DiscordInteractionMutation object of the builder.
func (dic *DiscordInteractionCreate) Mutation() *DiscordInteractionMutation {
	return dic.mutation
}

// Save creates the DiscordInteraction in the database.
func (dic *DiscordInteractionCreate) Save(ctx context.Context) (*DiscordInteraction, error) {
	dic.defaults()
	return withHooks(ctx, dic.sqlSave, dic.mutation, dic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dic *DiscordInteractionCreate) SaveX(ctx context.Context) *DiscordInteraction {
	v, err := dic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dic *DiscordInteractionCreate) Exec(ctx context.Context) error {
	_, err := dic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dic *DiscordInteractionCreate) ExecX(ctx context.Context) {
	if err := dic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dic *DiscordInteractionCreate) defaults() {
	if _, ok := dic.mutation.CreatedAt(); !ok {
		v := discordinteraction.DefaultCreatedAt()
		dic.mutation.SetCreatedAt(v)
	}
	if _, ok := dic.mutation.UpdatedAt(); !ok {
		v := discordinteraction.DefaultUpdatedAt()
		dic.mutation.SetUpdatedAt(v)
	}
	if _, ok := dic.mutation.ID(); !ok {
		v := discordinteraction.DefaultID()
		dic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dic *DiscordInteractionCreate) check() error {
	if _, ok := dic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "DiscordInteraction.created_at"`)}
	}
	if _, ok := dic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "DiscordInteraction.updated_at"`)}
	}
	if _, ok := dic.mutation.Result(); !ok {
		return &ValidationError{Name: "result", err: errors.New(`db: missing required field "DiscordInteraction.result"`)}
	}
	if v, ok := dic.mutation.Result(); ok {
		if err := discordinteraction.ResultValidator(v); err != nil {
			return &ValidationError{Name: "result", err: fmt.Errorf(`db: validator failed for field "DiscordInteraction.result": %w`, err)}
		}
	}
	if _, ok := dic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`db: missing required field "DiscordInteraction.user_id"`)}
	}
	if v, ok := dic.mutation.UserID(); ok {
		if err := discordinteraction.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`db: validator failed for field "DiscordInteraction.user_id": %w`, err)}
		}
	}
	if _, ok := dic.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`db: missing required field "DiscordInteraction.event_id"`)}
	}
	if v, ok := dic.mutation.EventID(); ok {
		if err := discordinteraction.EventIDValidator(v); err != nil {
			return &ValidationError{Name: "event_id", err: fmt.Errorf(`db: validator failed for field "DiscordInteraction.event_id": %w`, err)}
		}
	}
	if _, ok := dic.mutation.GuildID(); !ok {
		return &ValidationError{Name: "guild_id", err: errors.New(`db: missing required field "DiscordInteraction.guild_id"`)}
	}
	if _, ok := dic.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`db: missing required field "DiscordInteraction.channel_id"`)}
	}
	if _, ok := dic.mutation.MessageID(); !ok {
		return &ValidationError{Name: "message_id", err: errors.New(`db: missing required field "DiscordInteraction.message_id"`)}
	}
	if _, ok := dic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "DiscordInteraction.type"`)}
	}
	if v, ok := dic.mutation.GetType(); ok {
		if err := discordinteraction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "DiscordInteraction.type": %w`, err)}
		}
	}
	if _, ok := dic.mutation.Locale(); !ok {
		return &ValidationError{Name: "locale", err: errors.New(`db: missing required field "DiscordInteraction.locale"`)}
	}
	if _, ok := dic.mutation.Metadata(); !ok {
		return &ValidationError{Name: "metadata", err: errors.New(`db: missing required field "DiscordInteraction.metadata"`)}
	}
	if _, ok := dic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`db: missing required edge "DiscordInteraction.user"`)}
	}
	return nil
}

func (dic *DiscordInteractionCreate) sqlSave(ctx context.Context) (*DiscordInteraction, error) {
	if err := dic.check(); err != nil {
		return nil, err
	}
	_node, _spec := dic.createSpec()
	if err := sqlgraph.CreateNode(ctx, dic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected DiscordInteraction.ID type: %T", _spec.ID.Value)
		}
	}
	dic.mutation.id = &_node.ID
	dic.mutation.done = true
	return _node, nil
}

func (dic *DiscordInteractionCreate) createSpec() (*DiscordInteraction, *sqlgraph.CreateSpec) {
	var (
		_node = &DiscordInteraction{config: dic.config}
		_spec = sqlgraph.NewCreateSpec(discordinteraction.Table, sqlgraph.NewFieldSpec(discordinteraction.FieldID, field.TypeString))
	)
	if id, ok := dic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dic.mutation.CreatedAt(); ok {
		_spec.SetField(discordinteraction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dic.mutation.UpdatedAt(); ok {
		_spec.SetField(discordinteraction.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dic.mutation.Result(); ok {
		_spec.SetField(discordinteraction.FieldResult, field.TypeString, value)
		_node.Result = value
	}
	if value, ok := dic.mutation.EventID(); ok {
		_spec.SetField(discordinteraction.FieldEventID, field.TypeString, value)
		_node.EventID = value
	}
	if value, ok := dic.mutation.GuildID(); ok {
		_spec.SetField(discordinteraction.FieldGuildID, field.TypeString, value)
		_node.GuildID = value
	}
	if value, ok := dic.mutation.ChannelID(); ok {
		_spec.SetField(discordinteraction.FieldChannelID, field.TypeString, value)
		_node.ChannelID = value
	}
	if value, ok := dic.mutation.MessageID(); ok {
		_spec.SetField(discordinteraction.FieldMessageID, field.TypeString, value)
		_node.MessageID = value
	}
	if value, ok := dic.mutation.GetType(); ok {
		_spec.SetField(discordinteraction.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := dic.mutation.Locale(); ok {
		_spec.SetField(discordinteraction.FieldLocale, field.TypeString, value)
		_node.Locale = value
	}
	if value, ok := dic.mutation.Metadata(); ok {
		_spec.SetField(discordinteraction.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if nodes := dic.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   discordinteraction.UserTable,
			Columns: []string{discordinteraction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DiscordInteractionCreateBulk is the builder for creating many DiscordInteraction entities in bulk.
type DiscordInteractionCreateBulk struct {
	config
	err      error
	builders []*DiscordInteractionCreate
}

// Save creates the DiscordInteraction entities in the database.
func (dicb *DiscordInteractionCreateBulk) Save(ctx context.Context) ([]*DiscordInteraction, error) {
	if dicb.err != nil {
		return nil, dicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dicb.builders))
	nodes := make([]*DiscordInteraction, len(dicb.builders))
	mutators := make([]Mutator, len(dicb.builders))
	for i := range dicb.builders {
		func(i int, root context.Context) {
			builder := dicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DiscordInteractionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dicb *DiscordInteractionCreateBulk) SaveX(ctx context.Context) []*DiscordInteraction {
	v, err := dicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dicb *DiscordInteractionCreateBulk) Exec(ctx context.Context) error {
	_, err := dicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dicb *DiscordInteractionCreateBulk) ExecX(ctx context.Context) {
	if err := dicb.Exec(ctx); err != nil {
		panic(err)
	}
}
