// Code generated by ent, DO NOT EDIT.

package db

import (
	"github.com/cufee/aftermath/internal/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cufee/aftermath/internal/database/ent/db/moderationrequest"
	"github.com/cufee/aftermath/internal/database/ent/db/user"
	"github.com/cufee/aftermath/internal/database/models"
)

// ModerationRequest is the model entity for the ModerationRequest schema.
type ModerationRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ModeratorID holds the value of the "moderator_id" field.
	ModeratorID *string `json:"moderator_id,omitempty"`
	// ModeratorComment holds the value of the "moderator_comment" field.
	ModeratorComment string `json:"moderator_comment,omitempty"`
	// Context holds the value of the "context" field.
	Context string `json:"context,omitempty"`
	// ReferenceID holds the value of the "reference_id" field.
	ReferenceID string `json:"reference_id,omitempty"`
	// RequestorID holds the value of the "requestor_id" field.
	RequestorID string `json:"requestor_id,omitempty"`
	// ActionReason holds the value of the "action_reason" field.
	ActionReason string `json:"action_reason,omitempty"`
	// ActionStatus holds the value of the "action_status" field.
	ActionStatus models.ModerationStatus `json:"action_status,omitempty"`
	// Data holds the value of the "data" field.
	Data map[string]interface{} `json:"data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModerationRequestQuery when eager-loading is set.
	Edges        ModerationRequestEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ModerationRequestEdges holds the relations/edges for other nodes in the graph.
type ModerationRequestEdges struct {
	// Moderator holds the value of the moderator edge.
	Moderator *User `json:"moderator,omitempty"`
	// Requestor holds the value of the requestor edge.
	Requestor *User `json:"requestor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ModeratorOrErr returns the Moderator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModerationRequestEdges) ModeratorOrErr() (*User, error) {
	if e.Moderator != nil {
		return e.Moderator, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "moderator"}
}

// RequestorOrErr returns the Requestor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModerationRequestEdges) RequestorOrErr() (*User, error) {
	if e.Requestor != nil {
		return e.Requestor, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "requestor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ModerationRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case moderationrequest.FieldData:
			values[i] = new([]byte)
		case moderationrequest.FieldID, moderationrequest.FieldModeratorID, moderationrequest.FieldModeratorComment, moderationrequest.FieldContext, moderationrequest.FieldReferenceID, moderationrequest.FieldRequestorID, moderationrequest.FieldActionReason, moderationrequest.FieldActionStatus:
			values[i] = new(sql.NullString)
		case moderationrequest.FieldCreatedAt, moderationrequest.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ModerationRequest fields.
func (mr *ModerationRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case moderationrequest.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				mr.ID = value.String
			}
		case moderationrequest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mr.CreatedAt = value.Time
			}
		case moderationrequest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mr.UpdatedAt = value.Time
			}
		case moderationrequest.FieldModeratorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field moderator_id", values[i])
			} else if value.Valid {
				mr.ModeratorID = new(string)
				*mr.ModeratorID = value.String
			}
		case moderationrequest.FieldModeratorComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field moderator_comment", values[i])
			} else if value.Valid {
				mr.ModeratorComment = value.String
			}
		case moderationrequest.FieldContext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field context", values[i])
			} else if value.Valid {
				mr.Context = value.String
			}
		case moderationrequest.FieldReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_id", values[i])
			} else if value.Valid {
				mr.ReferenceID = value.String
			}
		case moderationrequest.FieldRequestorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field requestor_id", values[i])
			} else if value.Valid {
				mr.RequestorID = value.String
			}
		case moderationrequest.FieldActionReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_reason", values[i])
			} else if value.Valid {
				mr.ActionReason = value.String
			}
		case moderationrequest.FieldActionStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_status", values[i])
			} else if value.Valid {
				mr.ActionStatus = models.ModerationStatus(value.String)
			}
		case moderationrequest.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &mr.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		default:
			mr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ModerationRequest.
// This includes values selected through modifiers, order, etc.
func (mr *ModerationRequest) Value(name string) (ent.Value, error) {
	return mr.selectValues.Get(name)
}

// QueryModerator queries the "moderator" edge of the ModerationRequest entity.
func (mr *ModerationRequest) QueryModerator() *UserQuery {
	return NewModerationRequestClient(mr.config).QueryModerator(mr)
}

// QueryRequestor queries the "requestor" edge of the ModerationRequest entity.
func (mr *ModerationRequest) QueryRequestor() *UserQuery {
	return NewModerationRequestClient(mr.config).QueryRequestor(mr)
}

// Update returns a builder for updating this ModerationRequest.
// Note that you need to call ModerationRequest.Unwrap() before calling this method if this ModerationRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (mr *ModerationRequest) Update() *ModerationRequestUpdateOne {
	return NewModerationRequestClient(mr.config).UpdateOne(mr)
}

// Unwrap unwraps the ModerationRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mr *ModerationRequest) Unwrap() *ModerationRequest {
	_tx, ok := mr.config.driver.(*txDriver)
	if !ok {
		panic("db: ModerationRequest is not a transactional entity")
	}
	mr.config.driver = _tx.drv
	return mr
}

// String implements the fmt.Stringer.
func (mr *ModerationRequest) String() string {
	var builder strings.Builder
	builder.WriteString("ModerationRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(mr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := mr.ModeratorID; v != nil {
		builder.WriteString("moderator_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("moderator_comment=")
	builder.WriteString(mr.ModeratorComment)
	builder.WriteString(", ")
	builder.WriteString("context=")
	builder.WriteString(mr.Context)
	builder.WriteString(", ")
	builder.WriteString("reference_id=")
	builder.WriteString(mr.ReferenceID)
	builder.WriteString(", ")
	builder.WriteString("requestor_id=")
	builder.WriteString(mr.RequestorID)
	builder.WriteString(", ")
	builder.WriteString("action_reason=")
	builder.WriteString(mr.ActionReason)
	builder.WriteString(", ")
	builder.WriteString("action_status=")
	builder.WriteString(fmt.Sprintf("%v", mr.ActionStatus))
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", mr.Data))
	builder.WriteByte(')')
	return builder.String()
}

// ModerationRequests is a parsable slice of ModerationRequest.
type ModerationRequests []*ModerationRequest
