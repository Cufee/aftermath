// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/crontask"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"github.com/cufee/aftermath/internal/database/models"
)

// CronTaskUpdate is the builder for updating CronTask entities.
type CronTaskUpdate struct {
	config
	hooks    []Hook
	mutation *CronTaskMutation
}

// Where appends a list predicates to the CronTaskUpdate builder.
func (ctu *CronTaskUpdate) Where(ps ...predicate.CronTask) *CronTaskUpdate {
	ctu.mutation.Where(ps...)
	return ctu
}

// SetUpdatedAt sets the "updated_at" field.
func (ctu *CronTaskUpdate) SetUpdatedAt(i int64) *CronTaskUpdate {
	ctu.mutation.ResetUpdatedAt()
	ctu.mutation.SetUpdatedAt(i)
	return ctu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ctu *CronTaskUpdate) AddUpdatedAt(i int64) *CronTaskUpdate {
	ctu.mutation.AddUpdatedAt(i)
	return ctu
}

// SetType sets the "type" field.
func (ctu *CronTaskUpdate) SetType(mt models.TaskType) *CronTaskUpdate {
	ctu.mutation.SetType(mt)
	return ctu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ctu *CronTaskUpdate) SetNillableType(mt *models.TaskType) *CronTaskUpdate {
	if mt != nil {
		ctu.SetType(*mt)
	}
	return ctu
}

// SetReferenceID sets the "reference_id" field.
func (ctu *CronTaskUpdate) SetReferenceID(s string) *CronTaskUpdate {
	ctu.mutation.SetReferenceID(s)
	return ctu
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (ctu *CronTaskUpdate) SetNillableReferenceID(s *string) *CronTaskUpdate {
	if s != nil {
		ctu.SetReferenceID(*s)
	}
	return ctu
}

// SetTargets sets the "targets" field.
func (ctu *CronTaskUpdate) SetTargets(s []string) *CronTaskUpdate {
	ctu.mutation.SetTargets(s)
	return ctu
}

// AppendTargets appends s to the "targets" field.
func (ctu *CronTaskUpdate) AppendTargets(s []string) *CronTaskUpdate {
	ctu.mutation.AppendTargets(s)
	return ctu
}

// SetStatus sets the "status" field.
func (ctu *CronTaskUpdate) SetStatus(ms models.TaskStatus) *CronTaskUpdate {
	ctu.mutation.SetStatus(ms)
	return ctu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ctu *CronTaskUpdate) SetNillableStatus(ms *models.TaskStatus) *CronTaskUpdate {
	if ms != nil {
		ctu.SetStatus(*ms)
	}
	return ctu
}

// SetScheduledAfter sets the "scheduled_after" field.
func (ctu *CronTaskUpdate) SetScheduledAfter(i int64) *CronTaskUpdate {
	ctu.mutation.ResetScheduledAfter()
	ctu.mutation.SetScheduledAfter(i)
	return ctu
}

// SetNillableScheduledAfter sets the "scheduled_after" field if the given value is not nil.
func (ctu *CronTaskUpdate) SetNillableScheduledAfter(i *int64) *CronTaskUpdate {
	if i != nil {
		ctu.SetScheduledAfter(*i)
	}
	return ctu
}

// AddScheduledAfter adds i to the "scheduled_after" field.
func (ctu *CronTaskUpdate) AddScheduledAfter(i int64) *CronTaskUpdate {
	ctu.mutation.AddScheduledAfter(i)
	return ctu
}

// SetLastRun sets the "last_run" field.
func (ctu *CronTaskUpdate) SetLastRun(i int64) *CronTaskUpdate {
	ctu.mutation.ResetLastRun()
	ctu.mutation.SetLastRun(i)
	return ctu
}

// SetNillableLastRun sets the "last_run" field if the given value is not nil.
func (ctu *CronTaskUpdate) SetNillableLastRun(i *int64) *CronTaskUpdate {
	if i != nil {
		ctu.SetLastRun(*i)
	}
	return ctu
}

// AddLastRun adds i to the "last_run" field.
func (ctu *CronTaskUpdate) AddLastRun(i int64) *CronTaskUpdate {
	ctu.mutation.AddLastRun(i)
	return ctu
}

// SetLogs sets the "logs" field.
func (ctu *CronTaskUpdate) SetLogs(ml []models.TaskLog) *CronTaskUpdate {
	ctu.mutation.SetLogs(ml)
	return ctu
}

// AppendLogs appends ml to the "logs" field.
func (ctu *CronTaskUpdate) AppendLogs(ml []models.TaskLog) *CronTaskUpdate {
	ctu.mutation.AppendLogs(ml)
	return ctu
}

// SetData sets the "data" field.
func (ctu *CronTaskUpdate) SetData(m map[string]interface{}) *CronTaskUpdate {
	ctu.mutation.SetData(m)
	return ctu
}

// Mutation returns the CronTaskMutation object of the builder.
func (ctu *CronTaskUpdate) Mutation() *CronTaskMutation {
	return ctu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *CronTaskUpdate) Save(ctx context.Context) (int, error) {
	ctu.defaults()
	return withHooks(ctx, ctu.sqlSave, ctu.mutation, ctu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *CronTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *CronTaskUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *CronTaskUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctu *CronTaskUpdate) defaults() {
	if _, ok := ctu.mutation.UpdatedAt(); !ok {
		v := crontask.UpdateDefaultUpdatedAt()
		ctu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctu *CronTaskUpdate) check() error {
	if v, ok := ctu.mutation.GetType(); ok {
		if err := crontask.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "CronTask.type": %w`, err)}
		}
	}
	if v, ok := ctu.mutation.ReferenceID(); ok {
		if err := crontask.ReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "reference_id", err: fmt.Errorf(`db: validator failed for field "CronTask.reference_id": %w`, err)}
		}
	}
	if v, ok := ctu.mutation.Status(); ok {
		if err := crontask.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "CronTask.status": %w`, err)}
		}
	}
	return nil
}

func (ctu *CronTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ctu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(crontask.Table, crontask.Columns, sqlgraph.NewFieldSpec(crontask.FieldID, field.TypeString))
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.UpdatedAt(); ok {
		_spec.SetField(crontask.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ctu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(crontask.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ctu.mutation.GetType(); ok {
		_spec.SetField(crontask.FieldType, field.TypeEnum, value)
	}
	if value, ok := ctu.mutation.ReferenceID(); ok {
		_spec.SetField(crontask.FieldReferenceID, field.TypeString, value)
	}
	if value, ok := ctu.mutation.Targets(); ok {
		_spec.SetField(crontask.FieldTargets, field.TypeJSON, value)
	}
	if value, ok := ctu.mutation.AppendedTargets(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, crontask.FieldTargets, value)
		})
	}
	if value, ok := ctu.mutation.Status(); ok {
		_spec.SetField(crontask.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ctu.mutation.ScheduledAfter(); ok {
		_spec.SetField(crontask.FieldScheduledAfter, field.TypeInt64, value)
	}
	if value, ok := ctu.mutation.AddedScheduledAfter(); ok {
		_spec.AddField(crontask.FieldScheduledAfter, field.TypeInt64, value)
	}
	if value, ok := ctu.mutation.LastRun(); ok {
		_spec.SetField(crontask.FieldLastRun, field.TypeInt64, value)
	}
	if value, ok := ctu.mutation.AddedLastRun(); ok {
		_spec.AddField(crontask.FieldLastRun, field.TypeInt64, value)
	}
	if value, ok := ctu.mutation.Logs(); ok {
		_spec.SetField(crontask.FieldLogs, field.TypeJSON, value)
	}
	if value, ok := ctu.mutation.AppendedLogs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, crontask.FieldLogs, value)
		})
	}
	if value, ok := ctu.mutation.Data(); ok {
		_spec.SetField(crontask.FieldData, field.TypeJSON, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{crontask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ctu.mutation.done = true
	return n, nil
}

// CronTaskUpdateOne is the builder for updating a single CronTask entity.
type CronTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CronTaskMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ctuo *CronTaskUpdateOne) SetUpdatedAt(i int64) *CronTaskUpdateOne {
	ctuo.mutation.ResetUpdatedAt()
	ctuo.mutation.SetUpdatedAt(i)
	return ctuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ctuo *CronTaskUpdateOne) AddUpdatedAt(i int64) *CronTaskUpdateOne {
	ctuo.mutation.AddUpdatedAt(i)
	return ctuo
}

// SetType sets the "type" field.
func (ctuo *CronTaskUpdateOne) SetType(mt models.TaskType) *CronTaskUpdateOne {
	ctuo.mutation.SetType(mt)
	return ctuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ctuo *CronTaskUpdateOne) SetNillableType(mt *models.TaskType) *CronTaskUpdateOne {
	if mt != nil {
		ctuo.SetType(*mt)
	}
	return ctuo
}

// SetReferenceID sets the "reference_id" field.
func (ctuo *CronTaskUpdateOne) SetReferenceID(s string) *CronTaskUpdateOne {
	ctuo.mutation.SetReferenceID(s)
	return ctuo
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (ctuo *CronTaskUpdateOne) SetNillableReferenceID(s *string) *CronTaskUpdateOne {
	if s != nil {
		ctuo.SetReferenceID(*s)
	}
	return ctuo
}

// SetTargets sets the "targets" field.
func (ctuo *CronTaskUpdateOne) SetTargets(s []string) *CronTaskUpdateOne {
	ctuo.mutation.SetTargets(s)
	return ctuo
}

// AppendTargets appends s to the "targets" field.
func (ctuo *CronTaskUpdateOne) AppendTargets(s []string) *CronTaskUpdateOne {
	ctuo.mutation.AppendTargets(s)
	return ctuo
}

// SetStatus sets the "status" field.
func (ctuo *CronTaskUpdateOne) SetStatus(ms models.TaskStatus) *CronTaskUpdateOne {
	ctuo.mutation.SetStatus(ms)
	return ctuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ctuo *CronTaskUpdateOne) SetNillableStatus(ms *models.TaskStatus) *CronTaskUpdateOne {
	if ms != nil {
		ctuo.SetStatus(*ms)
	}
	return ctuo
}

// SetScheduledAfter sets the "scheduled_after" field.
func (ctuo *CronTaskUpdateOne) SetScheduledAfter(i int64) *CronTaskUpdateOne {
	ctuo.mutation.ResetScheduledAfter()
	ctuo.mutation.SetScheduledAfter(i)
	return ctuo
}

// SetNillableScheduledAfter sets the "scheduled_after" field if the given value is not nil.
func (ctuo *CronTaskUpdateOne) SetNillableScheduledAfter(i *int64) *CronTaskUpdateOne {
	if i != nil {
		ctuo.SetScheduledAfter(*i)
	}
	return ctuo
}

// AddScheduledAfter adds i to the "scheduled_after" field.
func (ctuo *CronTaskUpdateOne) AddScheduledAfter(i int64) *CronTaskUpdateOne {
	ctuo.mutation.AddScheduledAfter(i)
	return ctuo
}

// SetLastRun sets the "last_run" field.
func (ctuo *CronTaskUpdateOne) SetLastRun(i int64) *CronTaskUpdateOne {
	ctuo.mutation.ResetLastRun()
	ctuo.mutation.SetLastRun(i)
	return ctuo
}

// SetNillableLastRun sets the "last_run" field if the given value is not nil.
func (ctuo *CronTaskUpdateOne) SetNillableLastRun(i *int64) *CronTaskUpdateOne {
	if i != nil {
		ctuo.SetLastRun(*i)
	}
	return ctuo
}

// AddLastRun adds i to the "last_run" field.
func (ctuo *CronTaskUpdateOne) AddLastRun(i int64) *CronTaskUpdateOne {
	ctuo.mutation.AddLastRun(i)
	return ctuo
}

// SetLogs sets the "logs" field.
func (ctuo *CronTaskUpdateOne) SetLogs(ml []models.TaskLog) *CronTaskUpdateOne {
	ctuo.mutation.SetLogs(ml)
	return ctuo
}

// AppendLogs appends ml to the "logs" field.
func (ctuo *CronTaskUpdateOne) AppendLogs(ml []models.TaskLog) *CronTaskUpdateOne {
	ctuo.mutation.AppendLogs(ml)
	return ctuo
}

// SetData sets the "data" field.
func (ctuo *CronTaskUpdateOne) SetData(m map[string]interface{}) *CronTaskUpdateOne {
	ctuo.mutation.SetData(m)
	return ctuo
}

// Mutation returns the CronTaskMutation object of the builder.
func (ctuo *CronTaskUpdateOne) Mutation() *CronTaskMutation {
	return ctuo.mutation
}

// Where appends a list predicates to the CronTaskUpdate builder.
func (ctuo *CronTaskUpdateOne) Where(ps ...predicate.CronTask) *CronTaskUpdateOne {
	ctuo.mutation.Where(ps...)
	return ctuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *CronTaskUpdateOne) Select(field string, fields ...string) *CronTaskUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated CronTask entity.
func (ctuo *CronTaskUpdateOne) Save(ctx context.Context) (*CronTask, error) {
	ctuo.defaults()
	return withHooks(ctx, ctuo.sqlSave, ctuo.mutation, ctuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *CronTaskUpdateOne) SaveX(ctx context.Context) *CronTask {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *CronTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *CronTaskUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctuo *CronTaskUpdateOne) defaults() {
	if _, ok := ctuo.mutation.UpdatedAt(); !ok {
		v := crontask.UpdateDefaultUpdatedAt()
		ctuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctuo *CronTaskUpdateOne) check() error {
	if v, ok := ctuo.mutation.GetType(); ok {
		if err := crontask.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "CronTask.type": %w`, err)}
		}
	}
	if v, ok := ctuo.mutation.ReferenceID(); ok {
		if err := crontask.ReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "reference_id", err: fmt.Errorf(`db: validator failed for field "CronTask.reference_id": %w`, err)}
		}
	}
	if v, ok := ctuo.mutation.Status(); ok {
		if err := crontask.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "CronTask.status": %w`, err)}
		}
	}
	return nil
}

func (ctuo *CronTaskUpdateOne) sqlSave(ctx context.Context) (_node *CronTask, err error) {
	if err := ctuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(crontask.Table, crontask.Columns, sqlgraph.NewFieldSpec(crontask.FieldID, field.TypeString))
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "CronTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, crontask.FieldID)
		for _, f := range fields {
			if !crontask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != crontask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.UpdatedAt(); ok {
		_spec.SetField(crontask.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ctuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(crontask.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ctuo.mutation.GetType(); ok {
		_spec.SetField(crontask.FieldType, field.TypeEnum, value)
	}
	if value, ok := ctuo.mutation.ReferenceID(); ok {
		_spec.SetField(crontask.FieldReferenceID, field.TypeString, value)
	}
	if value, ok := ctuo.mutation.Targets(); ok {
		_spec.SetField(crontask.FieldTargets, field.TypeJSON, value)
	}
	if value, ok := ctuo.mutation.AppendedTargets(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, crontask.FieldTargets, value)
		})
	}
	if value, ok := ctuo.mutation.Status(); ok {
		_spec.SetField(crontask.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ctuo.mutation.ScheduledAfter(); ok {
		_spec.SetField(crontask.FieldScheduledAfter, field.TypeInt64, value)
	}
	if value, ok := ctuo.mutation.AddedScheduledAfter(); ok {
		_spec.AddField(crontask.FieldScheduledAfter, field.TypeInt64, value)
	}
	if value, ok := ctuo.mutation.LastRun(); ok {
		_spec.SetField(crontask.FieldLastRun, field.TypeInt64, value)
	}
	if value, ok := ctuo.mutation.AddedLastRun(); ok {
		_spec.AddField(crontask.FieldLastRun, field.TypeInt64, value)
	}
	if value, ok := ctuo.mutation.Logs(); ok {
		_spec.SetField(crontask.FieldLogs, field.TypeJSON, value)
	}
	if value, ok := ctuo.mutation.AppendedLogs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, crontask.FieldLogs, value)
		})
	}
	if value, ok := ctuo.mutation.Data(); ok {
		_spec.SetField(crontask.FieldData, field.TypeJSON, value)
	}
	_node = &CronTask{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{crontask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ctuo.mutation.done = true
	return _node, nil
}
