// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cufee/aftermath/internal/database/ent/db/authnonce"
)

// AuthNonce is the model entity for the AuthNonce schema.
type AuthNonce struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Identifier holds the value of the "identifier" field.
	Identifier string `json:"identifier,omitempty"`
	// PublicID holds the value of the "public_id" field.
	PublicID string `json:"public_id,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata     map[string]string `json:"metadata,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthNonce) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authnonce.FieldMetadata:
			values[i] = new([]byte)
		case authnonce.FieldActive:
			values[i] = new(sql.NullBool)
		case authnonce.FieldID, authnonce.FieldIdentifier, authnonce.FieldPublicID:
			values[i] = new(sql.NullString)
		case authnonce.FieldCreatedAt, authnonce.FieldUpdatedAt, authnonce.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthNonce fields.
func (an *AuthNonce) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authnonce.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				an.ID = value.String
			}
		case authnonce.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				an.CreatedAt = value.Time
			}
		case authnonce.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				an.UpdatedAt = value.Time
			}
		case authnonce.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				an.Active = value.Bool
			}
		case authnonce.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				an.ExpiresAt = value.Time
			}
		case authnonce.FieldIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field identifier", values[i])
			} else if value.Valid {
				an.Identifier = value.String
			}
		case authnonce.FieldPublicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field public_id", values[i])
			} else if value.Valid {
				an.PublicID = value.String
			}
		case authnonce.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &an.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			an.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthNonce.
// This includes values selected through modifiers, order, etc.
func (an *AuthNonce) Value(name string) (ent.Value, error) {
	return an.selectValues.Get(name)
}

// Update returns a builder for updating this AuthNonce.
// Note that you need to call AuthNonce.Unwrap() before calling this method if this AuthNonce
// was returned from a transaction, and the transaction was committed or rolled back.
func (an *AuthNonce) Update() *AuthNonceUpdateOne {
	return NewAuthNonceClient(an.config).UpdateOne(an)
}

// Unwrap unwraps the AuthNonce entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (an *AuthNonce) Unwrap() *AuthNonce {
	_tx, ok := an.config.driver.(*txDriver)
	if !ok {
		panic("db: AuthNonce is not a transactional entity")
	}
	an.config.driver = _tx.drv
	return an
}

// String implements the fmt.Stringer.
func (an *AuthNonce) String() string {
	var builder strings.Builder
	builder.WriteString("AuthNonce(")
	builder.WriteString(fmt.Sprintf("id=%v, ", an.ID))
	builder.WriteString("created_at=")
	builder.WriteString(an.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(an.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", an.Active))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(an.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("identifier=")
	builder.WriteString(an.Identifier)
	builder.WriteString(", ")
	builder.WriteString("public_id=")
	builder.WriteString(an.PublicID)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", an.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// AuthNonces is a parsable slice of AuthNonce.
type AuthNonces []*AuthNonce
