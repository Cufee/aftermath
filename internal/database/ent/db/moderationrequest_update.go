// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/moderationrequest"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"github.com/cufee/aftermath/internal/database/ent/db/user"
	"github.com/cufee/aftermath/internal/database/models"
)

// ModerationRequestUpdate is the builder for updating ModerationRequest entities.
type ModerationRequestUpdate struct {
	config
	hooks     []Hook
	mutation  *ModerationRequestMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ModerationRequestUpdate builder.
func (mru *ModerationRequestUpdate) Where(ps ...predicate.ModerationRequest) *ModerationRequestUpdate {
	mru.mutation.Where(ps...)
	return mru
}

// SetUpdatedAt sets the "updated_at" field.
func (mru *ModerationRequestUpdate) SetUpdatedAt(t time.Time) *ModerationRequestUpdate {
	mru.mutation.SetUpdatedAt(t)
	return mru
}

// SetModeratorID sets the "moderator_id" field.
func (mru *ModerationRequestUpdate) SetModeratorID(s string) *ModerationRequestUpdate {
	mru.mutation.SetModeratorID(s)
	return mru
}

// SetNillableModeratorID sets the "moderator_id" field if the given value is not nil.
func (mru *ModerationRequestUpdate) SetNillableModeratorID(s *string) *ModerationRequestUpdate {
	if s != nil {
		mru.SetModeratorID(*s)
	}
	return mru
}

// ClearModeratorID clears the value of the "moderator_id" field.
func (mru *ModerationRequestUpdate) ClearModeratorID() *ModerationRequestUpdate {
	mru.mutation.ClearModeratorID()
	return mru
}

// SetModeratorComment sets the "moderator_comment" field.
func (mru *ModerationRequestUpdate) SetModeratorComment(s string) *ModerationRequestUpdate {
	mru.mutation.SetModeratorComment(s)
	return mru
}

// SetNillableModeratorComment sets the "moderator_comment" field if the given value is not nil.
func (mru *ModerationRequestUpdate) SetNillableModeratorComment(s *string) *ModerationRequestUpdate {
	if s != nil {
		mru.SetModeratorComment(*s)
	}
	return mru
}

// ClearModeratorComment clears the value of the "moderator_comment" field.
func (mru *ModerationRequestUpdate) ClearModeratorComment() *ModerationRequestUpdate {
	mru.mutation.ClearModeratorComment()
	return mru
}

// SetContext sets the "context" field.
func (mru *ModerationRequestUpdate) SetContext(s string) *ModerationRequestUpdate {
	mru.mutation.SetContext(s)
	return mru
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (mru *ModerationRequestUpdate) SetNillableContext(s *string) *ModerationRequestUpdate {
	if s != nil {
		mru.SetContext(*s)
	}
	return mru
}

// ClearContext clears the value of the "context" field.
func (mru *ModerationRequestUpdate) ClearContext() *ModerationRequestUpdate {
	mru.mutation.ClearContext()
	return mru
}

// SetReferenceID sets the "reference_id" field.
func (mru *ModerationRequestUpdate) SetReferenceID(s string) *ModerationRequestUpdate {
	mru.mutation.SetReferenceID(s)
	return mru
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (mru *ModerationRequestUpdate) SetNillableReferenceID(s *string) *ModerationRequestUpdate {
	if s != nil {
		mru.SetReferenceID(*s)
	}
	return mru
}

// SetActionReason sets the "action_reason" field.
func (mru *ModerationRequestUpdate) SetActionReason(s string) *ModerationRequestUpdate {
	mru.mutation.SetActionReason(s)
	return mru
}

// SetNillableActionReason sets the "action_reason" field if the given value is not nil.
func (mru *ModerationRequestUpdate) SetNillableActionReason(s *string) *ModerationRequestUpdate {
	if s != nil {
		mru.SetActionReason(*s)
	}
	return mru
}

// ClearActionReason clears the value of the "action_reason" field.
func (mru *ModerationRequestUpdate) ClearActionReason() *ModerationRequestUpdate {
	mru.mutation.ClearActionReason()
	return mru
}

// SetActionStatus sets the "action_status" field.
func (mru *ModerationRequestUpdate) SetActionStatus(ms models.ModerationStatus) *ModerationRequestUpdate {
	mru.mutation.SetActionStatus(ms)
	return mru
}

// SetNillableActionStatus sets the "action_status" field if the given value is not nil.
func (mru *ModerationRequestUpdate) SetNillableActionStatus(ms *models.ModerationStatus) *ModerationRequestUpdate {
	if ms != nil {
		mru.SetActionStatus(*ms)
	}
	return mru
}

// SetData sets the "data" field.
func (mru *ModerationRequestUpdate) SetData(m map[string]interface{}) *ModerationRequestUpdate {
	mru.mutation.SetData(m)
	return mru
}

// SetModerator sets the "moderator" edge to the User entity.
func (mru *ModerationRequestUpdate) SetModerator(u *User) *ModerationRequestUpdate {
	return mru.SetModeratorID(u.ID)
}

// Mutation returns the ModerationRequestMutation object of the builder.
func (mru *ModerationRequestUpdate) Mutation() *ModerationRequestMutation {
	return mru.mutation
}

// ClearModerator clears the "moderator" edge to the User entity.
func (mru *ModerationRequestUpdate) ClearModerator() *ModerationRequestUpdate {
	mru.mutation.ClearModerator()
	return mru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mru *ModerationRequestUpdate) Save(ctx context.Context) (int, error) {
	mru.defaults()
	return withHooks(ctx, mru.sqlSave, mru.mutation, mru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mru *ModerationRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := mru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mru *ModerationRequestUpdate) Exec(ctx context.Context) error {
	_, err := mru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mru *ModerationRequestUpdate) ExecX(ctx context.Context) {
	if err := mru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mru *ModerationRequestUpdate) defaults() {
	if _, ok := mru.mutation.UpdatedAt(); !ok {
		v := moderationrequest.UpdateDefaultUpdatedAt()
		mru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mru *ModerationRequestUpdate) check() error {
	if v, ok := mru.mutation.ReferenceID(); ok {
		if err := moderationrequest.ReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "reference_id", err: fmt.Errorf(`db: validator failed for field "ModerationRequest.reference_id": %w`, err)}
		}
	}
	if v, ok := mru.mutation.ActionStatus(); ok {
		if err := moderationrequest.ActionStatusValidator(v); err != nil {
			return &ValidationError{Name: "action_status", err: fmt.Errorf(`db: validator failed for field "ModerationRequest.action_status": %w`, err)}
		}
	}
	if _, ok := mru.mutation.RequestorID(); mru.mutation.RequestorCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "ModerationRequest.requestor"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mru *ModerationRequestUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ModerationRequestUpdate {
	mru.modifiers = append(mru.modifiers, modifiers...)
	return mru
}

func (mru *ModerationRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(moderationrequest.Table, moderationrequest.Columns, sqlgraph.NewFieldSpec(moderationrequest.FieldID, field.TypeString))
	if ps := mru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mru.mutation.UpdatedAt(); ok {
		_spec.SetField(moderationrequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mru.mutation.ModeratorComment(); ok {
		_spec.SetField(moderationrequest.FieldModeratorComment, field.TypeString, value)
	}
	if mru.mutation.ModeratorCommentCleared() {
		_spec.ClearField(moderationrequest.FieldModeratorComment, field.TypeString)
	}
	if value, ok := mru.mutation.Context(); ok {
		_spec.SetField(moderationrequest.FieldContext, field.TypeString, value)
	}
	if mru.mutation.ContextCleared() {
		_spec.ClearField(moderationrequest.FieldContext, field.TypeString)
	}
	if value, ok := mru.mutation.ReferenceID(); ok {
		_spec.SetField(moderationrequest.FieldReferenceID, field.TypeString, value)
	}
	if value, ok := mru.mutation.ActionReason(); ok {
		_spec.SetField(moderationrequest.FieldActionReason, field.TypeString, value)
	}
	if mru.mutation.ActionReasonCleared() {
		_spec.ClearField(moderationrequest.FieldActionReason, field.TypeString)
	}
	if value, ok := mru.mutation.ActionStatus(); ok {
		_spec.SetField(moderationrequest.FieldActionStatus, field.TypeEnum, value)
	}
	if value, ok := mru.mutation.Data(); ok {
		_spec.SetField(moderationrequest.FieldData, field.TypeJSON, value)
	}
	if mru.mutation.ModeratorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moderationrequest.ModeratorTable,
			Columns: []string{moderationrequest.ModeratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mru.mutation.ModeratorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moderationrequest.ModeratorTable,
			Columns: []string{moderationrequest.ModeratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moderationrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mru.mutation.done = true
	return n, nil
}

// ModerationRequestUpdateOne is the builder for updating a single ModerationRequest entity.
type ModerationRequestUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ModerationRequestMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (mruo *ModerationRequestUpdateOne) SetUpdatedAt(t time.Time) *ModerationRequestUpdateOne {
	mruo.mutation.SetUpdatedAt(t)
	return mruo
}

// SetModeratorID sets the "moderator_id" field.
func (mruo *ModerationRequestUpdateOne) SetModeratorID(s string) *ModerationRequestUpdateOne {
	mruo.mutation.SetModeratorID(s)
	return mruo
}

// SetNillableModeratorID sets the "moderator_id" field if the given value is not nil.
func (mruo *ModerationRequestUpdateOne) SetNillableModeratorID(s *string) *ModerationRequestUpdateOne {
	if s != nil {
		mruo.SetModeratorID(*s)
	}
	return mruo
}

// ClearModeratorID clears the value of the "moderator_id" field.
func (mruo *ModerationRequestUpdateOne) ClearModeratorID() *ModerationRequestUpdateOne {
	mruo.mutation.ClearModeratorID()
	return mruo
}

// SetModeratorComment sets the "moderator_comment" field.
func (mruo *ModerationRequestUpdateOne) SetModeratorComment(s string) *ModerationRequestUpdateOne {
	mruo.mutation.SetModeratorComment(s)
	return mruo
}

// SetNillableModeratorComment sets the "moderator_comment" field if the given value is not nil.
func (mruo *ModerationRequestUpdateOne) SetNillableModeratorComment(s *string) *ModerationRequestUpdateOne {
	if s != nil {
		mruo.SetModeratorComment(*s)
	}
	return mruo
}

// ClearModeratorComment clears the value of the "moderator_comment" field.
func (mruo *ModerationRequestUpdateOne) ClearModeratorComment() *ModerationRequestUpdateOne {
	mruo.mutation.ClearModeratorComment()
	return mruo
}

// SetContext sets the "context" field.
func (mruo *ModerationRequestUpdateOne) SetContext(s string) *ModerationRequestUpdateOne {
	mruo.mutation.SetContext(s)
	return mruo
}

// SetNillableContext sets the "context" field if the given value is not nil.
func (mruo *ModerationRequestUpdateOne) SetNillableContext(s *string) *ModerationRequestUpdateOne {
	if s != nil {
		mruo.SetContext(*s)
	}
	return mruo
}

// ClearContext clears the value of the "context" field.
func (mruo *ModerationRequestUpdateOne) ClearContext() *ModerationRequestUpdateOne {
	mruo.mutation.ClearContext()
	return mruo
}

// SetReferenceID sets the "reference_id" field.
func (mruo *ModerationRequestUpdateOne) SetReferenceID(s string) *ModerationRequestUpdateOne {
	mruo.mutation.SetReferenceID(s)
	return mruo
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (mruo *ModerationRequestUpdateOne) SetNillableReferenceID(s *string) *ModerationRequestUpdateOne {
	if s != nil {
		mruo.SetReferenceID(*s)
	}
	return mruo
}

// SetActionReason sets the "action_reason" field.
func (mruo *ModerationRequestUpdateOne) SetActionReason(s string) *ModerationRequestUpdateOne {
	mruo.mutation.SetActionReason(s)
	return mruo
}

// SetNillableActionReason sets the "action_reason" field if the given value is not nil.
func (mruo *ModerationRequestUpdateOne) SetNillableActionReason(s *string) *ModerationRequestUpdateOne {
	if s != nil {
		mruo.SetActionReason(*s)
	}
	return mruo
}

// ClearActionReason clears the value of the "action_reason" field.
func (mruo *ModerationRequestUpdateOne) ClearActionReason() *ModerationRequestUpdateOne {
	mruo.mutation.ClearActionReason()
	return mruo
}

// SetActionStatus sets the "action_status" field.
func (mruo *ModerationRequestUpdateOne) SetActionStatus(ms models.ModerationStatus) *ModerationRequestUpdateOne {
	mruo.mutation.SetActionStatus(ms)
	return mruo
}

// SetNillableActionStatus sets the "action_status" field if the given value is not nil.
func (mruo *ModerationRequestUpdateOne) SetNillableActionStatus(ms *models.ModerationStatus) *ModerationRequestUpdateOne {
	if ms != nil {
		mruo.SetActionStatus(*ms)
	}
	return mruo
}

// SetData sets the "data" field.
func (mruo *ModerationRequestUpdateOne) SetData(m map[string]interface{}) *ModerationRequestUpdateOne {
	mruo.mutation.SetData(m)
	return mruo
}

// SetModerator sets the "moderator" edge to the User entity.
func (mruo *ModerationRequestUpdateOne) SetModerator(u *User) *ModerationRequestUpdateOne {
	return mruo.SetModeratorID(u.ID)
}

// Mutation returns the ModerationRequestMutation object of the builder.
func (mruo *ModerationRequestUpdateOne) Mutation() *ModerationRequestMutation {
	return mruo.mutation
}

// ClearModerator clears the "moderator" edge to the User entity.
func (mruo *ModerationRequestUpdateOne) ClearModerator() *ModerationRequestUpdateOne {
	mruo.mutation.ClearModerator()
	return mruo
}

// Where appends a list predicates to the ModerationRequestUpdate builder.
func (mruo *ModerationRequestUpdateOne) Where(ps ...predicate.ModerationRequest) *ModerationRequestUpdateOne {
	mruo.mutation.Where(ps...)
	return mruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mruo *ModerationRequestUpdateOne) Select(field string, fields ...string) *ModerationRequestUpdateOne {
	mruo.fields = append([]string{field}, fields...)
	return mruo
}

// Save executes the query and returns the updated ModerationRequest entity.
func (mruo *ModerationRequestUpdateOne) Save(ctx context.Context) (*ModerationRequest, error) {
	mruo.defaults()
	return withHooks(ctx, mruo.sqlSave, mruo.mutation, mruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mruo *ModerationRequestUpdateOne) SaveX(ctx context.Context) *ModerationRequest {
	node, err := mruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mruo *ModerationRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := mruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mruo *ModerationRequestUpdateOne) ExecX(ctx context.Context) {
	if err := mruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mruo *ModerationRequestUpdateOne) defaults() {
	if _, ok := mruo.mutation.UpdatedAt(); !ok {
		v := moderationrequest.UpdateDefaultUpdatedAt()
		mruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mruo *ModerationRequestUpdateOne) check() error {
	if v, ok := mruo.mutation.ReferenceID(); ok {
		if err := moderationrequest.ReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "reference_id", err: fmt.Errorf(`db: validator failed for field "ModerationRequest.reference_id": %w`, err)}
		}
	}
	if v, ok := mruo.mutation.ActionStatus(); ok {
		if err := moderationrequest.ActionStatusValidator(v); err != nil {
			return &ValidationError{Name: "action_status", err: fmt.Errorf(`db: validator failed for field "ModerationRequest.action_status": %w`, err)}
		}
	}
	if _, ok := mruo.mutation.RequestorID(); mruo.mutation.RequestorCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "ModerationRequest.requestor"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mruo *ModerationRequestUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ModerationRequestUpdateOne {
	mruo.modifiers = append(mruo.modifiers, modifiers...)
	return mruo
}

func (mruo *ModerationRequestUpdateOne) sqlSave(ctx context.Context) (_node *ModerationRequest, err error) {
	if err := mruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(moderationrequest.Table, moderationrequest.Columns, sqlgraph.NewFieldSpec(moderationrequest.FieldID, field.TypeString))
	id, ok := mruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ModerationRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, moderationrequest.FieldID)
		for _, f := range fields {
			if !moderationrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != moderationrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mruo.mutation.UpdatedAt(); ok {
		_spec.SetField(moderationrequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mruo.mutation.ModeratorComment(); ok {
		_spec.SetField(moderationrequest.FieldModeratorComment, field.TypeString, value)
	}
	if mruo.mutation.ModeratorCommentCleared() {
		_spec.ClearField(moderationrequest.FieldModeratorComment, field.TypeString)
	}
	if value, ok := mruo.mutation.Context(); ok {
		_spec.SetField(moderationrequest.FieldContext, field.TypeString, value)
	}
	if mruo.mutation.ContextCleared() {
		_spec.ClearField(moderationrequest.FieldContext, field.TypeString)
	}
	if value, ok := mruo.mutation.ReferenceID(); ok {
		_spec.SetField(moderationrequest.FieldReferenceID, field.TypeString, value)
	}
	if value, ok := mruo.mutation.ActionReason(); ok {
		_spec.SetField(moderationrequest.FieldActionReason, field.TypeString, value)
	}
	if mruo.mutation.ActionReasonCleared() {
		_spec.ClearField(moderationrequest.FieldActionReason, field.TypeString)
	}
	if value, ok := mruo.mutation.ActionStatus(); ok {
		_spec.SetField(moderationrequest.FieldActionStatus, field.TypeEnum, value)
	}
	if value, ok := mruo.mutation.Data(); ok {
		_spec.SetField(moderationrequest.FieldData, field.TypeJSON, value)
	}
	if mruo.mutation.ModeratorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moderationrequest.ModeratorTable,
			Columns: []string{moderationrequest.ModeratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mruo.mutation.ModeratorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moderationrequest.ModeratorTable,
			Columns: []string{moderationrequest.ModeratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mruo.modifiers...)
	_node = &ModerationRequest{config: mruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moderationrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mruo.mutation.done = true
	return _node, nil
}
