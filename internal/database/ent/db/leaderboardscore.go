// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cufee/aftermath/internal/database/ent/db/leaderboardscore"
	"github.com/cufee/aftermath/internal/database/models"
)

// LeaderboardScore is the model entity for the LeaderboardScore schema.
type LeaderboardScore struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Type holds the value of the "type" field.
	Type models.ScoreType `json:"type,omitempty"`
	// Score holds the value of the "score" field.
	Score float32 `json:"score,omitempty"`
	// ReferenceID holds the value of the "reference_id" field.
	ReferenceID string `json:"reference_id,omitempty"`
	// LeaderboardID holds the value of the "leaderboard_id" field.
	LeaderboardID string `json:"leaderboard_id,omitempty"`
	// Meta holds the value of the "meta" field.
	Meta         map[string]interface{} `json:"meta,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LeaderboardScore) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case leaderboardscore.FieldMeta:
			values[i] = new([]byte)
		case leaderboardscore.FieldScore:
			values[i] = new(sql.NullFloat64)
		case leaderboardscore.FieldID, leaderboardscore.FieldType, leaderboardscore.FieldReferenceID, leaderboardscore.FieldLeaderboardID:
			values[i] = new(sql.NullString)
		case leaderboardscore.FieldCreatedAt, leaderboardscore.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LeaderboardScore fields.
func (ls *LeaderboardScore) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case leaderboardscore.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ls.ID = value.String
			}
		case leaderboardscore.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ls.CreatedAt = value.Time
			}
		case leaderboardscore.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ls.UpdatedAt = value.Time
			}
		case leaderboardscore.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ls.Type = models.ScoreType(value.String)
			}
		case leaderboardscore.FieldScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				ls.Score = float32(value.Float64)
			}
		case leaderboardscore.FieldReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_id", values[i])
			} else if value.Valid {
				ls.ReferenceID = value.String
			}
		case leaderboardscore.FieldLeaderboardID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field leaderboard_id", values[i])
			} else if value.Valid {
				ls.LeaderboardID = value.String
			}
		case leaderboardscore.FieldMeta:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ls.Meta); err != nil {
					return fmt.Errorf("unmarshal field meta: %w", err)
				}
			}
		default:
			ls.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LeaderboardScore.
// This includes values selected through modifiers, order, etc.
func (ls *LeaderboardScore) Value(name string) (ent.Value, error) {
	return ls.selectValues.Get(name)
}

// Update returns a builder for updating this LeaderboardScore.
// Note that you need to call LeaderboardScore.Unwrap() before calling this method if this LeaderboardScore
// was returned from a transaction, and the transaction was committed or rolled back.
func (ls *LeaderboardScore) Update() *LeaderboardScoreUpdateOne {
	return NewLeaderboardScoreClient(ls.config).UpdateOne(ls)
}

// Unwrap unwraps the LeaderboardScore entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ls *LeaderboardScore) Unwrap() *LeaderboardScore {
	_tx, ok := ls.config.driver.(*txDriver)
	if !ok {
		panic("db: LeaderboardScore is not a transactional entity")
	}
	ls.config.driver = _tx.drv
	return ls
}

// String implements the fmt.Stringer.
func (ls *LeaderboardScore) String() string {
	var builder strings.Builder
	builder.WriteString("LeaderboardScore(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ls.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ls.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ls.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ls.Type))
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", ls.Score))
	builder.WriteString(", ")
	builder.WriteString("reference_id=")
	builder.WriteString(ls.ReferenceID)
	builder.WriteString(", ")
	builder.WriteString("leaderboard_id=")
	builder.WriteString(ls.LeaderboardID)
	builder.WriteString(", ")
	builder.WriteString("meta=")
	builder.WriteString(fmt.Sprintf("%v", ls.Meta))
	builder.WriteByte(')')
	return builder.String()
}

// LeaderboardScores is a parsable slice of LeaderboardScore.
type LeaderboardScores []*LeaderboardScore
