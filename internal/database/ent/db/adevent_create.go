// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/adevent"
)

// AdEventCreate is the builder for creating a AdEvent entity.
type AdEventCreate struct {
	config
	mutation *AdEventMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (aec *AdEventCreate) SetCreatedAt(t time.Time) *AdEventCreate {
	aec.mutation.SetCreatedAt(t)
	return aec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aec *AdEventCreate) SetNillableCreatedAt(t *time.Time) *AdEventCreate {
	if t != nil {
		aec.SetCreatedAt(*t)
	}
	return aec
}

// SetUpdatedAt sets the "updated_at" field.
func (aec *AdEventCreate) SetUpdatedAt(t time.Time) *AdEventCreate {
	aec.mutation.SetUpdatedAt(t)
	return aec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aec *AdEventCreate) SetNillableUpdatedAt(t *time.Time) *AdEventCreate {
	if t != nil {
		aec.SetUpdatedAt(*t)
	}
	return aec
}

// SetUserID sets the "user_id" field.
func (aec *AdEventCreate) SetUserID(s string) *AdEventCreate {
	aec.mutation.SetUserID(s)
	return aec
}

// SetGuildID sets the "guild_id" field.
func (aec *AdEventCreate) SetGuildID(s string) *AdEventCreate {
	aec.mutation.SetGuildID(s)
	return aec
}

// SetChannelID sets the "channel_id" field.
func (aec *AdEventCreate) SetChannelID(s string) *AdEventCreate {
	aec.mutation.SetChannelID(s)
	return aec
}

// SetLocale sets the "locale" field.
func (aec *AdEventCreate) SetLocale(s string) *AdEventCreate {
	aec.mutation.SetLocale(s)
	return aec
}

// SetMessageID sets the "message_id" field.
func (aec *AdEventCreate) SetMessageID(s string) *AdEventCreate {
	aec.mutation.SetMessageID(s)
	return aec
}

// SetMetadata sets the "metadata" field.
func (aec *AdEventCreate) SetMetadata(m map[string]interface{}) *AdEventCreate {
	aec.mutation.SetMetadata(m)
	return aec
}

// SetID sets the "id" field.
func (aec *AdEventCreate) SetID(s string) *AdEventCreate {
	aec.mutation.SetID(s)
	return aec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aec *AdEventCreate) SetNillableID(s *string) *AdEventCreate {
	if s != nil {
		aec.SetID(*s)
	}
	return aec
}

// Mutation returns the AdEventMutation object of the builder.
func (aec *AdEventCreate) Mutation() *AdEventMutation {
	return aec.mutation
}

// Save creates the AdEvent in the database.
func (aec *AdEventCreate) Save(ctx context.Context) (*AdEvent, error) {
	aec.defaults()
	return withHooks(ctx, aec.sqlSave, aec.mutation, aec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aec *AdEventCreate) SaveX(ctx context.Context) *AdEvent {
	v, err := aec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aec *AdEventCreate) Exec(ctx context.Context) error {
	_, err := aec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aec *AdEventCreate) ExecX(ctx context.Context) {
	if err := aec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aec *AdEventCreate) defaults() {
	if _, ok := aec.mutation.CreatedAt(); !ok {
		v := adevent.DefaultCreatedAt()
		aec.mutation.SetCreatedAt(v)
	}
	if _, ok := aec.mutation.UpdatedAt(); !ok {
		v := adevent.DefaultUpdatedAt()
		aec.mutation.SetUpdatedAt(v)
	}
	if _, ok := aec.mutation.ID(); !ok {
		v := adevent.DefaultID()
		aec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aec *AdEventCreate) check() error {
	if _, ok := aec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "AdEvent.created_at"`)}
	}
	if _, ok := aec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "AdEvent.updated_at"`)}
	}
	if _, ok := aec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`db: missing required field "AdEvent.user_id"`)}
	}
	if v, ok := aec.mutation.UserID(); ok {
		if err := adevent.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`db: validator failed for field "AdEvent.user_id": %w`, err)}
		}
	}
	if _, ok := aec.mutation.GuildID(); !ok {
		return &ValidationError{Name: "guild_id", err: errors.New(`db: missing required field "AdEvent.guild_id"`)}
	}
	if _, ok := aec.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`db: missing required field "AdEvent.channel_id"`)}
	}
	if v, ok := aec.mutation.ChannelID(); ok {
		if err := adevent.ChannelIDValidator(v); err != nil {
			return &ValidationError{Name: "channel_id", err: fmt.Errorf(`db: validator failed for field "AdEvent.channel_id": %w`, err)}
		}
	}
	if _, ok := aec.mutation.Locale(); !ok {
		return &ValidationError{Name: "locale", err: errors.New(`db: missing required field "AdEvent.locale"`)}
	}
	if _, ok := aec.mutation.MessageID(); !ok {
		return &ValidationError{Name: "message_id", err: errors.New(`db: missing required field "AdEvent.message_id"`)}
	}
	return nil
}

func (aec *AdEventCreate) sqlSave(ctx context.Context) (*AdEvent, error) {
	if err := aec.check(); err != nil {
		return nil, err
	}
	_node, _spec := aec.createSpec()
	if err := sqlgraph.CreateNode(ctx, aec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AdEvent.ID type: %T", _spec.ID.Value)
		}
	}
	aec.mutation.id = &_node.ID
	aec.mutation.done = true
	return _node, nil
}

func (aec *AdEventCreate) createSpec() (*AdEvent, *sqlgraph.CreateSpec) {
	var (
		_node = &AdEvent{config: aec.config}
		_spec = sqlgraph.NewCreateSpec(adevent.Table, sqlgraph.NewFieldSpec(adevent.FieldID, field.TypeString))
	)
	if id, ok := aec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aec.mutation.CreatedAt(); ok {
		_spec.SetField(adevent.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aec.mutation.UpdatedAt(); ok {
		_spec.SetField(adevent.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := aec.mutation.UserID(); ok {
		_spec.SetField(adevent.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := aec.mutation.GuildID(); ok {
		_spec.SetField(adevent.FieldGuildID, field.TypeString, value)
		_node.GuildID = value
	}
	if value, ok := aec.mutation.ChannelID(); ok {
		_spec.SetField(adevent.FieldChannelID, field.TypeString, value)
		_node.ChannelID = value
	}
	if value, ok := aec.mutation.Locale(); ok {
		_spec.SetField(adevent.FieldLocale, field.TypeString, value)
		_node.Locale = value
	}
	if value, ok := aec.mutation.MessageID(); ok {
		_spec.SetField(adevent.FieldMessageID, field.TypeString, value)
		_node.MessageID = value
	}
	if value, ok := aec.mutation.Metadata(); ok {
		_spec.SetField(adevent.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	return _node, _spec
}

// AdEventCreateBulk is the builder for creating many AdEvent entities in bulk.
type AdEventCreateBulk struct {
	config
	err      error
	builders []*AdEventCreate
}

// Save creates the AdEvent entities in the database.
func (aecb *AdEventCreateBulk) Save(ctx context.Context) ([]*AdEvent, error) {
	if aecb.err != nil {
		return nil, aecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aecb.builders))
	nodes := make([]*AdEvent, len(aecb.builders))
	mutators := make([]Mutator, len(aecb.builders))
	for i := range aecb.builders {
		func(i int, root context.Context) {
			builder := aecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdEventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aecb *AdEventCreateBulk) SaveX(ctx context.Context) []*AdEvent {
	v, err := aecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aecb *AdEventCreateBulk) Exec(ctx context.Context) error {
	_, err := aecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aecb *AdEventCreateBulk) ExecX(ctx context.Context) {
	if err := aecb.Exec(ctx); err != nil {
		panic(err)
	}
}
