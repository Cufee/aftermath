// Code generated by ent, DO NOT EDIT.

package userrestriction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"github.com/cufee/aftermath/internal/database/models"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldUpdatedAt, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldExpiresAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldUserID, v))
}

// Restriction applies equality check predicate on the "restriction" field. It's identical to RestrictionEQ.
func Restriction(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldRestriction, v))
}

// PublicReason applies equality check predicate on the "public_reason" field. It's identical to PublicReasonEQ.
func PublicReason(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldPublicReason, v))
}

// ModeratorComment applies equality check predicate on the "moderator_comment" field. It's identical to ModeratorCommentEQ.
func ModeratorComment(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldModeratorComment, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLTE(FieldUpdatedAt, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLTE(FieldExpiresAt, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v models.UserRestrictionType) predicate.UserRestriction {
	vc := v
	return predicate.UserRestriction(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v models.UserRestrictionType) predicate.UserRestriction {
	vc := v
	return predicate.UserRestriction(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...models.UserRestrictionType) predicate.UserRestriction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserRestriction(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...models.UserRestrictionType) predicate.UserRestriction {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserRestriction(sql.FieldNotIn(FieldType, v...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldContainsFold(FieldUserID, v))
}

// RestrictionEQ applies the EQ predicate on the "restriction" field.
func RestrictionEQ(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldRestriction, v))
}

// RestrictionNEQ applies the NEQ predicate on the "restriction" field.
func RestrictionNEQ(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNEQ(FieldRestriction, v))
}

// RestrictionIn applies the In predicate on the "restriction" field.
func RestrictionIn(vs ...string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldIn(FieldRestriction, vs...))
}

// RestrictionNotIn applies the NotIn predicate on the "restriction" field.
func RestrictionNotIn(vs ...string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNotIn(FieldRestriction, vs...))
}

// RestrictionGT applies the GT predicate on the "restriction" field.
func RestrictionGT(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGT(FieldRestriction, v))
}

// RestrictionGTE applies the GTE predicate on the "restriction" field.
func RestrictionGTE(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGTE(FieldRestriction, v))
}

// RestrictionLT applies the LT predicate on the "restriction" field.
func RestrictionLT(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLT(FieldRestriction, v))
}

// RestrictionLTE applies the LTE predicate on the "restriction" field.
func RestrictionLTE(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLTE(FieldRestriction, v))
}

// RestrictionContains applies the Contains predicate on the "restriction" field.
func RestrictionContains(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldContains(FieldRestriction, v))
}

// RestrictionHasPrefix applies the HasPrefix predicate on the "restriction" field.
func RestrictionHasPrefix(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldHasPrefix(FieldRestriction, v))
}

// RestrictionHasSuffix applies the HasSuffix predicate on the "restriction" field.
func RestrictionHasSuffix(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldHasSuffix(FieldRestriction, v))
}

// RestrictionEqualFold applies the EqualFold predicate on the "restriction" field.
func RestrictionEqualFold(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEqualFold(FieldRestriction, v))
}

// RestrictionContainsFold applies the ContainsFold predicate on the "restriction" field.
func RestrictionContainsFold(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldContainsFold(FieldRestriction, v))
}

// PublicReasonEQ applies the EQ predicate on the "public_reason" field.
func PublicReasonEQ(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldPublicReason, v))
}

// PublicReasonNEQ applies the NEQ predicate on the "public_reason" field.
func PublicReasonNEQ(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNEQ(FieldPublicReason, v))
}

// PublicReasonIn applies the In predicate on the "public_reason" field.
func PublicReasonIn(vs ...string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldIn(FieldPublicReason, vs...))
}

// PublicReasonNotIn applies the NotIn predicate on the "public_reason" field.
func PublicReasonNotIn(vs ...string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNotIn(FieldPublicReason, vs...))
}

// PublicReasonGT applies the GT predicate on the "public_reason" field.
func PublicReasonGT(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGT(FieldPublicReason, v))
}

// PublicReasonGTE applies the GTE predicate on the "public_reason" field.
func PublicReasonGTE(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGTE(FieldPublicReason, v))
}

// PublicReasonLT applies the LT predicate on the "public_reason" field.
func PublicReasonLT(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLT(FieldPublicReason, v))
}

// PublicReasonLTE applies the LTE predicate on the "public_reason" field.
func PublicReasonLTE(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLTE(FieldPublicReason, v))
}

// PublicReasonContains applies the Contains predicate on the "public_reason" field.
func PublicReasonContains(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldContains(FieldPublicReason, v))
}

// PublicReasonHasPrefix applies the HasPrefix predicate on the "public_reason" field.
func PublicReasonHasPrefix(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldHasPrefix(FieldPublicReason, v))
}

// PublicReasonHasSuffix applies the HasSuffix predicate on the "public_reason" field.
func PublicReasonHasSuffix(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldHasSuffix(FieldPublicReason, v))
}

// PublicReasonEqualFold applies the EqualFold predicate on the "public_reason" field.
func PublicReasonEqualFold(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEqualFold(FieldPublicReason, v))
}

// PublicReasonContainsFold applies the ContainsFold predicate on the "public_reason" field.
func PublicReasonContainsFold(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldContainsFold(FieldPublicReason, v))
}

// ModeratorCommentEQ applies the EQ predicate on the "moderator_comment" field.
func ModeratorCommentEQ(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEQ(FieldModeratorComment, v))
}

// ModeratorCommentNEQ applies the NEQ predicate on the "moderator_comment" field.
func ModeratorCommentNEQ(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNEQ(FieldModeratorComment, v))
}

// ModeratorCommentIn applies the In predicate on the "moderator_comment" field.
func ModeratorCommentIn(vs ...string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldIn(FieldModeratorComment, vs...))
}

// ModeratorCommentNotIn applies the NotIn predicate on the "moderator_comment" field.
func ModeratorCommentNotIn(vs ...string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldNotIn(FieldModeratorComment, vs...))
}

// ModeratorCommentGT applies the GT predicate on the "moderator_comment" field.
func ModeratorCommentGT(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGT(FieldModeratorComment, v))
}

// ModeratorCommentGTE applies the GTE predicate on the "moderator_comment" field.
func ModeratorCommentGTE(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldGTE(FieldModeratorComment, v))
}

// ModeratorCommentLT applies the LT predicate on the "moderator_comment" field.
func ModeratorCommentLT(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLT(FieldModeratorComment, v))
}

// ModeratorCommentLTE applies the LTE predicate on the "moderator_comment" field.
func ModeratorCommentLTE(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldLTE(FieldModeratorComment, v))
}

// ModeratorCommentContains applies the Contains predicate on the "moderator_comment" field.
func ModeratorCommentContains(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldContains(FieldModeratorComment, v))
}

// ModeratorCommentHasPrefix applies the HasPrefix predicate on the "moderator_comment" field.
func ModeratorCommentHasPrefix(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldHasPrefix(FieldModeratorComment, v))
}

// ModeratorCommentHasSuffix applies the HasSuffix predicate on the "moderator_comment" field.
func ModeratorCommentHasSuffix(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldHasSuffix(FieldModeratorComment, v))
}

// ModeratorCommentEqualFold applies the EqualFold predicate on the "moderator_comment" field.
func ModeratorCommentEqualFold(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldEqualFold(FieldModeratorComment, v))
}

// ModeratorCommentContainsFold applies the ContainsFold predicate on the "moderator_comment" field.
func ModeratorCommentContainsFold(v string) predicate.UserRestriction {
	return predicate.UserRestriction(sql.FieldContainsFold(FieldModeratorComment, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserRestriction {
	return predicate.UserRestriction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserRestriction {
	return predicate.UserRestriction(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserRestriction) predicate.UserRestriction {
	return predicate.UserRestriction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserRestriction) predicate.UserRestriction {
	return predicate.UserRestriction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserRestriction) predicate.UserRestriction {
	return predicate.UserRestriction(sql.NotPredicates(p))
}
