// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"github.com/cufee/aftermath/internal/database/ent/db/usercontent"
	"github.com/cufee/aftermath/internal/database/models"
)

// UserContentUpdate is the builder for updating UserContent entities.
type UserContentUpdate struct {
	config
	hooks    []Hook
	mutation *UserContentMutation
}

// Where appends a list predicates to the UserContentUpdate builder.
func (ucu *UserContentUpdate) Where(ps ...predicate.UserContent) *UserContentUpdate {
	ucu.mutation.Where(ps...)
	return ucu
}

// SetUpdatedAt sets the "updated_at" field.
func (ucu *UserContentUpdate) SetUpdatedAt(i int64) *UserContentUpdate {
	ucu.mutation.ResetUpdatedAt()
	ucu.mutation.SetUpdatedAt(i)
	return ucu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ucu *UserContentUpdate) AddUpdatedAt(i int64) *UserContentUpdate {
	ucu.mutation.AddUpdatedAt(i)
	return ucu
}

// SetType sets the "type" field.
func (ucu *UserContentUpdate) SetType(mct models.UserContentType) *UserContentUpdate {
	ucu.mutation.SetType(mct)
	return ucu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ucu *UserContentUpdate) SetNillableType(mct *models.UserContentType) *UserContentUpdate {
	if mct != nil {
		ucu.SetType(*mct)
	}
	return ucu
}

// SetReferenceID sets the "reference_id" field.
func (ucu *UserContentUpdate) SetReferenceID(s string) *UserContentUpdate {
	ucu.mutation.SetReferenceID(s)
	return ucu
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (ucu *UserContentUpdate) SetNillableReferenceID(s *string) *UserContentUpdate {
	if s != nil {
		ucu.SetReferenceID(*s)
	}
	return ucu
}

// SetValue sets the "value" field.
func (ucu *UserContentUpdate) SetValue(a any) *UserContentUpdate {
	ucu.mutation.SetValue(a)
	return ucu
}

// SetMetadata sets the "metadata" field.
func (ucu *UserContentUpdate) SetMetadata(m map[string]interface{}) *UserContentUpdate {
	ucu.mutation.SetMetadata(m)
	return ucu
}

// Mutation returns the UserContentMutation object of the builder.
func (ucu *UserContentUpdate) Mutation() *UserContentMutation {
	return ucu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucu *UserContentUpdate) Save(ctx context.Context) (int, error) {
	ucu.defaults()
	return withHooks(ctx, ucu.sqlSave, ucu.mutation, ucu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucu *UserContentUpdate) SaveX(ctx context.Context) int {
	affected, err := ucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucu *UserContentUpdate) Exec(ctx context.Context) error {
	_, err := ucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucu *UserContentUpdate) ExecX(ctx context.Context) {
	if err := ucu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucu *UserContentUpdate) defaults() {
	if _, ok := ucu.mutation.UpdatedAt(); !ok {
		v := usercontent.UpdateDefaultUpdatedAt()
		ucu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucu *UserContentUpdate) check() error {
	if v, ok := ucu.mutation.GetType(); ok {
		if err := usercontent.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "UserContent.type": %w`, err)}
		}
	}
	if _, ok := ucu.mutation.UserID(); ucu.mutation.UserCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "UserContent.user"`)
	}
	return nil
}

func (ucu *UserContentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ucu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usercontent.Table, usercontent.Columns, sqlgraph.NewFieldSpec(usercontent.FieldID, field.TypeString))
	if ps := ucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucu.mutation.UpdatedAt(); ok {
		_spec.SetField(usercontent.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ucu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(usercontent.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ucu.mutation.GetType(); ok {
		_spec.SetField(usercontent.FieldType, field.TypeEnum, value)
	}
	if value, ok := ucu.mutation.ReferenceID(); ok {
		_spec.SetField(usercontent.FieldReferenceID, field.TypeString, value)
	}
	if value, ok := ucu.mutation.Value(); ok {
		_spec.SetField(usercontent.FieldValue, field.TypeJSON, value)
	}
	if value, ok := ucu.mutation.Metadata(); ok {
		_spec.SetField(usercontent.FieldMetadata, field.TypeJSON, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercontent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucu.mutation.done = true
	return n, nil
}

// UserContentUpdateOne is the builder for updating a single UserContent entity.
type UserContentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserContentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ucuo *UserContentUpdateOne) SetUpdatedAt(i int64) *UserContentUpdateOne {
	ucuo.mutation.ResetUpdatedAt()
	ucuo.mutation.SetUpdatedAt(i)
	return ucuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ucuo *UserContentUpdateOne) AddUpdatedAt(i int64) *UserContentUpdateOne {
	ucuo.mutation.AddUpdatedAt(i)
	return ucuo
}

// SetType sets the "type" field.
func (ucuo *UserContentUpdateOne) SetType(mct models.UserContentType) *UserContentUpdateOne {
	ucuo.mutation.SetType(mct)
	return ucuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ucuo *UserContentUpdateOne) SetNillableType(mct *models.UserContentType) *UserContentUpdateOne {
	if mct != nil {
		ucuo.SetType(*mct)
	}
	return ucuo
}

// SetReferenceID sets the "reference_id" field.
func (ucuo *UserContentUpdateOne) SetReferenceID(s string) *UserContentUpdateOne {
	ucuo.mutation.SetReferenceID(s)
	return ucuo
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (ucuo *UserContentUpdateOne) SetNillableReferenceID(s *string) *UserContentUpdateOne {
	if s != nil {
		ucuo.SetReferenceID(*s)
	}
	return ucuo
}

// SetValue sets the "value" field.
func (ucuo *UserContentUpdateOne) SetValue(a any) *UserContentUpdateOne {
	ucuo.mutation.SetValue(a)
	return ucuo
}

// SetMetadata sets the "metadata" field.
func (ucuo *UserContentUpdateOne) SetMetadata(m map[string]interface{}) *UserContentUpdateOne {
	ucuo.mutation.SetMetadata(m)
	return ucuo
}

// Mutation returns the UserContentMutation object of the builder.
func (ucuo *UserContentUpdateOne) Mutation() *UserContentMutation {
	return ucuo.mutation
}

// Where appends a list predicates to the UserContentUpdate builder.
func (ucuo *UserContentUpdateOne) Where(ps ...predicate.UserContent) *UserContentUpdateOne {
	ucuo.mutation.Where(ps...)
	return ucuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucuo *UserContentUpdateOne) Select(field string, fields ...string) *UserContentUpdateOne {
	ucuo.fields = append([]string{field}, fields...)
	return ucuo
}

// Save executes the query and returns the updated UserContent entity.
func (ucuo *UserContentUpdateOne) Save(ctx context.Context) (*UserContent, error) {
	ucuo.defaults()
	return withHooks(ctx, ucuo.sqlSave, ucuo.mutation, ucuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucuo *UserContentUpdateOne) SaveX(ctx context.Context) *UserContent {
	node, err := ucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucuo *UserContentUpdateOne) Exec(ctx context.Context) error {
	_, err := ucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucuo *UserContentUpdateOne) ExecX(ctx context.Context) {
	if err := ucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucuo *UserContentUpdateOne) defaults() {
	if _, ok := ucuo.mutation.UpdatedAt(); !ok {
		v := usercontent.UpdateDefaultUpdatedAt()
		ucuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucuo *UserContentUpdateOne) check() error {
	if v, ok := ucuo.mutation.GetType(); ok {
		if err := usercontent.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "UserContent.type": %w`, err)}
		}
	}
	if _, ok := ucuo.mutation.UserID(); ucuo.mutation.UserCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "UserContent.user"`)
	}
	return nil
}

func (ucuo *UserContentUpdateOne) sqlSave(ctx context.Context) (_node *UserContent, err error) {
	if err := ucuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usercontent.Table, usercontent.Columns, sqlgraph.NewFieldSpec(usercontent.FieldID, field.TypeString))
	id, ok := ucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "UserContent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercontent.FieldID)
		for _, f := range fields {
			if !usercontent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != usercontent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucuo.mutation.UpdatedAt(); ok {
		_spec.SetField(usercontent.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ucuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(usercontent.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ucuo.mutation.GetType(); ok {
		_spec.SetField(usercontent.FieldType, field.TypeEnum, value)
	}
	if value, ok := ucuo.mutation.ReferenceID(); ok {
		_spec.SetField(usercontent.FieldReferenceID, field.TypeString, value)
	}
	if value, ok := ucuo.mutation.Value(); ok {
		_spec.SetField(usercontent.FieldValue, field.TypeJSON, value)
	}
	if value, ok := ucuo.mutation.Metadata(); ok {
		_spec.SetField(usercontent.FieldMetadata, field.TypeJSON, value)
	}
	_node = &UserContent{config: ucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercontent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucuo.mutation.done = true
	return _node, nil
}
