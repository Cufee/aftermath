// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cufee/aftermath/internal/database/ent/db/admessage"
	"golang.org/x/text/language"
)

// AdMessage is the model entity for the AdMessage schema.
type AdMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Enabled holds the value of the "enabled" field.
	Enabled bool `json:"enabled,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight int `json:"weight,omitempty"`
	// Chance holds the value of the "chance" field.
	Chance float32 `json:"chance,omitempty"`
	// Message holds the value of the "message" field.
	Message map[language.Tag]string `json:"message,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata     map[string]interface{} `json:"metadata,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case admessage.FieldMessage, admessage.FieldMetadata:
			values[i] = new([]byte)
		case admessage.FieldEnabled:
			values[i] = new(sql.NullBool)
		case admessage.FieldChance:
			values[i] = new(sql.NullFloat64)
		case admessage.FieldWeight:
			values[i] = new(sql.NullInt64)
		case admessage.FieldID:
			values[i] = new(sql.NullString)
		case admessage.FieldCreatedAt, admessage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdMessage fields.
func (am *AdMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case admessage.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				am.ID = value.String
			}
		case admessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				am.CreatedAt = value.Time
			}
		case admessage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				am.UpdatedAt = value.Time
			}
		case admessage.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				am.Enabled = value.Bool
			}
		case admessage.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				am.Weight = int(value.Int64)
			}
		case admessage.FieldChance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field chance", values[i])
			} else if value.Valid {
				am.Chance = float32(value.Float64)
			}
		case admessage.FieldMessage:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &am.Message); err != nil {
					return fmt.Errorf("unmarshal field message: %w", err)
				}
			}
		case admessage.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &am.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			am.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdMessage.
// This includes values selected through modifiers, order, etc.
func (am *AdMessage) Value(name string) (ent.Value, error) {
	return am.selectValues.Get(name)
}

// Update returns a builder for updating this AdMessage.
// Note that you need to call AdMessage.Unwrap() before calling this method if this AdMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (am *AdMessage) Update() *AdMessageUpdateOne {
	return NewAdMessageClient(am.config).UpdateOne(am)
}

// Unwrap unwraps the AdMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (am *AdMessage) Unwrap() *AdMessage {
	_tx, ok := am.config.driver.(*txDriver)
	if !ok {
		panic("db: AdMessage is not a transactional entity")
	}
	am.config.driver = _tx.drv
	return am
}

// String implements the fmt.Stringer.
func (am *AdMessage) String() string {
	var builder strings.Builder
	builder.WriteString("AdMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", am.ID))
	builder.WriteString("created_at=")
	builder.WriteString(am.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(am.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", am.Enabled))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", am.Weight))
	builder.WriteString(", ")
	builder.WriteString("chance=")
	builder.WriteString(fmt.Sprintf("%v", am.Chance))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(fmt.Sprintf("%v", am.Message))
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", am.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// AdMessages is a parsable slice of AdMessage.
type AdMessages []*AdMessage
