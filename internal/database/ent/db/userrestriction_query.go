// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"github.com/cufee/aftermath/internal/database/ent/db/user"
	"github.com/cufee/aftermath/internal/database/ent/db/userrestriction"
)

// UserRestrictionQuery is the builder for querying UserRestriction entities.
type UserRestrictionQuery struct {
	config
	ctx        *QueryContext
	order      []userrestriction.OrderOption
	inters     []Interceptor
	predicates []predicate.UserRestriction
	withUser   *UserQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserRestrictionQuery builder.
func (urq *UserRestrictionQuery) Where(ps ...predicate.UserRestriction) *UserRestrictionQuery {
	urq.predicates = append(urq.predicates, ps...)
	return urq
}

// Limit the number of records to be returned by this query.
func (urq *UserRestrictionQuery) Limit(limit int) *UserRestrictionQuery {
	urq.ctx.Limit = &limit
	return urq
}

// Offset to start from.
func (urq *UserRestrictionQuery) Offset(offset int) *UserRestrictionQuery {
	urq.ctx.Offset = &offset
	return urq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (urq *UserRestrictionQuery) Unique(unique bool) *UserRestrictionQuery {
	urq.ctx.Unique = &unique
	return urq
}

// Order specifies how the records should be ordered.
func (urq *UserRestrictionQuery) Order(o ...userrestriction.OrderOption) *UserRestrictionQuery {
	urq.order = append(urq.order, o...)
	return urq
}

// QueryUser chains the current query on the "user" edge.
func (urq *UserRestrictionQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: urq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := urq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := urq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userrestriction.Table, userrestriction.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userrestriction.UserTable, userrestriction.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(urq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserRestriction entity from the query.
// Returns a *NotFoundError when no UserRestriction was found.
func (urq *UserRestrictionQuery) First(ctx context.Context) (*UserRestriction, error) {
	nodes, err := urq.Limit(1).All(setContextOp(ctx, urq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userrestriction.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (urq *UserRestrictionQuery) FirstX(ctx context.Context) *UserRestriction {
	node, err := urq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserRestriction ID from the query.
// Returns a *NotFoundError when no UserRestriction ID was found.
func (urq *UserRestrictionQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = urq.Limit(1).IDs(setContextOp(ctx, urq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userrestriction.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (urq *UserRestrictionQuery) FirstIDX(ctx context.Context) string {
	id, err := urq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserRestriction entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserRestriction entity is found.
// Returns a *NotFoundError when no UserRestriction entities are found.
func (urq *UserRestrictionQuery) Only(ctx context.Context) (*UserRestriction, error) {
	nodes, err := urq.Limit(2).All(setContextOp(ctx, urq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userrestriction.Label}
	default:
		return nil, &NotSingularError{userrestriction.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (urq *UserRestrictionQuery) OnlyX(ctx context.Context) *UserRestriction {
	node, err := urq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserRestriction ID in the query.
// Returns a *NotSingularError when more than one UserRestriction ID is found.
// Returns a *NotFoundError when no entities are found.
func (urq *UserRestrictionQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = urq.Limit(2).IDs(setContextOp(ctx, urq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userrestriction.Label}
	default:
		err = &NotSingularError{userrestriction.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (urq *UserRestrictionQuery) OnlyIDX(ctx context.Context) string {
	id, err := urq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserRestrictions.
func (urq *UserRestrictionQuery) All(ctx context.Context) ([]*UserRestriction, error) {
	ctx = setContextOp(ctx, urq.ctx, "All")
	if err := urq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserRestriction, *UserRestrictionQuery]()
	return withInterceptors[[]*UserRestriction](ctx, urq, qr, urq.inters)
}

// AllX is like All, but panics if an error occurs.
func (urq *UserRestrictionQuery) AllX(ctx context.Context) []*UserRestriction {
	nodes, err := urq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserRestriction IDs.
func (urq *UserRestrictionQuery) IDs(ctx context.Context) (ids []string, err error) {
	if urq.ctx.Unique == nil && urq.path != nil {
		urq.Unique(true)
	}
	ctx = setContextOp(ctx, urq.ctx, "IDs")
	if err = urq.Select(userrestriction.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (urq *UserRestrictionQuery) IDsX(ctx context.Context) []string {
	ids, err := urq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (urq *UserRestrictionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, urq.ctx, "Count")
	if err := urq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, urq, querierCount[*UserRestrictionQuery](), urq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (urq *UserRestrictionQuery) CountX(ctx context.Context) int {
	count, err := urq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (urq *UserRestrictionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, urq.ctx, "Exist")
	switch _, err := urq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("db: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (urq *UserRestrictionQuery) ExistX(ctx context.Context) bool {
	exist, err := urq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserRestrictionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (urq *UserRestrictionQuery) Clone() *UserRestrictionQuery {
	if urq == nil {
		return nil
	}
	return &UserRestrictionQuery{
		config:     urq.config,
		ctx:        urq.ctx.Clone(),
		order:      append([]userrestriction.OrderOption{}, urq.order...),
		inters:     append([]Interceptor{}, urq.inters...),
		predicates: append([]predicate.UserRestriction{}, urq.predicates...),
		withUser:   urq.withUser.Clone(),
		// clone intermediate query.
		sql:  urq.sql.Clone(),
		path: urq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (urq *UserRestrictionQuery) WithUser(opts ...func(*UserQuery)) *UserRestrictionQuery {
	query := (&UserClient{config: urq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	urq.withUser = query
	return urq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserRestriction.Query().
//		GroupBy(userrestriction.FieldCreatedAt).
//		Aggregate(db.Count()).
//		Scan(ctx, &v)
func (urq *UserRestrictionQuery) GroupBy(field string, fields ...string) *UserRestrictionGroupBy {
	urq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserRestrictionGroupBy{build: urq}
	grbuild.flds = &urq.ctx.Fields
	grbuild.label = userrestriction.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.UserRestriction.Query().
//		Select(userrestriction.FieldCreatedAt).
//		Scan(ctx, &v)
func (urq *UserRestrictionQuery) Select(fields ...string) *UserRestrictionSelect {
	urq.ctx.Fields = append(urq.ctx.Fields, fields...)
	sbuild := &UserRestrictionSelect{UserRestrictionQuery: urq}
	sbuild.label = userrestriction.Label
	sbuild.flds, sbuild.scan = &urq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserRestrictionSelect configured with the given aggregations.
func (urq *UserRestrictionQuery) Aggregate(fns ...AggregateFunc) *UserRestrictionSelect {
	return urq.Select().Aggregate(fns...)
}

func (urq *UserRestrictionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range urq.inters {
		if inter == nil {
			return fmt.Errorf("db: uninitialized interceptor (forgotten import db/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, urq); err != nil {
				return err
			}
		}
	}
	for _, f := range urq.ctx.Fields {
		if !userrestriction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
		}
	}
	if urq.path != nil {
		prev, err := urq.path(ctx)
		if err != nil {
			return err
		}
		urq.sql = prev
	}
	return nil
}

func (urq *UserRestrictionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserRestriction, error) {
	var (
		nodes       = []*UserRestriction{}
		_spec       = urq.querySpec()
		loadedTypes = [1]bool{
			urq.withUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserRestriction).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserRestriction{config: urq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(urq.modifiers) > 0 {
		_spec.Modifiers = urq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, urq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := urq.withUser; query != nil {
		if err := urq.loadUser(ctx, query, nodes, nil,
			func(n *UserRestriction, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (urq *UserRestrictionQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserRestriction, init func(*UserRestriction), assign func(*UserRestriction, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*UserRestriction)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (urq *UserRestrictionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := urq.querySpec()
	if len(urq.modifiers) > 0 {
		_spec.Modifiers = urq.modifiers
	}
	_spec.Node.Columns = urq.ctx.Fields
	if len(urq.ctx.Fields) > 0 {
		_spec.Unique = urq.ctx.Unique != nil && *urq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, urq.driver, _spec)
}

func (urq *UserRestrictionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(userrestriction.Table, userrestriction.Columns, sqlgraph.NewFieldSpec(userrestriction.FieldID, field.TypeString))
	_spec.From = urq.sql
	if unique := urq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if urq.path != nil {
		_spec.Unique = true
	}
	if fields := urq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userrestriction.FieldID)
		for i := range fields {
			if fields[i] != userrestriction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if urq.withUser != nil {
			_spec.Node.AddColumnOnce(userrestriction.FieldUserID)
		}
	}
	if ps := urq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := urq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := urq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := urq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (urq *UserRestrictionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(urq.driver.Dialect())
	t1 := builder.Table(userrestriction.Table)
	columns := urq.ctx.Fields
	if len(columns) == 0 {
		columns = userrestriction.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if urq.sql != nil {
		selector = urq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if urq.ctx.Unique != nil && *urq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range urq.modifiers {
		m(selector)
	}
	for _, p := range urq.predicates {
		p(selector)
	}
	for _, p := range urq.order {
		p(selector)
	}
	if offset := urq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := urq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (urq *UserRestrictionQuery) Modify(modifiers ...func(s *sql.Selector)) *UserRestrictionSelect {
	urq.modifiers = append(urq.modifiers, modifiers...)
	return urq.Select()
}

// UserRestrictionGroupBy is the group-by builder for UserRestriction entities.
type UserRestrictionGroupBy struct {
	selector
	build *UserRestrictionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (urgb *UserRestrictionGroupBy) Aggregate(fns ...AggregateFunc) *UserRestrictionGroupBy {
	urgb.fns = append(urgb.fns, fns...)
	return urgb
}

// Scan applies the selector query and scans the result into the given value.
func (urgb *UserRestrictionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, urgb.build.ctx, "GroupBy")
	if err := urgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserRestrictionQuery, *UserRestrictionGroupBy](ctx, urgb.build, urgb, urgb.build.inters, v)
}

func (urgb *UserRestrictionGroupBy) sqlScan(ctx context.Context, root *UserRestrictionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(urgb.fns))
	for _, fn := range urgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*urgb.flds)+len(urgb.fns))
		for _, f := range *urgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*urgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := urgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserRestrictionSelect is the builder for selecting fields of UserRestriction entities.
type UserRestrictionSelect struct {
	*UserRestrictionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (urs *UserRestrictionSelect) Aggregate(fns ...AggregateFunc) *UserRestrictionSelect {
	urs.fns = append(urs.fns, fns...)
	return urs
}

// Scan applies the selector query and scans the result into the given value.
func (urs *UserRestrictionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, urs.ctx, "Select")
	if err := urs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserRestrictionQuery, *UserRestrictionSelect](ctx, urs.UserRestrictionQuery, urs, urs.inters, v)
}

func (urs *UserRestrictionSelect) sqlScan(ctx context.Context, root *UserRestrictionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(urs.fns))
	for _, fn := range urs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*urs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := urs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (urs *UserRestrictionSelect) Modify(modifiers ...func(s *sql.Selector)) *UserRestrictionSelect {
	urs.modifiers = append(urs.modifiers, modifiers...)
	return urs
}
