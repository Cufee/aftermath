// Code generated by ent, DO NOT EDIT.

package clan

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Clan {
	return predicate.Clan(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Clan {
	return predicate.Clan(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Clan {
	return predicate.Clan(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Clan {
	return predicate.Clan(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Clan {
	return predicate.Clan(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Clan {
	return predicate.Clan(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Clan {
	return predicate.Clan(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Clan {
	return predicate.Clan(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Clan {
	return predicate.Clan(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Clan {
	return predicate.Clan(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Clan {
	return predicate.Clan(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Clan {
	return predicate.Clan(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Clan {
	return predicate.Clan(sql.FieldEQ(FieldUpdatedAt, v))
}

// Tag applies equality check predicate on the "tag" field. It's identical to TagEQ.
func Tag(v string) predicate.Clan {
	return predicate.Clan(sql.FieldEQ(FieldTag, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Clan {
	return predicate.Clan(sql.FieldEQ(FieldName, v))
}

// EmblemID applies equality check predicate on the "emblem_id" field. It's identical to EmblemIDEQ.
func EmblemID(v string) predicate.Clan {
	return predicate.Clan(sql.FieldEQ(FieldEmblemID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Clan {
	return predicate.Clan(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Clan {
	return predicate.Clan(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Clan {
	return predicate.Clan(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Clan {
	return predicate.Clan(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Clan {
	return predicate.Clan(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Clan {
	return predicate.Clan(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Clan {
	return predicate.Clan(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Clan {
	return predicate.Clan(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Clan {
	return predicate.Clan(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Clan {
	return predicate.Clan(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Clan {
	return predicate.Clan(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Clan {
	return predicate.Clan(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Clan {
	return predicate.Clan(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Clan {
	return predicate.Clan(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Clan {
	return predicate.Clan(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Clan {
	return predicate.Clan(sql.FieldLTE(FieldUpdatedAt, v))
}

// TagEQ applies the EQ predicate on the "tag" field.
func TagEQ(v string) predicate.Clan {
	return predicate.Clan(sql.FieldEQ(FieldTag, v))
}

// TagNEQ applies the NEQ predicate on the "tag" field.
func TagNEQ(v string) predicate.Clan {
	return predicate.Clan(sql.FieldNEQ(FieldTag, v))
}

// TagIn applies the In predicate on the "tag" field.
func TagIn(vs ...string) predicate.Clan {
	return predicate.Clan(sql.FieldIn(FieldTag, vs...))
}

// TagNotIn applies the NotIn predicate on the "tag" field.
func TagNotIn(vs ...string) predicate.Clan {
	return predicate.Clan(sql.FieldNotIn(FieldTag, vs...))
}

// TagGT applies the GT predicate on the "tag" field.
func TagGT(v string) predicate.Clan {
	return predicate.Clan(sql.FieldGT(FieldTag, v))
}

// TagGTE applies the GTE predicate on the "tag" field.
func TagGTE(v string) predicate.Clan {
	return predicate.Clan(sql.FieldGTE(FieldTag, v))
}

// TagLT applies the LT predicate on the "tag" field.
func TagLT(v string) predicate.Clan {
	return predicate.Clan(sql.FieldLT(FieldTag, v))
}

// TagLTE applies the LTE predicate on the "tag" field.
func TagLTE(v string) predicate.Clan {
	return predicate.Clan(sql.FieldLTE(FieldTag, v))
}

// TagContains applies the Contains predicate on the "tag" field.
func TagContains(v string) predicate.Clan {
	return predicate.Clan(sql.FieldContains(FieldTag, v))
}

// TagHasPrefix applies the HasPrefix predicate on the "tag" field.
func TagHasPrefix(v string) predicate.Clan {
	return predicate.Clan(sql.FieldHasPrefix(FieldTag, v))
}

// TagHasSuffix applies the HasSuffix predicate on the "tag" field.
func TagHasSuffix(v string) predicate.Clan {
	return predicate.Clan(sql.FieldHasSuffix(FieldTag, v))
}

// TagEqualFold applies the EqualFold predicate on the "tag" field.
func TagEqualFold(v string) predicate.Clan {
	return predicate.Clan(sql.FieldEqualFold(FieldTag, v))
}

// TagContainsFold applies the ContainsFold predicate on the "tag" field.
func TagContainsFold(v string) predicate.Clan {
	return predicate.Clan(sql.FieldContainsFold(FieldTag, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Clan {
	return predicate.Clan(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Clan {
	return predicate.Clan(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Clan {
	return predicate.Clan(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Clan {
	return predicate.Clan(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Clan {
	return predicate.Clan(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Clan {
	return predicate.Clan(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Clan {
	return predicate.Clan(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Clan {
	return predicate.Clan(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Clan {
	return predicate.Clan(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Clan {
	return predicate.Clan(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Clan {
	return predicate.Clan(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Clan {
	return predicate.Clan(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Clan {
	return predicate.Clan(sql.FieldContainsFold(FieldName, v))
}

// EmblemIDEQ applies the EQ predicate on the "emblem_id" field.
func EmblemIDEQ(v string) predicate.Clan {
	return predicate.Clan(sql.FieldEQ(FieldEmblemID, v))
}

// EmblemIDNEQ applies the NEQ predicate on the "emblem_id" field.
func EmblemIDNEQ(v string) predicate.Clan {
	return predicate.Clan(sql.FieldNEQ(FieldEmblemID, v))
}

// EmblemIDIn applies the In predicate on the "emblem_id" field.
func EmblemIDIn(vs ...string) predicate.Clan {
	return predicate.Clan(sql.FieldIn(FieldEmblemID, vs...))
}

// EmblemIDNotIn applies the NotIn predicate on the "emblem_id" field.
func EmblemIDNotIn(vs ...string) predicate.Clan {
	return predicate.Clan(sql.FieldNotIn(FieldEmblemID, vs...))
}

// EmblemIDGT applies the GT predicate on the "emblem_id" field.
func EmblemIDGT(v string) predicate.Clan {
	return predicate.Clan(sql.FieldGT(FieldEmblemID, v))
}

// EmblemIDGTE applies the GTE predicate on the "emblem_id" field.
func EmblemIDGTE(v string) predicate.Clan {
	return predicate.Clan(sql.FieldGTE(FieldEmblemID, v))
}

// EmblemIDLT applies the LT predicate on the "emblem_id" field.
func EmblemIDLT(v string) predicate.Clan {
	return predicate.Clan(sql.FieldLT(FieldEmblemID, v))
}

// EmblemIDLTE applies the LTE predicate on the "emblem_id" field.
func EmblemIDLTE(v string) predicate.Clan {
	return predicate.Clan(sql.FieldLTE(FieldEmblemID, v))
}

// EmblemIDContains applies the Contains predicate on the "emblem_id" field.
func EmblemIDContains(v string) predicate.Clan {
	return predicate.Clan(sql.FieldContains(FieldEmblemID, v))
}

// EmblemIDHasPrefix applies the HasPrefix predicate on the "emblem_id" field.
func EmblemIDHasPrefix(v string) predicate.Clan {
	return predicate.Clan(sql.FieldHasPrefix(FieldEmblemID, v))
}

// EmblemIDHasSuffix applies the HasSuffix predicate on the "emblem_id" field.
func EmblemIDHasSuffix(v string) predicate.Clan {
	return predicate.Clan(sql.FieldHasSuffix(FieldEmblemID, v))
}

// EmblemIDIsNil applies the IsNil predicate on the "emblem_id" field.
func EmblemIDIsNil() predicate.Clan {
	return predicate.Clan(sql.FieldIsNull(FieldEmblemID))
}

// EmblemIDNotNil applies the NotNil predicate on the "emblem_id" field.
func EmblemIDNotNil() predicate.Clan {
	return predicate.Clan(sql.FieldNotNull(FieldEmblemID))
}

// EmblemIDEqualFold applies the EqualFold predicate on the "emblem_id" field.
func EmblemIDEqualFold(v string) predicate.Clan {
	return predicate.Clan(sql.FieldEqualFold(FieldEmblemID, v))
}

// EmblemIDContainsFold applies the ContainsFold predicate on the "emblem_id" field.
func EmblemIDContainsFold(v string) predicate.Clan {
	return predicate.Clan(sql.FieldContainsFold(FieldEmblemID, v))
}

// HasAccounts applies the HasEdge predicate on the "accounts" edge.
func HasAccounts() predicate.Clan {
	return predicate.Clan(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AccountsTable, AccountsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccountsWith applies the HasEdge predicate on the "accounts" edge with a given conditions (other predicates).
func HasAccountsWith(preds ...predicate.Account) predicate.Clan {
	return predicate.Clan(func(s *sql.Selector) {
		step := newAccountsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Clan) predicate.Clan {
	return predicate.Clan(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Clan) predicate.Clan {
	return predicate.Clan(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Clan) predicate.Clan {
	return predicate.Clan(sql.NotPredicates(p))
}
