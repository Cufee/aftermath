// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/vehicleaverage"
	"github.com/cufee/aftermath/internal/stats/frame"
)

// VehicleAverageCreate is the builder for creating a VehicleAverage entity.
type VehicleAverageCreate struct {
	config
	mutation *VehicleAverageMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (vac *VehicleAverageCreate) SetCreatedAt(i int) *VehicleAverageCreate {
	vac.mutation.SetCreatedAt(i)
	return vac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vac *VehicleAverageCreate) SetNillableCreatedAt(i *int) *VehicleAverageCreate {
	if i != nil {
		vac.SetCreatedAt(*i)
	}
	return vac
}

// SetUpdatedAt sets the "updated_at" field.
func (vac *VehicleAverageCreate) SetUpdatedAt(i int) *VehicleAverageCreate {
	vac.mutation.SetUpdatedAt(i)
	return vac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vac *VehicleAverageCreate) SetNillableUpdatedAt(i *int) *VehicleAverageCreate {
	if i != nil {
		vac.SetUpdatedAt(*i)
	}
	return vac
}

// SetData sets the "data" field.
func (vac *VehicleAverageCreate) SetData(mf map[string]frame.StatsFrame) *VehicleAverageCreate {
	vac.mutation.SetData(mf)
	return vac
}

// SetID sets the "id" field.
func (vac *VehicleAverageCreate) SetID(s string) *VehicleAverageCreate {
	vac.mutation.SetID(s)
	return vac
}

// Mutation returns the VehicleAverageMutation object of the builder.
func (vac *VehicleAverageCreate) Mutation() *VehicleAverageMutation {
	return vac.mutation
}

// Save creates the VehicleAverage in the database.
func (vac *VehicleAverageCreate) Save(ctx context.Context) (*VehicleAverage, error) {
	vac.defaults()
	return withHooks(ctx, vac.sqlSave, vac.mutation, vac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vac *VehicleAverageCreate) SaveX(ctx context.Context) *VehicleAverage {
	v, err := vac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vac *VehicleAverageCreate) Exec(ctx context.Context) error {
	_, err := vac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vac *VehicleAverageCreate) ExecX(ctx context.Context) {
	if err := vac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vac *VehicleAverageCreate) defaults() {
	if _, ok := vac.mutation.CreatedAt(); !ok {
		v := vehicleaverage.DefaultCreatedAt()
		vac.mutation.SetCreatedAt(v)
	}
	if _, ok := vac.mutation.UpdatedAt(); !ok {
		v := vehicleaverage.DefaultUpdatedAt()
		vac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vac *VehicleAverageCreate) check() error {
	if _, ok := vac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "VehicleAverage.created_at"`)}
	}
	if _, ok := vac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "VehicleAverage.updated_at"`)}
	}
	if _, ok := vac.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`db: missing required field "VehicleAverage.data"`)}
	}
	return nil
}

func (vac *VehicleAverageCreate) sqlSave(ctx context.Context) (*VehicleAverage, error) {
	if err := vac.check(); err != nil {
		return nil, err
	}
	_node, _spec := vac.createSpec()
	if err := sqlgraph.CreateNode(ctx, vac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected VehicleAverage.ID type: %T", _spec.ID.Value)
		}
	}
	vac.mutation.id = &_node.ID
	vac.mutation.done = true
	return _node, nil
}

func (vac *VehicleAverageCreate) createSpec() (*VehicleAverage, *sqlgraph.CreateSpec) {
	var (
		_node = &VehicleAverage{config: vac.config}
		_spec = sqlgraph.NewCreateSpec(vehicleaverage.Table, sqlgraph.NewFieldSpec(vehicleaverage.FieldID, field.TypeString))
	)
	if id, ok := vac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vac.mutation.CreatedAt(); ok {
		_spec.SetField(vehicleaverage.FieldCreatedAt, field.TypeInt, value)
		_node.CreatedAt = value
	}
	if value, ok := vac.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicleaverage.FieldUpdatedAt, field.TypeInt, value)
		_node.UpdatedAt = value
	}
	if value, ok := vac.mutation.Data(); ok {
		_spec.SetField(vehicleaverage.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	return _node, _spec
}

// VehicleAverageCreateBulk is the builder for creating many VehicleAverage entities in bulk.
type VehicleAverageCreateBulk struct {
	config
	err      error
	builders []*VehicleAverageCreate
}

// Save creates the VehicleAverage entities in the database.
func (vacb *VehicleAverageCreateBulk) Save(ctx context.Context) ([]*VehicleAverage, error) {
	if vacb.err != nil {
		return nil, vacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vacb.builders))
	nodes := make([]*VehicleAverage, len(vacb.builders))
	mutators := make([]Mutator, len(vacb.builders))
	for i := range vacb.builders {
		func(i int, root context.Context) {
			builder := vacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VehicleAverageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vacb *VehicleAverageCreateBulk) SaveX(ctx context.Context) []*VehicleAverage {
	v, err := vacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vacb *VehicleAverageCreateBulk) Exec(ctx context.Context) error {
	_, err := vacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vacb *VehicleAverageCreateBulk) ExecX(ctx context.Context) {
	if err := vacb.Exec(ctx); err != nil {
		panic(err)
	}
}
