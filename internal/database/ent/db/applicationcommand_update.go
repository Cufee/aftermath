// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/applicationcommand"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
)

// ApplicationCommandUpdate is the builder for updating ApplicationCommand entities.
type ApplicationCommandUpdate struct {
	config
	hooks     []Hook
	mutation  *ApplicationCommandMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ApplicationCommandUpdate builder.
func (acu *ApplicationCommandUpdate) Where(ps ...predicate.ApplicationCommand) *ApplicationCommandUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetUpdatedAt sets the "updated_at" field.
func (acu *ApplicationCommandUpdate) SetUpdatedAt(t time.Time) *ApplicationCommandUpdate {
	acu.mutation.SetUpdatedAt(t)
	return acu
}

// SetName sets the "name" field.
func (acu *ApplicationCommandUpdate) SetName(s string) *ApplicationCommandUpdate {
	acu.mutation.SetName(s)
	return acu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acu *ApplicationCommandUpdate) SetNillableName(s *string) *ApplicationCommandUpdate {
	if s != nil {
		acu.SetName(*s)
	}
	return acu
}

// SetVersion sets the "version" field.
func (acu *ApplicationCommandUpdate) SetVersion(s string) *ApplicationCommandUpdate {
	acu.mutation.SetVersion(s)
	return acu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (acu *ApplicationCommandUpdate) SetNillableVersion(s *string) *ApplicationCommandUpdate {
	if s != nil {
		acu.SetVersion(*s)
	}
	return acu
}

// SetOptionsHash sets the "options_hash" field.
func (acu *ApplicationCommandUpdate) SetOptionsHash(s string) *ApplicationCommandUpdate {
	acu.mutation.SetOptionsHash(s)
	return acu
}

// SetNillableOptionsHash sets the "options_hash" field if the given value is not nil.
func (acu *ApplicationCommandUpdate) SetNillableOptionsHash(s *string) *ApplicationCommandUpdate {
	if s != nil {
		acu.SetOptionsHash(*s)
	}
	return acu
}

// Mutation returns the ApplicationCommandMutation object of the builder.
func (acu *ApplicationCommandUpdate) Mutation() *ApplicationCommandMutation {
	return acu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *ApplicationCommandUpdate) Save(ctx context.Context) (int, error) {
	acu.defaults()
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *ApplicationCommandUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *ApplicationCommandUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *ApplicationCommandUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acu *ApplicationCommandUpdate) defaults() {
	if _, ok := acu.mutation.UpdatedAt(); !ok {
		v := applicationcommand.UpdateDefaultUpdatedAt()
		acu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acu *ApplicationCommandUpdate) check() error {
	if v, ok := acu.mutation.Name(); ok {
		if err := applicationcommand.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "ApplicationCommand.name": %w`, err)}
		}
	}
	if v, ok := acu.mutation.Version(); ok {
		if err := applicationcommand.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`db: validator failed for field "ApplicationCommand.version": %w`, err)}
		}
	}
	if v, ok := acu.mutation.OptionsHash(); ok {
		if err := applicationcommand.OptionsHashValidator(v); err != nil {
			return &ValidationError{Name: "options_hash", err: fmt.Errorf(`db: validator failed for field "ApplicationCommand.options_hash": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acu *ApplicationCommandUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApplicationCommandUpdate {
	acu.modifiers = append(acu.modifiers, modifiers...)
	return acu
}

func (acu *ApplicationCommandUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := acu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(applicationcommand.Table, applicationcommand.Columns, sqlgraph.NewFieldSpec(applicationcommand.FieldID, field.TypeString))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.UpdatedAt(); ok {
		_spec.SetField(applicationcommand.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acu.mutation.Name(); ok {
		_spec.SetField(applicationcommand.FieldName, field.TypeString, value)
	}
	if value, ok := acu.mutation.Version(); ok {
		_spec.SetField(applicationcommand.FieldVersion, field.TypeString, value)
	}
	if value, ok := acu.mutation.OptionsHash(); ok {
		_spec.SetField(applicationcommand.FieldOptionsHash, field.TypeString, value)
	}
	_spec.AddModifiers(acu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationcommand.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// ApplicationCommandUpdateOne is the builder for updating a single ApplicationCommand entity.
type ApplicationCommandUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ApplicationCommandMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (acuo *ApplicationCommandUpdateOne) SetUpdatedAt(t time.Time) *ApplicationCommandUpdateOne {
	acuo.mutation.SetUpdatedAt(t)
	return acuo
}

// SetName sets the "name" field.
func (acuo *ApplicationCommandUpdateOne) SetName(s string) *ApplicationCommandUpdateOne {
	acuo.mutation.SetName(s)
	return acuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (acuo *ApplicationCommandUpdateOne) SetNillableName(s *string) *ApplicationCommandUpdateOne {
	if s != nil {
		acuo.SetName(*s)
	}
	return acuo
}

// SetVersion sets the "version" field.
func (acuo *ApplicationCommandUpdateOne) SetVersion(s string) *ApplicationCommandUpdateOne {
	acuo.mutation.SetVersion(s)
	return acuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (acuo *ApplicationCommandUpdateOne) SetNillableVersion(s *string) *ApplicationCommandUpdateOne {
	if s != nil {
		acuo.SetVersion(*s)
	}
	return acuo
}

// SetOptionsHash sets the "options_hash" field.
func (acuo *ApplicationCommandUpdateOne) SetOptionsHash(s string) *ApplicationCommandUpdateOne {
	acuo.mutation.SetOptionsHash(s)
	return acuo
}

// SetNillableOptionsHash sets the "options_hash" field if the given value is not nil.
func (acuo *ApplicationCommandUpdateOne) SetNillableOptionsHash(s *string) *ApplicationCommandUpdateOne {
	if s != nil {
		acuo.SetOptionsHash(*s)
	}
	return acuo
}

// Mutation returns the ApplicationCommandMutation object of the builder.
func (acuo *ApplicationCommandUpdateOne) Mutation() *ApplicationCommandMutation {
	return acuo.mutation
}

// Where appends a list predicates to the ApplicationCommandUpdate builder.
func (acuo *ApplicationCommandUpdateOne) Where(ps ...predicate.ApplicationCommand) *ApplicationCommandUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *ApplicationCommandUpdateOne) Select(field string, fields ...string) *ApplicationCommandUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated ApplicationCommand entity.
func (acuo *ApplicationCommandUpdateOne) Save(ctx context.Context) (*ApplicationCommand, error) {
	acuo.defaults()
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *ApplicationCommandUpdateOne) SaveX(ctx context.Context) *ApplicationCommand {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *ApplicationCommandUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *ApplicationCommandUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acuo *ApplicationCommandUpdateOne) defaults() {
	if _, ok := acuo.mutation.UpdatedAt(); !ok {
		v := applicationcommand.UpdateDefaultUpdatedAt()
		acuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acuo *ApplicationCommandUpdateOne) check() error {
	if v, ok := acuo.mutation.Name(); ok {
		if err := applicationcommand.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "ApplicationCommand.name": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.Version(); ok {
		if err := applicationcommand.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`db: validator failed for field "ApplicationCommand.version": %w`, err)}
		}
	}
	if v, ok := acuo.mutation.OptionsHash(); ok {
		if err := applicationcommand.OptionsHashValidator(v); err != nil {
			return &ValidationError{Name: "options_hash", err: fmt.Errorf(`db: validator failed for field "ApplicationCommand.options_hash": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (acuo *ApplicationCommandUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ApplicationCommandUpdateOne {
	acuo.modifiers = append(acuo.modifiers, modifiers...)
	return acuo
}

func (acuo *ApplicationCommandUpdateOne) sqlSave(ctx context.Context) (_node *ApplicationCommand, err error) {
	if err := acuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(applicationcommand.Table, applicationcommand.Columns, sqlgraph.NewFieldSpec(applicationcommand.FieldID, field.TypeString))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "ApplicationCommand.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, applicationcommand.FieldID)
		for _, f := range fields {
			if !applicationcommand.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != applicationcommand.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.UpdatedAt(); ok {
		_spec.SetField(applicationcommand.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := acuo.mutation.Name(); ok {
		_spec.SetField(applicationcommand.FieldName, field.TypeString, value)
	}
	if value, ok := acuo.mutation.Version(); ok {
		_spec.SetField(applicationcommand.FieldVersion, field.TypeString, value)
	}
	if value, ok := acuo.mutation.OptionsHash(); ok {
		_spec.SetField(applicationcommand.FieldOptionsHash, field.TypeString, value)
	}
	_spec.AddModifiers(acuo.modifiers...)
	_node = &ApplicationCommand{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{applicationcommand.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
