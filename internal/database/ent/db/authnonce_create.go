// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/authnonce"
)

// AuthNonceCreate is the builder for creating a AuthNonce entity.
type AuthNonceCreate struct {
	config
	mutation *AuthNonceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (anc *AuthNonceCreate) SetCreatedAt(t time.Time) *AuthNonceCreate {
	anc.mutation.SetCreatedAt(t)
	return anc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (anc *AuthNonceCreate) SetNillableCreatedAt(t *time.Time) *AuthNonceCreate {
	if t != nil {
		anc.SetCreatedAt(*t)
	}
	return anc
}

// SetUpdatedAt sets the "updated_at" field.
func (anc *AuthNonceCreate) SetUpdatedAt(t time.Time) *AuthNonceCreate {
	anc.mutation.SetUpdatedAt(t)
	return anc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (anc *AuthNonceCreate) SetNillableUpdatedAt(t *time.Time) *AuthNonceCreate {
	if t != nil {
		anc.SetUpdatedAt(*t)
	}
	return anc
}

// SetActive sets the "active" field.
func (anc *AuthNonceCreate) SetActive(b bool) *AuthNonceCreate {
	anc.mutation.SetActive(b)
	return anc
}

// SetExpiresAt sets the "expires_at" field.
func (anc *AuthNonceCreate) SetExpiresAt(t time.Time) *AuthNonceCreate {
	anc.mutation.SetExpiresAt(t)
	return anc
}

// SetIdentifier sets the "identifier" field.
func (anc *AuthNonceCreate) SetIdentifier(s string) *AuthNonceCreate {
	anc.mutation.SetIdentifier(s)
	return anc
}

// SetPublicID sets the "public_id" field.
func (anc *AuthNonceCreate) SetPublicID(s string) *AuthNonceCreate {
	anc.mutation.SetPublicID(s)
	return anc
}

// SetMetadata sets the "metadata" field.
func (anc *AuthNonceCreate) SetMetadata(m map[string]string) *AuthNonceCreate {
	anc.mutation.SetMetadata(m)
	return anc
}

// SetID sets the "id" field.
func (anc *AuthNonceCreate) SetID(s string) *AuthNonceCreate {
	anc.mutation.SetID(s)
	return anc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (anc *AuthNonceCreate) SetNillableID(s *string) *AuthNonceCreate {
	if s != nil {
		anc.SetID(*s)
	}
	return anc
}

// Mutation returns the AuthNonceMutation object of the builder.
func (anc *AuthNonceCreate) Mutation() *AuthNonceMutation {
	return anc.mutation
}

// Save creates the AuthNonce in the database.
func (anc *AuthNonceCreate) Save(ctx context.Context) (*AuthNonce, error) {
	anc.defaults()
	return withHooks(ctx, anc.sqlSave, anc.mutation, anc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (anc *AuthNonceCreate) SaveX(ctx context.Context) *AuthNonce {
	v, err := anc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (anc *AuthNonceCreate) Exec(ctx context.Context) error {
	_, err := anc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (anc *AuthNonceCreate) ExecX(ctx context.Context) {
	if err := anc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (anc *AuthNonceCreate) defaults() {
	if _, ok := anc.mutation.CreatedAt(); !ok {
		v := authnonce.DefaultCreatedAt()
		anc.mutation.SetCreatedAt(v)
	}
	if _, ok := anc.mutation.UpdatedAt(); !ok {
		v := authnonce.DefaultUpdatedAt()
		anc.mutation.SetUpdatedAt(v)
	}
	if _, ok := anc.mutation.ID(); !ok {
		v := authnonce.DefaultID()
		anc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (anc *AuthNonceCreate) check() error {
	if _, ok := anc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "AuthNonce.created_at"`)}
	}
	if _, ok := anc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "AuthNonce.updated_at"`)}
	}
	if _, ok := anc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`db: missing required field "AuthNonce.active"`)}
	}
	if _, ok := anc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`db: missing required field "AuthNonce.expires_at"`)}
	}
	if _, ok := anc.mutation.Identifier(); !ok {
		return &ValidationError{Name: "identifier", err: errors.New(`db: missing required field "AuthNonce.identifier"`)}
	}
	if v, ok := anc.mutation.Identifier(); ok {
		if err := authnonce.IdentifierValidator(v); err != nil {
			return &ValidationError{Name: "identifier", err: fmt.Errorf(`db: validator failed for field "AuthNonce.identifier": %w`, err)}
		}
	}
	if _, ok := anc.mutation.PublicID(); !ok {
		return &ValidationError{Name: "public_id", err: errors.New(`db: missing required field "AuthNonce.public_id"`)}
	}
	if v, ok := anc.mutation.PublicID(); ok {
		if err := authnonce.PublicIDValidator(v); err != nil {
			return &ValidationError{Name: "public_id", err: fmt.Errorf(`db: validator failed for field "AuthNonce.public_id": %w`, err)}
		}
	}
	if _, ok := anc.mutation.Metadata(); !ok {
		return &ValidationError{Name: "metadata", err: errors.New(`db: missing required field "AuthNonce.metadata"`)}
	}
	return nil
}

func (anc *AuthNonceCreate) sqlSave(ctx context.Context) (*AuthNonce, error) {
	if err := anc.check(); err != nil {
		return nil, err
	}
	_node, _spec := anc.createSpec()
	if err := sqlgraph.CreateNode(ctx, anc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AuthNonce.ID type: %T", _spec.ID.Value)
		}
	}
	anc.mutation.id = &_node.ID
	anc.mutation.done = true
	return _node, nil
}

func (anc *AuthNonceCreate) createSpec() (*AuthNonce, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthNonce{config: anc.config}
		_spec = sqlgraph.NewCreateSpec(authnonce.Table, sqlgraph.NewFieldSpec(authnonce.FieldID, field.TypeString))
	)
	if id, ok := anc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := anc.mutation.CreatedAt(); ok {
		_spec.SetField(authnonce.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := anc.mutation.UpdatedAt(); ok {
		_spec.SetField(authnonce.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := anc.mutation.Active(); ok {
		_spec.SetField(authnonce.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := anc.mutation.ExpiresAt(); ok {
		_spec.SetField(authnonce.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := anc.mutation.Identifier(); ok {
		_spec.SetField(authnonce.FieldIdentifier, field.TypeString, value)
		_node.Identifier = value
	}
	if value, ok := anc.mutation.PublicID(); ok {
		_spec.SetField(authnonce.FieldPublicID, field.TypeString, value)
		_node.PublicID = value
	}
	if value, ok := anc.mutation.Metadata(); ok {
		_spec.SetField(authnonce.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	return _node, _spec
}

// AuthNonceCreateBulk is the builder for creating many AuthNonce entities in bulk.
type AuthNonceCreateBulk struct {
	config
	err      error
	builders []*AuthNonceCreate
}

// Save creates the AuthNonce entities in the database.
func (ancb *AuthNonceCreateBulk) Save(ctx context.Context) ([]*AuthNonce, error) {
	if ancb.err != nil {
		return nil, ancb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ancb.builders))
	nodes := make([]*AuthNonce, len(ancb.builders))
	mutators := make([]Mutator, len(ancb.builders))
	for i := range ancb.builders {
		func(i int, root context.Context) {
			builder := ancb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthNonceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ancb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ancb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ancb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ancb *AuthNonceCreateBulk) SaveX(ctx context.Context) []*AuthNonce {
	v, err := ancb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ancb *AuthNonceCreateBulk) Exec(ctx context.Context) error {
	_, err := ancb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ancb *AuthNonceCreateBulk) ExecX(ctx context.Context) {
	if err := ancb.Exec(ctx); err != nil {
		panic(err)
	}
}
