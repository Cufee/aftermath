// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"github.com/cufee/aftermath/internal/database/ent/db/widgetsettings"
	"github.com/cufee/aftermath/internal/database/models"
)

// WidgetSettingsUpdate is the builder for updating WidgetSettings entities.
type WidgetSettingsUpdate struct {
	config
	hooks     []Hook
	mutation  *WidgetSettingsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WidgetSettingsUpdate builder.
func (wsu *WidgetSettingsUpdate) Where(ps ...predicate.WidgetSettings) *WidgetSettingsUpdate {
	wsu.mutation.Where(ps...)
	return wsu
}

// SetUpdatedAt sets the "updated_at" field.
func (wsu *WidgetSettingsUpdate) SetUpdatedAt(t time.Time) *WidgetSettingsUpdate {
	wsu.mutation.SetUpdatedAt(t)
	return wsu
}

// SetReferenceID sets the "reference_id" field.
func (wsu *WidgetSettingsUpdate) SetReferenceID(s string) *WidgetSettingsUpdate {
	wsu.mutation.SetReferenceID(s)
	return wsu
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (wsu *WidgetSettingsUpdate) SetNillableReferenceID(s *string) *WidgetSettingsUpdate {
	if s != nil {
		wsu.SetReferenceID(*s)
	}
	return wsu
}

// SetTitle sets the "title" field.
func (wsu *WidgetSettingsUpdate) SetTitle(s string) *WidgetSettingsUpdate {
	wsu.mutation.SetTitle(s)
	return wsu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (wsu *WidgetSettingsUpdate) SetNillableTitle(s *string) *WidgetSettingsUpdate {
	if s != nil {
		wsu.SetTitle(*s)
	}
	return wsu
}

// ClearTitle clears the value of the "title" field.
func (wsu *WidgetSettingsUpdate) ClearTitle() *WidgetSettingsUpdate {
	wsu.mutation.ClearTitle()
	return wsu
}

// SetSessionFrom sets the "session_from" field.
func (wsu *WidgetSettingsUpdate) SetSessionFrom(t time.Time) *WidgetSettingsUpdate {
	wsu.mutation.SetSessionFrom(t)
	return wsu
}

// SetNillableSessionFrom sets the "session_from" field if the given value is not nil.
func (wsu *WidgetSettingsUpdate) SetNillableSessionFrom(t *time.Time) *WidgetSettingsUpdate {
	if t != nil {
		wsu.SetSessionFrom(*t)
	}
	return wsu
}

// ClearSessionFrom clears the value of the "session_from" field.
func (wsu *WidgetSettingsUpdate) ClearSessionFrom() *WidgetSettingsUpdate {
	wsu.mutation.ClearSessionFrom()
	return wsu
}

// SetMetadata sets the "metadata" field.
func (wsu *WidgetSettingsUpdate) SetMetadata(m map[string]interface{}) *WidgetSettingsUpdate {
	wsu.mutation.SetMetadata(m)
	return wsu
}

// SetStyles sets the "styles" field.
func (wsu *WidgetSettingsUpdate) SetStyles(ms models.WidgetStyling) *WidgetSettingsUpdate {
	wsu.mutation.SetStyles(ms)
	return wsu
}

// SetNillableStyles sets the "styles" field if the given value is not nil.
func (wsu *WidgetSettingsUpdate) SetNillableStyles(ms *models.WidgetStyling) *WidgetSettingsUpdate {
	if ms != nil {
		wsu.SetStyles(*ms)
	}
	return wsu
}

// Mutation returns the WidgetSettingsMutation object of the builder.
func (wsu *WidgetSettingsUpdate) Mutation() *WidgetSettingsMutation {
	return wsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wsu *WidgetSettingsUpdate) Save(ctx context.Context) (int, error) {
	wsu.defaults()
	return withHooks(ctx, wsu.sqlSave, wsu.mutation, wsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsu *WidgetSettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := wsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wsu *WidgetSettingsUpdate) Exec(ctx context.Context) error {
	_, err := wsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsu *WidgetSettingsUpdate) ExecX(ctx context.Context) {
	if err := wsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsu *WidgetSettingsUpdate) defaults() {
	if _, ok := wsu.mutation.UpdatedAt(); !ok {
		v := widgetsettings.UpdateDefaultUpdatedAt()
		wsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wsu *WidgetSettingsUpdate) check() error {
	if _, ok := wsu.mutation.UserID(); wsu.mutation.UserCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "WidgetSettings.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wsu *WidgetSettingsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WidgetSettingsUpdate {
	wsu.modifiers = append(wsu.modifiers, modifiers...)
	return wsu
}

func (wsu *WidgetSettingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(widgetsettings.Table, widgetsettings.Columns, sqlgraph.NewFieldSpec(widgetsettings.FieldID, field.TypeString))
	if ps := wsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsu.mutation.UpdatedAt(); ok {
		_spec.SetField(widgetsettings.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wsu.mutation.ReferenceID(); ok {
		_spec.SetField(widgetsettings.FieldReferenceID, field.TypeString, value)
	}
	if value, ok := wsu.mutation.Title(); ok {
		_spec.SetField(widgetsettings.FieldTitle, field.TypeString, value)
	}
	if wsu.mutation.TitleCleared() {
		_spec.ClearField(widgetsettings.FieldTitle, field.TypeString)
	}
	if value, ok := wsu.mutation.SessionFrom(); ok {
		_spec.SetField(widgetsettings.FieldSessionFrom, field.TypeTime, value)
	}
	if wsu.mutation.SessionFromCleared() {
		_spec.ClearField(widgetsettings.FieldSessionFrom, field.TypeTime)
	}
	if value, ok := wsu.mutation.Metadata(); ok {
		_spec.SetField(widgetsettings.FieldMetadata, field.TypeJSON, value)
	}
	if value, ok := wsu.mutation.Styles(); ok {
		_spec.SetField(widgetsettings.FieldStyles, field.TypeJSON, value)
	}
	_spec.AddModifiers(wsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{widgetsettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wsu.mutation.done = true
	return n, nil
}

// WidgetSettingsUpdateOne is the builder for updating a single WidgetSettings entity.
type WidgetSettingsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WidgetSettingsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (wsuo *WidgetSettingsUpdateOne) SetUpdatedAt(t time.Time) *WidgetSettingsUpdateOne {
	wsuo.mutation.SetUpdatedAt(t)
	return wsuo
}

// SetReferenceID sets the "reference_id" field.
func (wsuo *WidgetSettingsUpdateOne) SetReferenceID(s string) *WidgetSettingsUpdateOne {
	wsuo.mutation.SetReferenceID(s)
	return wsuo
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (wsuo *WidgetSettingsUpdateOne) SetNillableReferenceID(s *string) *WidgetSettingsUpdateOne {
	if s != nil {
		wsuo.SetReferenceID(*s)
	}
	return wsuo
}

// SetTitle sets the "title" field.
func (wsuo *WidgetSettingsUpdateOne) SetTitle(s string) *WidgetSettingsUpdateOne {
	wsuo.mutation.SetTitle(s)
	return wsuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (wsuo *WidgetSettingsUpdateOne) SetNillableTitle(s *string) *WidgetSettingsUpdateOne {
	if s != nil {
		wsuo.SetTitle(*s)
	}
	return wsuo
}

// ClearTitle clears the value of the "title" field.
func (wsuo *WidgetSettingsUpdateOne) ClearTitle() *WidgetSettingsUpdateOne {
	wsuo.mutation.ClearTitle()
	return wsuo
}

// SetSessionFrom sets the "session_from" field.
func (wsuo *WidgetSettingsUpdateOne) SetSessionFrom(t time.Time) *WidgetSettingsUpdateOne {
	wsuo.mutation.SetSessionFrom(t)
	return wsuo
}

// SetNillableSessionFrom sets the "session_from" field if the given value is not nil.
func (wsuo *WidgetSettingsUpdateOne) SetNillableSessionFrom(t *time.Time) *WidgetSettingsUpdateOne {
	if t != nil {
		wsuo.SetSessionFrom(*t)
	}
	return wsuo
}

// ClearSessionFrom clears the value of the "session_from" field.
func (wsuo *WidgetSettingsUpdateOne) ClearSessionFrom() *WidgetSettingsUpdateOne {
	wsuo.mutation.ClearSessionFrom()
	return wsuo
}

// SetMetadata sets the "metadata" field.
func (wsuo *WidgetSettingsUpdateOne) SetMetadata(m map[string]interface{}) *WidgetSettingsUpdateOne {
	wsuo.mutation.SetMetadata(m)
	return wsuo
}

// SetStyles sets the "styles" field.
func (wsuo *WidgetSettingsUpdateOne) SetStyles(ms models.WidgetStyling) *WidgetSettingsUpdateOne {
	wsuo.mutation.SetStyles(ms)
	return wsuo
}

// SetNillableStyles sets the "styles" field if the given value is not nil.
func (wsuo *WidgetSettingsUpdateOne) SetNillableStyles(ms *models.WidgetStyling) *WidgetSettingsUpdateOne {
	if ms != nil {
		wsuo.SetStyles(*ms)
	}
	return wsuo
}

// Mutation returns the WidgetSettingsMutation object of the builder.
func (wsuo *WidgetSettingsUpdateOne) Mutation() *WidgetSettingsMutation {
	return wsuo.mutation
}

// Where appends a list predicates to the WidgetSettingsUpdate builder.
func (wsuo *WidgetSettingsUpdateOne) Where(ps ...predicate.WidgetSettings) *WidgetSettingsUpdateOne {
	wsuo.mutation.Where(ps...)
	return wsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wsuo *WidgetSettingsUpdateOne) Select(field string, fields ...string) *WidgetSettingsUpdateOne {
	wsuo.fields = append([]string{field}, fields...)
	return wsuo
}

// Save executes the query and returns the updated WidgetSettings entity.
func (wsuo *WidgetSettingsUpdateOne) Save(ctx context.Context) (*WidgetSettings, error) {
	wsuo.defaults()
	return withHooks(ctx, wsuo.sqlSave, wsuo.mutation, wsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsuo *WidgetSettingsUpdateOne) SaveX(ctx context.Context) *WidgetSettings {
	node, err := wsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wsuo *WidgetSettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := wsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsuo *WidgetSettingsUpdateOne) ExecX(ctx context.Context) {
	if err := wsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsuo *WidgetSettingsUpdateOne) defaults() {
	if _, ok := wsuo.mutation.UpdatedAt(); !ok {
		v := widgetsettings.UpdateDefaultUpdatedAt()
		wsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wsuo *WidgetSettingsUpdateOne) check() error {
	if _, ok := wsuo.mutation.UserID(); wsuo.mutation.UserCleared() && !ok {
		return errors.New(`db: clearing a required unique edge "WidgetSettings.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wsuo *WidgetSettingsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WidgetSettingsUpdateOne {
	wsuo.modifiers = append(wsuo.modifiers, modifiers...)
	return wsuo
}

func (wsuo *WidgetSettingsUpdateOne) sqlSave(ctx context.Context) (_node *WidgetSettings, err error) {
	if err := wsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(widgetsettings.Table, widgetsettings.Columns, sqlgraph.NewFieldSpec(widgetsettings.FieldID, field.TypeString))
	id, ok := wsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "WidgetSettings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, widgetsettings.FieldID)
		for _, f := range fields {
			if !widgetsettings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != widgetsettings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(widgetsettings.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wsuo.mutation.ReferenceID(); ok {
		_spec.SetField(widgetsettings.FieldReferenceID, field.TypeString, value)
	}
	if value, ok := wsuo.mutation.Title(); ok {
		_spec.SetField(widgetsettings.FieldTitle, field.TypeString, value)
	}
	if wsuo.mutation.TitleCleared() {
		_spec.ClearField(widgetsettings.FieldTitle, field.TypeString)
	}
	if value, ok := wsuo.mutation.SessionFrom(); ok {
		_spec.SetField(widgetsettings.FieldSessionFrom, field.TypeTime, value)
	}
	if wsuo.mutation.SessionFromCleared() {
		_spec.ClearField(widgetsettings.FieldSessionFrom, field.TypeTime)
	}
	if value, ok := wsuo.mutation.Metadata(); ok {
		_spec.SetField(widgetsettings.FieldMetadata, field.TypeJSON, value)
	}
	if value, ok := wsuo.mutation.Styles(); ok {
		_spec.SetField(widgetsettings.FieldStyles, field.TypeJSON, value)
	}
	_spec.AddModifiers(wsuo.modifiers...)
	_node = &WidgetSettings{config: wsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{widgetsettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wsuo.mutation.done = true
	return _node, nil
}
