// Code generated by ent, DO NOT EDIT.

package admessage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldEQ(FieldUpdatedAt, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldEQ(FieldEnabled, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v int) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldEQ(FieldWeight, v))
}

// Chance applies equality check predicate on the "chance" field. It's identical to ChanceEQ.
func Chance(v float32) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldEQ(FieldChance, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldLTE(FieldUpdatedAt, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldNEQ(FieldEnabled, v))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v int) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v int) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...int) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...int) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v int) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v int) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v int) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v int) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldLTE(FieldWeight, v))
}

// ChanceEQ applies the EQ predicate on the "chance" field.
func ChanceEQ(v float32) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldEQ(FieldChance, v))
}

// ChanceNEQ applies the NEQ predicate on the "chance" field.
func ChanceNEQ(v float32) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldNEQ(FieldChance, v))
}

// ChanceIn applies the In predicate on the "chance" field.
func ChanceIn(vs ...float32) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldIn(FieldChance, vs...))
}

// ChanceNotIn applies the NotIn predicate on the "chance" field.
func ChanceNotIn(vs ...float32) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldNotIn(FieldChance, vs...))
}

// ChanceGT applies the GT predicate on the "chance" field.
func ChanceGT(v float32) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldGT(FieldChance, v))
}

// ChanceGTE applies the GTE predicate on the "chance" field.
func ChanceGTE(v float32) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldGTE(FieldChance, v))
}

// ChanceLT applies the LT predicate on the "chance" field.
func ChanceLT(v float32) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldLT(FieldChance, v))
}

// ChanceLTE applies the LTE predicate on the "chance" field.
func ChanceLTE(v float32) predicate.AdMessage {
	return predicate.AdMessage(sql.FieldLTE(FieldChance, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.AdMessage {
	return predicate.AdMessage(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.AdMessage {
	return predicate.AdMessage(sql.FieldNotNull(FieldMetadata))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AdMessage) predicate.AdMessage {
	return predicate.AdMessage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AdMessage) predicate.AdMessage {
	return predicate.AdMessage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AdMessage) predicate.AdMessage {
	return predicate.AdMessage(sql.NotPredicates(p))
}
