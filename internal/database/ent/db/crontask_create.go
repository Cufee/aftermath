// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/crontask"
	"github.com/cufee/aftermath/internal/database/models"
)

// CronTaskCreate is the builder for creating a CronTask entity.
type CronTaskCreate struct {
	config
	mutation *CronTaskMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ctc *CronTaskCreate) SetCreatedAt(i int) *CronTaskCreate {
	ctc.mutation.SetCreatedAt(i)
	return ctc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctc *CronTaskCreate) SetNillableCreatedAt(i *int) *CronTaskCreate {
	if i != nil {
		ctc.SetCreatedAt(*i)
	}
	return ctc
}

// SetUpdatedAt sets the "updated_at" field.
func (ctc *CronTaskCreate) SetUpdatedAt(i int) *CronTaskCreate {
	ctc.mutation.SetUpdatedAt(i)
	return ctc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ctc *CronTaskCreate) SetNillableUpdatedAt(i *int) *CronTaskCreate {
	if i != nil {
		ctc.SetUpdatedAt(*i)
	}
	return ctc
}

// SetType sets the "type" field.
func (ctc *CronTaskCreate) SetType(s string) *CronTaskCreate {
	ctc.mutation.SetType(s)
	return ctc
}

// SetReferenceID sets the "reference_id" field.
func (ctc *CronTaskCreate) SetReferenceID(s string) *CronTaskCreate {
	ctc.mutation.SetReferenceID(s)
	return ctc
}

// SetTargets sets the "targets" field.
func (ctc *CronTaskCreate) SetTargets(s []string) *CronTaskCreate {
	ctc.mutation.SetTargets(s)
	return ctc
}

// SetStatus sets the "status" field.
func (ctc *CronTaskCreate) SetStatus(s string) *CronTaskCreate {
	ctc.mutation.SetStatus(s)
	return ctc
}

// SetScheduledAfter sets the "scheduled_after" field.
func (ctc *CronTaskCreate) SetScheduledAfter(i int) *CronTaskCreate {
	ctc.mutation.SetScheduledAfter(i)
	return ctc
}

// SetLastRun sets the "last_run" field.
func (ctc *CronTaskCreate) SetLastRun(i int) *CronTaskCreate {
	ctc.mutation.SetLastRun(i)
	return ctc
}

// SetLogs sets the "logs" field.
func (ctc *CronTaskCreate) SetLogs(ml []models.TaskLog) *CronTaskCreate {
	ctc.mutation.SetLogs(ml)
	return ctc
}

// SetData sets the "data" field.
func (ctc *CronTaskCreate) SetData(m map[string]interface{}) *CronTaskCreate {
	ctc.mutation.SetData(m)
	return ctc
}

// SetID sets the "id" field.
func (ctc *CronTaskCreate) SetID(s string) *CronTaskCreate {
	ctc.mutation.SetID(s)
	return ctc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ctc *CronTaskCreate) SetNillableID(s *string) *CronTaskCreate {
	if s != nil {
		ctc.SetID(*s)
	}
	return ctc
}

// Mutation returns the CronTaskMutation object of the builder.
func (ctc *CronTaskCreate) Mutation() *CronTaskMutation {
	return ctc.mutation
}

// Save creates the CronTask in the database.
func (ctc *CronTaskCreate) Save(ctx context.Context) (*CronTask, error) {
	ctc.defaults()
	return withHooks(ctx, ctc.sqlSave, ctc.mutation, ctc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *CronTaskCreate) SaveX(ctx context.Context) *CronTask {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *CronTaskCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *CronTaskCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctc *CronTaskCreate) defaults() {
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		v := crontask.DefaultCreatedAt()
		ctc.mutation.SetCreatedAt(v)
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		v := crontask.DefaultUpdatedAt()
		ctc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ctc.mutation.ID(); !ok {
		v := crontask.DefaultID()
		ctc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *CronTaskCreate) check() error {
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "CronTask.created_at"`)}
	}
	if _, ok := ctc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "CronTask.updated_at"`)}
	}
	if _, ok := ctc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "CronTask.type"`)}
	}
	if v, ok := ctc.mutation.GetType(); ok {
		if err := crontask.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "CronTask.type": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.ReferenceID(); !ok {
		return &ValidationError{Name: "reference_id", err: errors.New(`db: missing required field "CronTask.reference_id"`)}
	}
	if v, ok := ctc.mutation.ReferenceID(); ok {
		if err := crontask.ReferenceIDValidator(v); err != nil {
			return &ValidationError{Name: "reference_id", err: fmt.Errorf(`db: validator failed for field "CronTask.reference_id": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.Targets(); !ok {
		return &ValidationError{Name: "targets", err: errors.New(`db: missing required field "CronTask.targets"`)}
	}
	if _, ok := ctc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`db: missing required field "CronTask.status"`)}
	}
	if v, ok := ctc.mutation.Status(); ok {
		if err := crontask.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`db: validator failed for field "CronTask.status": %w`, err)}
		}
	}
	if _, ok := ctc.mutation.ScheduledAfter(); !ok {
		return &ValidationError{Name: "scheduled_after", err: errors.New(`db: missing required field "CronTask.scheduled_after"`)}
	}
	if _, ok := ctc.mutation.LastRun(); !ok {
		return &ValidationError{Name: "last_run", err: errors.New(`db: missing required field "CronTask.last_run"`)}
	}
	if _, ok := ctc.mutation.Logs(); !ok {
		return &ValidationError{Name: "logs", err: errors.New(`db: missing required field "CronTask.logs"`)}
	}
	if _, ok := ctc.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`db: missing required field "CronTask.data"`)}
	}
	return nil
}

func (ctc *CronTaskCreate) sqlSave(ctx context.Context) (*CronTask, error) {
	if err := ctc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CronTask.ID type: %T", _spec.ID.Value)
		}
	}
	ctc.mutation.id = &_node.ID
	ctc.mutation.done = true
	return _node, nil
}

func (ctc *CronTaskCreate) createSpec() (*CronTask, *sqlgraph.CreateSpec) {
	var (
		_node = &CronTask{config: ctc.config}
		_spec = sqlgraph.NewCreateSpec(crontask.Table, sqlgraph.NewFieldSpec(crontask.FieldID, field.TypeString))
	)
	if id, ok := ctc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ctc.mutation.CreatedAt(); ok {
		_spec.SetField(crontask.FieldCreatedAt, field.TypeInt, value)
		_node.CreatedAt = value
	}
	if value, ok := ctc.mutation.UpdatedAt(); ok {
		_spec.SetField(crontask.FieldUpdatedAt, field.TypeInt, value)
		_node.UpdatedAt = value
	}
	if value, ok := ctc.mutation.GetType(); ok {
		_spec.SetField(crontask.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ctc.mutation.ReferenceID(); ok {
		_spec.SetField(crontask.FieldReferenceID, field.TypeString, value)
		_node.ReferenceID = value
	}
	if value, ok := ctc.mutation.Targets(); ok {
		_spec.SetField(crontask.FieldTargets, field.TypeJSON, value)
		_node.Targets = value
	}
	if value, ok := ctc.mutation.Status(); ok {
		_spec.SetField(crontask.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ctc.mutation.ScheduledAfter(); ok {
		_spec.SetField(crontask.FieldScheduledAfter, field.TypeInt, value)
		_node.ScheduledAfter = value
	}
	if value, ok := ctc.mutation.LastRun(); ok {
		_spec.SetField(crontask.FieldLastRun, field.TypeInt, value)
		_node.LastRun = value
	}
	if value, ok := ctc.mutation.Logs(); ok {
		_spec.SetField(crontask.FieldLogs, field.TypeJSON, value)
		_node.Logs = value
	}
	if value, ok := ctc.mutation.Data(); ok {
		_spec.SetField(crontask.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	return _node, _spec
}

// CronTaskCreateBulk is the builder for creating many CronTask entities in bulk.
type CronTaskCreateBulk struct {
	config
	err      error
	builders []*CronTaskCreate
}

// Save creates the CronTask entities in the database.
func (ctcb *CronTaskCreateBulk) Save(ctx context.Context) ([]*CronTask, error) {
	if ctcb.err != nil {
		return nil, ctcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*CronTask, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CronTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *CronTaskCreateBulk) SaveX(ctx context.Context) []*CronTask {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *CronTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *CronTaskCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}
