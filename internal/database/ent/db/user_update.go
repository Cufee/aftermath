// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/discordinteraction"
	"github.com/cufee/aftermath/internal/database/ent/db/moderationrequest"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"github.com/cufee/aftermath/internal/database/ent/db/session"
	"github.com/cufee/aftermath/internal/database/ent/db/user"
	"github.com/cufee/aftermath/internal/database/ent/db/userconnection"
	"github.com/cufee/aftermath/internal/database/ent/db/usercontent"
	"github.com/cufee/aftermath/internal/database/ent/db/usersubscription"
	"github.com/cufee/aftermath/internal/database/ent/db/widgetsettings"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetPermissions sets the "permissions" field.
func (uu *UserUpdate) SetPermissions(s string) *UserUpdate {
	uu.mutation.SetPermissions(s)
	return uu
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePermissions(s *string) *UserUpdate {
	if s != nil {
		uu.SetPermissions(*s)
	}
	return uu
}

// SetFeatureFlags sets the "feature_flags" field.
func (uu *UserUpdate) SetFeatureFlags(s []string) *UserUpdate {
	uu.mutation.SetFeatureFlags(s)
	return uu
}

// AppendFeatureFlags appends s to the "feature_flags" field.
func (uu *UserUpdate) AppendFeatureFlags(s []string) *UserUpdate {
	uu.mutation.AppendFeatureFlags(s)
	return uu
}

// ClearFeatureFlags clears the value of the "feature_flags" field.
func (uu *UserUpdate) ClearFeatureFlags() *UserUpdate {
	uu.mutation.ClearFeatureFlags()
	return uu
}

// AddDiscordInteractionIDs adds the "discord_interactions" edge to the DiscordInteraction entity by IDs.
func (uu *UserUpdate) AddDiscordInteractionIDs(ids ...string) *UserUpdate {
	uu.mutation.AddDiscordInteractionIDs(ids...)
	return uu
}

// AddDiscordInteractions adds the "discord_interactions" edges to the DiscordInteraction entity.
func (uu *UserUpdate) AddDiscordInteractions(d ...*DiscordInteraction) *UserUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.AddDiscordInteractionIDs(ids...)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the UserSubscription entity by IDs.
func (uu *UserUpdate) AddSubscriptionIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSubscriptionIDs(ids...)
	return uu
}

// AddSubscriptions adds the "subscriptions" edges to the UserSubscription entity.
func (uu *UserUpdate) AddSubscriptions(u ...*UserSubscription) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddSubscriptionIDs(ids...)
}

// AddConnectionIDs adds the "connections" edge to the UserConnection entity by IDs.
func (uu *UserUpdate) AddConnectionIDs(ids ...string) *UserUpdate {
	uu.mutation.AddConnectionIDs(ids...)
	return uu
}

// AddConnections adds the "connections" edges to the UserConnection entity.
func (uu *UserUpdate) AddConnections(u ...*UserConnection) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddConnectionIDs(ids...)
}

// AddWidgetIDs adds the "widgets" edge to the WidgetSettings entity by IDs.
func (uu *UserUpdate) AddWidgetIDs(ids ...string) *UserUpdate {
	uu.mutation.AddWidgetIDs(ids...)
	return uu
}

// AddWidgets adds the "widgets" edges to the WidgetSettings entity.
func (uu *UserUpdate) AddWidgets(w ...*WidgetSettings) *UserUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.AddWidgetIDs(ids...)
}

// AddContentIDs adds the "content" edge to the UserContent entity by IDs.
func (uu *UserUpdate) AddContentIDs(ids ...string) *UserUpdate {
	uu.mutation.AddContentIDs(ids...)
	return uu
}

// AddContent adds the "content" edges to the UserContent entity.
func (uu *UserUpdate) AddContent(u ...*UserContent) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddContentIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uu *UserUpdate) AddSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSessionIDs(ids...)
	return uu
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uu *UserUpdate) AddSessions(s ...*Session) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSessionIDs(ids...)
}

// AddModerationRequestIDs adds the "moderation_requests" edge to the ModerationRequest entity by IDs.
func (uu *UserUpdate) AddModerationRequestIDs(ids ...string) *UserUpdate {
	uu.mutation.AddModerationRequestIDs(ids...)
	return uu
}

// AddModerationRequests adds the "moderation_requests" edges to the ModerationRequest entity.
func (uu *UserUpdate) AddModerationRequests(m ...*ModerationRequest) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddModerationRequestIDs(ids...)
}

// AddModerationActionIDs adds the "moderation_actions" edge to the ModerationRequest entity by IDs.
func (uu *UserUpdate) AddModerationActionIDs(ids ...string) *UserUpdate {
	uu.mutation.AddModerationActionIDs(ids...)
	return uu
}

// AddModerationActions adds the "moderation_actions" edges to the ModerationRequest entity.
func (uu *UserUpdate) AddModerationActions(m ...*ModerationRequest) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddModerationActionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearDiscordInteractions clears all "discord_interactions" edges to the DiscordInteraction entity.
func (uu *UserUpdate) ClearDiscordInteractions() *UserUpdate {
	uu.mutation.ClearDiscordInteractions()
	return uu
}

// RemoveDiscordInteractionIDs removes the "discord_interactions" edge to DiscordInteraction entities by IDs.
func (uu *UserUpdate) RemoveDiscordInteractionIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveDiscordInteractionIDs(ids...)
	return uu
}

// RemoveDiscordInteractions removes "discord_interactions" edges to DiscordInteraction entities.
func (uu *UserUpdate) RemoveDiscordInteractions(d ...*DiscordInteraction) *UserUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.RemoveDiscordInteractionIDs(ids...)
}

// ClearSubscriptions clears all "subscriptions" edges to the UserSubscription entity.
func (uu *UserUpdate) ClearSubscriptions() *UserUpdate {
	uu.mutation.ClearSubscriptions()
	return uu
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to UserSubscription entities by IDs.
func (uu *UserUpdate) RemoveSubscriptionIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSubscriptionIDs(ids...)
	return uu
}

// RemoveSubscriptions removes "subscriptions" edges to UserSubscription entities.
func (uu *UserUpdate) RemoveSubscriptions(u ...*UserSubscription) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveSubscriptionIDs(ids...)
}

// ClearConnections clears all "connections" edges to the UserConnection entity.
func (uu *UserUpdate) ClearConnections() *UserUpdate {
	uu.mutation.ClearConnections()
	return uu
}

// RemoveConnectionIDs removes the "connections" edge to UserConnection entities by IDs.
func (uu *UserUpdate) RemoveConnectionIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveConnectionIDs(ids...)
	return uu
}

// RemoveConnections removes "connections" edges to UserConnection entities.
func (uu *UserUpdate) RemoveConnections(u ...*UserConnection) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveConnectionIDs(ids...)
}

// ClearWidgets clears all "widgets" edges to the WidgetSettings entity.
func (uu *UserUpdate) ClearWidgets() *UserUpdate {
	uu.mutation.ClearWidgets()
	return uu
}

// RemoveWidgetIDs removes the "widgets" edge to WidgetSettings entities by IDs.
func (uu *UserUpdate) RemoveWidgetIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveWidgetIDs(ids...)
	return uu
}

// RemoveWidgets removes "widgets" edges to WidgetSettings entities.
func (uu *UserUpdate) RemoveWidgets(w ...*WidgetSettings) *UserUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.RemoveWidgetIDs(ids...)
}

// ClearContent clears all "content" edges to the UserContent entity.
func (uu *UserUpdate) ClearContent() *UserUpdate {
	uu.mutation.ClearContent()
	return uu
}

// RemoveContentIDs removes the "content" edge to UserContent entities by IDs.
func (uu *UserUpdate) RemoveContentIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveContentIDs(ids...)
	return uu
}

// RemoveContent removes "content" edges to UserContent entities.
func (uu *UserUpdate) RemoveContent(u ...*UserContent) *UserUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveContentIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (uu *UserUpdate) ClearSessions() *UserUpdate {
	uu.mutation.ClearSessions()
	return uu
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (uu *UserUpdate) RemoveSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSessionIDs(ids...)
	return uu
}

// RemoveSessions removes "sessions" edges to Session entities.
func (uu *UserUpdate) RemoveSessions(s ...*Session) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSessionIDs(ids...)
}

// ClearModerationRequests clears all "moderation_requests" edges to the ModerationRequest entity.
func (uu *UserUpdate) ClearModerationRequests() *UserUpdate {
	uu.mutation.ClearModerationRequests()
	return uu
}

// RemoveModerationRequestIDs removes the "moderation_requests" edge to ModerationRequest entities by IDs.
func (uu *UserUpdate) RemoveModerationRequestIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveModerationRequestIDs(ids...)
	return uu
}

// RemoveModerationRequests removes "moderation_requests" edges to ModerationRequest entities.
func (uu *UserUpdate) RemoveModerationRequests(m ...*ModerationRequest) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveModerationRequestIDs(ids...)
}

// ClearModerationActions clears all "moderation_actions" edges to the ModerationRequest entity.
func (uu *UserUpdate) ClearModerationActions() *UserUpdate {
	uu.mutation.ClearModerationActions()
	return uu
}

// RemoveModerationActionIDs removes the "moderation_actions" edge to ModerationRequest entities by IDs.
func (uu *UserUpdate) RemoveModerationActionIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveModerationActionIDs(ids...)
	return uu
}

// RemoveModerationActions removes "moderation_actions" edges to ModerationRequest entities.
func (uu *UserUpdate) RemoveModerationActions(m ...*ModerationRequest) *UserUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveModerationActionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.Permissions(); ok {
		_spec.SetField(user.FieldPermissions, field.TypeString, value)
	}
	if value, ok := uu.mutation.FeatureFlags(); ok {
		_spec.SetField(user.FieldFeatureFlags, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedFeatureFlags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldFeatureFlags, value)
		})
	}
	if uu.mutation.FeatureFlagsCleared() {
		_spec.ClearField(user.FieldFeatureFlags, field.TypeJSON)
	}
	if uu.mutation.DiscordInteractionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DiscordInteractionsTable,
			Columns: []string{user.DiscordInteractionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordinteraction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedDiscordInteractionsIDs(); len(nodes) > 0 && !uu.mutation.DiscordInteractionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DiscordInteractionsTable,
			Columns: []string{user.DiscordInteractionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordinteraction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.DiscordInteractionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DiscordInteractionsTable,
			Columns: []string{user.DiscordInteractionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordinteraction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubscriptionsTable,
			Columns: []string{user.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersubscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !uu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubscriptionsTable,
			Columns: []string{user.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersubscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubscriptionsTable,
			Columns: []string{user.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersubscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ConnectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConnectionsTable,
			Columns: []string{user.ConnectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconnection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedConnectionsIDs(); len(nodes) > 0 && !uu.mutation.ConnectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConnectionsTable,
			Columns: []string{user.ConnectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconnection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ConnectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConnectionsTable,
			Columns: []string{user.ConnectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconnection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.WidgetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WidgetsTable,
			Columns: []string{user.WidgetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(widgetsettings.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedWidgetsIDs(); len(nodes) > 0 && !uu.mutation.WidgetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WidgetsTable,
			Columns: []string{user.WidgetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(widgetsettings.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.WidgetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WidgetsTable,
			Columns: []string{user.WidgetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(widgetsettings.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContentTable,
			Columns: []string{user.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercontent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedContentIDs(); len(nodes) > 0 && !uu.mutation.ContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContentTable,
			Columns: []string{user.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercontent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContentTable,
			Columns: []string{user.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercontent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ModerationRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ModerationRequestsTable,
			Columns: []string{user.ModerationRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moderationrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedModerationRequestsIDs(); len(nodes) > 0 && !uu.mutation.ModerationRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ModerationRequestsTable,
			Columns: []string{user.ModerationRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moderationrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ModerationRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ModerationRequestsTable,
			Columns: []string{user.ModerationRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moderationrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ModerationActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ModerationActionsTable,
			Columns: []string{user.ModerationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moderationrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedModerationActionsIDs(); len(nodes) > 0 && !uu.mutation.ModerationActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ModerationActionsTable,
			Columns: []string{user.ModerationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moderationrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ModerationActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ModerationActionsTable,
			Columns: []string{user.ModerationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moderationrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetPermissions sets the "permissions" field.
func (uuo *UserUpdateOne) SetPermissions(s string) *UserUpdateOne {
	uuo.mutation.SetPermissions(s)
	return uuo
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePermissions(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPermissions(*s)
	}
	return uuo
}

// SetFeatureFlags sets the "feature_flags" field.
func (uuo *UserUpdateOne) SetFeatureFlags(s []string) *UserUpdateOne {
	uuo.mutation.SetFeatureFlags(s)
	return uuo
}

// AppendFeatureFlags appends s to the "feature_flags" field.
func (uuo *UserUpdateOne) AppendFeatureFlags(s []string) *UserUpdateOne {
	uuo.mutation.AppendFeatureFlags(s)
	return uuo
}

// ClearFeatureFlags clears the value of the "feature_flags" field.
func (uuo *UserUpdateOne) ClearFeatureFlags() *UserUpdateOne {
	uuo.mutation.ClearFeatureFlags()
	return uuo
}

// AddDiscordInteractionIDs adds the "discord_interactions" edge to the DiscordInteraction entity by IDs.
func (uuo *UserUpdateOne) AddDiscordInteractionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddDiscordInteractionIDs(ids...)
	return uuo
}

// AddDiscordInteractions adds the "discord_interactions" edges to the DiscordInteraction entity.
func (uuo *UserUpdateOne) AddDiscordInteractions(d ...*DiscordInteraction) *UserUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.AddDiscordInteractionIDs(ids...)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the UserSubscription entity by IDs.
func (uuo *UserUpdateOne) AddSubscriptionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSubscriptionIDs(ids...)
	return uuo
}

// AddSubscriptions adds the "subscriptions" edges to the UserSubscription entity.
func (uuo *UserUpdateOne) AddSubscriptions(u ...*UserSubscription) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddSubscriptionIDs(ids...)
}

// AddConnectionIDs adds the "connections" edge to the UserConnection entity by IDs.
func (uuo *UserUpdateOne) AddConnectionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddConnectionIDs(ids...)
	return uuo
}

// AddConnections adds the "connections" edges to the UserConnection entity.
func (uuo *UserUpdateOne) AddConnections(u ...*UserConnection) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddConnectionIDs(ids...)
}

// AddWidgetIDs adds the "widgets" edge to the WidgetSettings entity by IDs.
func (uuo *UserUpdateOne) AddWidgetIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddWidgetIDs(ids...)
	return uuo
}

// AddWidgets adds the "widgets" edges to the WidgetSettings entity.
func (uuo *UserUpdateOne) AddWidgets(w ...*WidgetSettings) *UserUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.AddWidgetIDs(ids...)
}

// AddContentIDs adds the "content" edge to the UserContent entity by IDs.
func (uuo *UserUpdateOne) AddContentIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddContentIDs(ids...)
	return uuo
}

// AddContent adds the "content" edges to the UserContent entity.
func (uuo *UserUpdateOne) AddContent(u ...*UserContent) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddContentIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uuo *UserUpdateOne) AddSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSessionIDs(ids...)
	return uuo
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uuo *UserUpdateOne) AddSessions(s ...*Session) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSessionIDs(ids...)
}

// AddModerationRequestIDs adds the "moderation_requests" edge to the ModerationRequest entity by IDs.
func (uuo *UserUpdateOne) AddModerationRequestIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddModerationRequestIDs(ids...)
	return uuo
}

// AddModerationRequests adds the "moderation_requests" edges to the ModerationRequest entity.
func (uuo *UserUpdateOne) AddModerationRequests(m ...*ModerationRequest) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddModerationRequestIDs(ids...)
}

// AddModerationActionIDs adds the "moderation_actions" edge to the ModerationRequest entity by IDs.
func (uuo *UserUpdateOne) AddModerationActionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddModerationActionIDs(ids...)
	return uuo
}

// AddModerationActions adds the "moderation_actions" edges to the ModerationRequest entity.
func (uuo *UserUpdateOne) AddModerationActions(m ...*ModerationRequest) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddModerationActionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearDiscordInteractions clears all "discord_interactions" edges to the DiscordInteraction entity.
func (uuo *UserUpdateOne) ClearDiscordInteractions() *UserUpdateOne {
	uuo.mutation.ClearDiscordInteractions()
	return uuo
}

// RemoveDiscordInteractionIDs removes the "discord_interactions" edge to DiscordInteraction entities by IDs.
func (uuo *UserUpdateOne) RemoveDiscordInteractionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveDiscordInteractionIDs(ids...)
	return uuo
}

// RemoveDiscordInteractions removes "discord_interactions" edges to DiscordInteraction entities.
func (uuo *UserUpdateOne) RemoveDiscordInteractions(d ...*DiscordInteraction) *UserUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.RemoveDiscordInteractionIDs(ids...)
}

// ClearSubscriptions clears all "subscriptions" edges to the UserSubscription entity.
func (uuo *UserUpdateOne) ClearSubscriptions() *UserUpdateOne {
	uuo.mutation.ClearSubscriptions()
	return uuo
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to UserSubscription entities by IDs.
func (uuo *UserUpdateOne) RemoveSubscriptionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSubscriptionIDs(ids...)
	return uuo
}

// RemoveSubscriptions removes "subscriptions" edges to UserSubscription entities.
func (uuo *UserUpdateOne) RemoveSubscriptions(u ...*UserSubscription) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveSubscriptionIDs(ids...)
}

// ClearConnections clears all "connections" edges to the UserConnection entity.
func (uuo *UserUpdateOne) ClearConnections() *UserUpdateOne {
	uuo.mutation.ClearConnections()
	return uuo
}

// RemoveConnectionIDs removes the "connections" edge to UserConnection entities by IDs.
func (uuo *UserUpdateOne) RemoveConnectionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveConnectionIDs(ids...)
	return uuo
}

// RemoveConnections removes "connections" edges to UserConnection entities.
func (uuo *UserUpdateOne) RemoveConnections(u ...*UserConnection) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveConnectionIDs(ids...)
}

// ClearWidgets clears all "widgets" edges to the WidgetSettings entity.
func (uuo *UserUpdateOne) ClearWidgets() *UserUpdateOne {
	uuo.mutation.ClearWidgets()
	return uuo
}

// RemoveWidgetIDs removes the "widgets" edge to WidgetSettings entities by IDs.
func (uuo *UserUpdateOne) RemoveWidgetIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveWidgetIDs(ids...)
	return uuo
}

// RemoveWidgets removes "widgets" edges to WidgetSettings entities.
func (uuo *UserUpdateOne) RemoveWidgets(w ...*WidgetSettings) *UserUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.RemoveWidgetIDs(ids...)
}

// ClearContent clears all "content" edges to the UserContent entity.
func (uuo *UserUpdateOne) ClearContent() *UserUpdateOne {
	uuo.mutation.ClearContent()
	return uuo
}

// RemoveContentIDs removes the "content" edge to UserContent entities by IDs.
func (uuo *UserUpdateOne) RemoveContentIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveContentIDs(ids...)
	return uuo
}

// RemoveContent removes "content" edges to UserContent entities.
func (uuo *UserUpdateOne) RemoveContent(u ...*UserContent) *UserUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveContentIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (uuo *UserUpdateOne) ClearSessions() *UserUpdateOne {
	uuo.mutation.ClearSessions()
	return uuo
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (uuo *UserUpdateOne) RemoveSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSessionIDs(ids...)
	return uuo
}

// RemoveSessions removes "sessions" edges to Session entities.
func (uuo *UserUpdateOne) RemoveSessions(s ...*Session) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSessionIDs(ids...)
}

// ClearModerationRequests clears all "moderation_requests" edges to the ModerationRequest entity.
func (uuo *UserUpdateOne) ClearModerationRequests() *UserUpdateOne {
	uuo.mutation.ClearModerationRequests()
	return uuo
}

// RemoveModerationRequestIDs removes the "moderation_requests" edge to ModerationRequest entities by IDs.
func (uuo *UserUpdateOne) RemoveModerationRequestIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveModerationRequestIDs(ids...)
	return uuo
}

// RemoveModerationRequests removes "moderation_requests" edges to ModerationRequest entities.
func (uuo *UserUpdateOne) RemoveModerationRequests(m ...*ModerationRequest) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveModerationRequestIDs(ids...)
}

// ClearModerationActions clears all "moderation_actions" edges to the ModerationRequest entity.
func (uuo *UserUpdateOne) ClearModerationActions() *UserUpdateOne {
	uuo.mutation.ClearModerationActions()
	return uuo
}

// RemoveModerationActionIDs removes the "moderation_actions" edge to ModerationRequest entities by IDs.
func (uuo *UserUpdateOne) RemoveModerationActionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveModerationActionIDs(ids...)
	return uuo
}

// RemoveModerationActions removes "moderation_actions" edges to ModerationRequest entities.
func (uuo *UserUpdateOne) RemoveModerationActions(m ...*ModerationRequest) *UserUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveModerationActionIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Permissions(); ok {
		_spec.SetField(user.FieldPermissions, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FeatureFlags(); ok {
		_spec.SetField(user.FieldFeatureFlags, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedFeatureFlags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldFeatureFlags, value)
		})
	}
	if uuo.mutation.FeatureFlagsCleared() {
		_spec.ClearField(user.FieldFeatureFlags, field.TypeJSON)
	}
	if uuo.mutation.DiscordInteractionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DiscordInteractionsTable,
			Columns: []string{user.DiscordInteractionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordinteraction.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedDiscordInteractionsIDs(); len(nodes) > 0 && !uuo.mutation.DiscordInteractionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DiscordInteractionsTable,
			Columns: []string{user.DiscordInteractionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordinteraction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.DiscordInteractionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DiscordInteractionsTable,
			Columns: []string{user.DiscordInteractionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(discordinteraction.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubscriptionsTable,
			Columns: []string{user.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersubscription.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !uuo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubscriptionsTable,
			Columns: []string{user.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersubscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubscriptionsTable,
			Columns: []string{user.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersubscription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ConnectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConnectionsTable,
			Columns: []string{user.ConnectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconnection.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedConnectionsIDs(); len(nodes) > 0 && !uuo.mutation.ConnectionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConnectionsTable,
			Columns: []string{user.ConnectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconnection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ConnectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ConnectionsTable,
			Columns: []string{user.ConnectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(userconnection.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.WidgetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WidgetsTable,
			Columns: []string{user.WidgetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(widgetsettings.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedWidgetsIDs(); len(nodes) > 0 && !uuo.mutation.WidgetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WidgetsTable,
			Columns: []string{user.WidgetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(widgetsettings.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.WidgetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WidgetsTable,
			Columns: []string{user.WidgetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(widgetsettings.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContentTable,
			Columns: []string{user.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercontent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedContentIDs(); len(nodes) > 0 && !uuo.mutation.ContentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContentTable,
			Columns: []string{user.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercontent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ContentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContentTable,
			Columns: []string{user.ContentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usercontent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ModerationRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ModerationRequestsTable,
			Columns: []string{user.ModerationRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moderationrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedModerationRequestsIDs(); len(nodes) > 0 && !uuo.mutation.ModerationRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ModerationRequestsTable,
			Columns: []string{user.ModerationRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moderationrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ModerationRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ModerationRequestsTable,
			Columns: []string{user.ModerationRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moderationrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ModerationActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ModerationActionsTable,
			Columns: []string{user.ModerationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moderationrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedModerationActionsIDs(); len(nodes) > 0 && !uuo.mutation.ModerationActionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ModerationActionsTable,
			Columns: []string{user.ModerationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moderationrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ModerationActionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ModerationActionsTable,
			Columns: []string{user.ModerationActionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moderationrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
