// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/admessage"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"golang.org/x/text/language"
)

// AdMessageUpdate is the builder for updating AdMessage entities.
type AdMessageUpdate struct {
	config
	hooks     []Hook
	mutation  *AdMessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AdMessageUpdate builder.
func (amu *AdMessageUpdate) Where(ps ...predicate.AdMessage) *AdMessageUpdate {
	amu.mutation.Where(ps...)
	return amu
}

// SetUpdatedAt sets the "updated_at" field.
func (amu *AdMessageUpdate) SetUpdatedAt(t time.Time) *AdMessageUpdate {
	amu.mutation.SetUpdatedAt(t)
	return amu
}

// SetEnabled sets the "enabled" field.
func (amu *AdMessageUpdate) SetEnabled(b bool) *AdMessageUpdate {
	amu.mutation.SetEnabled(b)
	return amu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (amu *AdMessageUpdate) SetNillableEnabled(b *bool) *AdMessageUpdate {
	if b != nil {
		amu.SetEnabled(*b)
	}
	return amu
}

// SetWeight sets the "weight" field.
func (amu *AdMessageUpdate) SetWeight(i int) *AdMessageUpdate {
	amu.mutation.ResetWeight()
	amu.mutation.SetWeight(i)
	return amu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (amu *AdMessageUpdate) SetNillableWeight(i *int) *AdMessageUpdate {
	if i != nil {
		amu.SetWeight(*i)
	}
	return amu
}

// AddWeight adds i to the "weight" field.
func (amu *AdMessageUpdate) AddWeight(i int) *AdMessageUpdate {
	amu.mutation.AddWeight(i)
	return amu
}

// SetChance sets the "chance" field.
func (amu *AdMessageUpdate) SetChance(f float32) *AdMessageUpdate {
	amu.mutation.ResetChance()
	amu.mutation.SetChance(f)
	return amu
}

// SetNillableChance sets the "chance" field if the given value is not nil.
func (amu *AdMessageUpdate) SetNillableChance(f *float32) *AdMessageUpdate {
	if f != nil {
		amu.SetChance(*f)
	}
	return amu
}

// AddChance adds f to the "chance" field.
func (amu *AdMessageUpdate) AddChance(f float32) *AdMessageUpdate {
	amu.mutation.AddChance(f)
	return amu
}

// SetMessage sets the "message" field.
func (amu *AdMessageUpdate) SetMessage(m map[language.Tag]string) *AdMessageUpdate {
	amu.mutation.SetMessage(m)
	return amu
}

// SetMetadata sets the "metadata" field.
func (amu *AdMessageUpdate) SetMetadata(m map[string]interface{}) *AdMessageUpdate {
	amu.mutation.SetMetadata(m)
	return amu
}

// ClearMetadata clears the value of the "metadata" field.
func (amu *AdMessageUpdate) ClearMetadata() *AdMessageUpdate {
	amu.mutation.ClearMetadata()
	return amu
}

// Mutation returns the AdMessageMutation object of the builder.
func (amu *AdMessageUpdate) Mutation() *AdMessageMutation {
	return amu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amu *AdMessageUpdate) Save(ctx context.Context) (int, error) {
	amu.defaults()
	return withHooks(ctx, amu.sqlSave, amu.mutation, amu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amu *AdMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := amu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amu *AdMessageUpdate) Exec(ctx context.Context) error {
	_, err := amu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amu *AdMessageUpdate) ExecX(ctx context.Context) {
	if err := amu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amu *AdMessageUpdate) defaults() {
	if _, ok := amu.mutation.UpdatedAt(); !ok {
		v := admessage.UpdateDefaultUpdatedAt()
		amu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (amu *AdMessageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdMessageUpdate {
	amu.modifiers = append(amu.modifiers, modifiers...)
	return amu
}

func (amu *AdMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(admessage.Table, admessage.Columns, sqlgraph.NewFieldSpec(admessage.FieldID, field.TypeString))
	if ps := amu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amu.mutation.UpdatedAt(); ok {
		_spec.SetField(admessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := amu.mutation.Enabled(); ok {
		_spec.SetField(admessage.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := amu.mutation.Weight(); ok {
		_spec.SetField(admessage.FieldWeight, field.TypeInt, value)
	}
	if value, ok := amu.mutation.AddedWeight(); ok {
		_spec.AddField(admessage.FieldWeight, field.TypeInt, value)
	}
	if value, ok := amu.mutation.Chance(); ok {
		_spec.SetField(admessage.FieldChance, field.TypeFloat32, value)
	}
	if value, ok := amu.mutation.AddedChance(); ok {
		_spec.AddField(admessage.FieldChance, field.TypeFloat32, value)
	}
	if value, ok := amu.mutation.Message(); ok {
		_spec.SetField(admessage.FieldMessage, field.TypeJSON, value)
	}
	if value, ok := amu.mutation.Metadata(); ok {
		_spec.SetField(admessage.FieldMetadata, field.TypeJSON, value)
	}
	if amu.mutation.MetadataCleared() {
		_spec.ClearField(admessage.FieldMetadata, field.TypeJSON)
	}
	_spec.AddModifiers(amu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, amu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	amu.mutation.done = true
	return n, nil
}

// AdMessageUpdateOne is the builder for updating a single AdMessage entity.
type AdMessageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AdMessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (amuo *AdMessageUpdateOne) SetUpdatedAt(t time.Time) *AdMessageUpdateOne {
	amuo.mutation.SetUpdatedAt(t)
	return amuo
}

// SetEnabled sets the "enabled" field.
func (amuo *AdMessageUpdateOne) SetEnabled(b bool) *AdMessageUpdateOne {
	amuo.mutation.SetEnabled(b)
	return amuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (amuo *AdMessageUpdateOne) SetNillableEnabled(b *bool) *AdMessageUpdateOne {
	if b != nil {
		amuo.SetEnabled(*b)
	}
	return amuo
}

// SetWeight sets the "weight" field.
func (amuo *AdMessageUpdateOne) SetWeight(i int) *AdMessageUpdateOne {
	amuo.mutation.ResetWeight()
	amuo.mutation.SetWeight(i)
	return amuo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (amuo *AdMessageUpdateOne) SetNillableWeight(i *int) *AdMessageUpdateOne {
	if i != nil {
		amuo.SetWeight(*i)
	}
	return amuo
}

// AddWeight adds i to the "weight" field.
func (amuo *AdMessageUpdateOne) AddWeight(i int) *AdMessageUpdateOne {
	amuo.mutation.AddWeight(i)
	return amuo
}

// SetChance sets the "chance" field.
func (amuo *AdMessageUpdateOne) SetChance(f float32) *AdMessageUpdateOne {
	amuo.mutation.ResetChance()
	amuo.mutation.SetChance(f)
	return amuo
}

// SetNillableChance sets the "chance" field if the given value is not nil.
func (amuo *AdMessageUpdateOne) SetNillableChance(f *float32) *AdMessageUpdateOne {
	if f != nil {
		amuo.SetChance(*f)
	}
	return amuo
}

// AddChance adds f to the "chance" field.
func (amuo *AdMessageUpdateOne) AddChance(f float32) *AdMessageUpdateOne {
	amuo.mutation.AddChance(f)
	return amuo
}

// SetMessage sets the "message" field.
func (amuo *AdMessageUpdateOne) SetMessage(m map[language.Tag]string) *AdMessageUpdateOne {
	amuo.mutation.SetMessage(m)
	return amuo
}

// SetMetadata sets the "metadata" field.
func (amuo *AdMessageUpdateOne) SetMetadata(m map[string]interface{}) *AdMessageUpdateOne {
	amuo.mutation.SetMetadata(m)
	return amuo
}

// ClearMetadata clears the value of the "metadata" field.
func (amuo *AdMessageUpdateOne) ClearMetadata() *AdMessageUpdateOne {
	amuo.mutation.ClearMetadata()
	return amuo
}

// Mutation returns the AdMessageMutation object of the builder.
func (amuo *AdMessageUpdateOne) Mutation() *AdMessageMutation {
	return amuo.mutation
}

// Where appends a list predicates to the AdMessageUpdate builder.
func (amuo *AdMessageUpdateOne) Where(ps ...predicate.AdMessage) *AdMessageUpdateOne {
	amuo.mutation.Where(ps...)
	return amuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amuo *AdMessageUpdateOne) Select(field string, fields ...string) *AdMessageUpdateOne {
	amuo.fields = append([]string{field}, fields...)
	return amuo
}

// Save executes the query and returns the updated AdMessage entity.
func (amuo *AdMessageUpdateOne) Save(ctx context.Context) (*AdMessage, error) {
	amuo.defaults()
	return withHooks(ctx, amuo.sqlSave, amuo.mutation, amuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amuo *AdMessageUpdateOne) SaveX(ctx context.Context) *AdMessage {
	node, err := amuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amuo *AdMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := amuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amuo *AdMessageUpdateOne) ExecX(ctx context.Context) {
	if err := amuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amuo *AdMessageUpdateOne) defaults() {
	if _, ok := amuo.mutation.UpdatedAt(); !ok {
		v := admessage.UpdateDefaultUpdatedAt()
		amuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (amuo *AdMessageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdMessageUpdateOne {
	amuo.modifiers = append(amuo.modifiers, modifiers...)
	return amuo
}

func (amuo *AdMessageUpdateOne) sqlSave(ctx context.Context) (_node *AdMessage, err error) {
	_spec := sqlgraph.NewUpdateSpec(admessage.Table, admessage.Columns, sqlgraph.NewFieldSpec(admessage.FieldID, field.TypeString))
	id, ok := amuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "AdMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, admessage.FieldID)
		for _, f := range fields {
			if !admessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != admessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amuo.mutation.UpdatedAt(); ok {
		_spec.SetField(admessage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := amuo.mutation.Enabled(); ok {
		_spec.SetField(admessage.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := amuo.mutation.Weight(); ok {
		_spec.SetField(admessage.FieldWeight, field.TypeInt, value)
	}
	if value, ok := amuo.mutation.AddedWeight(); ok {
		_spec.AddField(admessage.FieldWeight, field.TypeInt, value)
	}
	if value, ok := amuo.mutation.Chance(); ok {
		_spec.SetField(admessage.FieldChance, field.TypeFloat32, value)
	}
	if value, ok := amuo.mutation.AddedChance(); ok {
		_spec.AddField(admessage.FieldChance, field.TypeFloat32, value)
	}
	if value, ok := amuo.mutation.Message(); ok {
		_spec.SetField(admessage.FieldMessage, field.TypeJSON, value)
	}
	if value, ok := amuo.mutation.Metadata(); ok {
		_spec.SetField(admessage.FieldMetadata, field.TypeJSON, value)
	}
	if amuo.mutation.MetadataCleared() {
		_spec.ClearField(admessage.FieldMetadata, field.TypeJSON)
	}
	_spec.AddModifiers(amuo.modifiers...)
	_node = &AdMessage{config: amuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	amuo.mutation.done = true
	return _node, nil
}
