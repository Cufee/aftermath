// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/admessage"
	"golang.org/x/text/language"
)

// AdMessageCreate is the builder for creating a AdMessage entity.
type AdMessageCreate struct {
	config
	mutation *AdMessageMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (amc *AdMessageCreate) SetCreatedAt(t time.Time) *AdMessageCreate {
	amc.mutation.SetCreatedAt(t)
	return amc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (amc *AdMessageCreate) SetNillableCreatedAt(t *time.Time) *AdMessageCreate {
	if t != nil {
		amc.SetCreatedAt(*t)
	}
	return amc
}

// SetUpdatedAt sets the "updated_at" field.
func (amc *AdMessageCreate) SetUpdatedAt(t time.Time) *AdMessageCreate {
	amc.mutation.SetUpdatedAt(t)
	return amc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (amc *AdMessageCreate) SetNillableUpdatedAt(t *time.Time) *AdMessageCreate {
	if t != nil {
		amc.SetUpdatedAt(*t)
	}
	return amc
}

// SetEnabled sets the "enabled" field.
func (amc *AdMessageCreate) SetEnabled(b bool) *AdMessageCreate {
	amc.mutation.SetEnabled(b)
	return amc
}

// SetWeight sets the "weight" field.
func (amc *AdMessageCreate) SetWeight(i int) *AdMessageCreate {
	amc.mutation.SetWeight(i)
	return amc
}

// SetChance sets the "chance" field.
func (amc *AdMessageCreate) SetChance(f float32) *AdMessageCreate {
	amc.mutation.SetChance(f)
	return amc
}

// SetMessage sets the "message" field.
func (amc *AdMessageCreate) SetMessage(m map[language.Tag]string) *AdMessageCreate {
	amc.mutation.SetMessage(m)
	return amc
}

// SetMetadata sets the "metadata" field.
func (amc *AdMessageCreate) SetMetadata(m map[string]interface{}) *AdMessageCreate {
	amc.mutation.SetMetadata(m)
	return amc
}

// SetID sets the "id" field.
func (amc *AdMessageCreate) SetID(s string) *AdMessageCreate {
	amc.mutation.SetID(s)
	return amc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (amc *AdMessageCreate) SetNillableID(s *string) *AdMessageCreate {
	if s != nil {
		amc.SetID(*s)
	}
	return amc
}

// Mutation returns the AdMessageMutation object of the builder.
func (amc *AdMessageCreate) Mutation() *AdMessageMutation {
	return amc.mutation
}

// Save creates the AdMessage in the database.
func (amc *AdMessageCreate) Save(ctx context.Context) (*AdMessage, error) {
	amc.defaults()
	return withHooks(ctx, amc.sqlSave, amc.mutation, amc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (amc *AdMessageCreate) SaveX(ctx context.Context) *AdMessage {
	v, err := amc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amc *AdMessageCreate) Exec(ctx context.Context) error {
	_, err := amc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amc *AdMessageCreate) ExecX(ctx context.Context) {
	if err := amc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amc *AdMessageCreate) defaults() {
	if _, ok := amc.mutation.CreatedAt(); !ok {
		v := admessage.DefaultCreatedAt()
		amc.mutation.SetCreatedAt(v)
	}
	if _, ok := amc.mutation.UpdatedAt(); !ok {
		v := admessage.DefaultUpdatedAt()
		amc.mutation.SetUpdatedAt(v)
	}
	if _, ok := amc.mutation.ID(); !ok {
		v := admessage.DefaultID()
		amc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amc *AdMessageCreate) check() error {
	if _, ok := amc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "AdMessage.created_at"`)}
	}
	if _, ok := amc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "AdMessage.updated_at"`)}
	}
	if _, ok := amc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`db: missing required field "AdMessage.enabled"`)}
	}
	if _, ok := amc.mutation.Weight(); !ok {
		return &ValidationError{Name: "weight", err: errors.New(`db: missing required field "AdMessage.weight"`)}
	}
	if _, ok := amc.mutation.Chance(); !ok {
		return &ValidationError{Name: "chance", err: errors.New(`db: missing required field "AdMessage.chance"`)}
	}
	if _, ok := amc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`db: missing required field "AdMessage.message"`)}
	}
	return nil
}

func (amc *AdMessageCreate) sqlSave(ctx context.Context) (*AdMessage, error) {
	if err := amc.check(); err != nil {
		return nil, err
	}
	_node, _spec := amc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AdMessage.ID type: %T", _spec.ID.Value)
		}
	}
	amc.mutation.id = &_node.ID
	amc.mutation.done = true
	return _node, nil
}

func (amc *AdMessageCreate) createSpec() (*AdMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &AdMessage{config: amc.config}
		_spec = sqlgraph.NewCreateSpec(admessage.Table, sqlgraph.NewFieldSpec(admessage.FieldID, field.TypeString))
	)
	if id, ok := amc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := amc.mutation.CreatedAt(); ok {
		_spec.SetField(admessage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := amc.mutation.UpdatedAt(); ok {
		_spec.SetField(admessage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := amc.mutation.Enabled(); ok {
		_spec.SetField(admessage.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := amc.mutation.Weight(); ok {
		_spec.SetField(admessage.FieldWeight, field.TypeInt, value)
		_node.Weight = value
	}
	if value, ok := amc.mutation.Chance(); ok {
		_spec.SetField(admessage.FieldChance, field.TypeFloat32, value)
		_node.Chance = value
	}
	if value, ok := amc.mutation.Message(); ok {
		_spec.SetField(admessage.FieldMessage, field.TypeJSON, value)
		_node.Message = value
	}
	if value, ok := amc.mutation.Metadata(); ok {
		_spec.SetField(admessage.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	return _node, _spec
}

// AdMessageCreateBulk is the builder for creating many AdMessage entities in bulk.
type AdMessageCreateBulk struct {
	config
	err      error
	builders []*AdMessageCreate
}

// Save creates the AdMessage entities in the database.
func (amcb *AdMessageCreateBulk) Save(ctx context.Context) ([]*AdMessage, error) {
	if amcb.err != nil {
		return nil, amcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(amcb.builders))
	nodes := make([]*AdMessage, len(amcb.builders))
	mutators := make([]Mutator, len(amcb.builders))
	for i := range amcb.builders {
		func(i int, root context.Context) {
			builder := amcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amcb *AdMessageCreateBulk) SaveX(ctx context.Context) []*AdMessage {
	v, err := amcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amcb *AdMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := amcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amcb *AdMessageCreateBulk) ExecX(ctx context.Context) {
	if err := amcb.Exec(ctx); err != nil {
		panic(err)
	}
}
