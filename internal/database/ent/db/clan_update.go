// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/account"
	"github.com/cufee/aftermath/internal/database/ent/db/clan"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
)

// ClanUpdate is the builder for updating Clan entities.
type ClanUpdate struct {
	config
	hooks    []Hook
	mutation *ClanMutation
}

// Where appends a list predicates to the ClanUpdate builder.
func (cu *ClanUpdate) Where(ps ...predicate.Clan) *ClanUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ClanUpdate) SetUpdatedAt(i int) *ClanUpdate {
	cu.mutation.ResetUpdatedAt()
	cu.mutation.SetUpdatedAt(i)
	return cu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (cu *ClanUpdate) AddUpdatedAt(i int) *ClanUpdate {
	cu.mutation.AddUpdatedAt(i)
	return cu
}

// SetTag sets the "tag" field.
func (cu *ClanUpdate) SetTag(s string) *ClanUpdate {
	cu.mutation.SetTag(s)
	return cu
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (cu *ClanUpdate) SetNillableTag(s *string) *ClanUpdate {
	if s != nil {
		cu.SetTag(*s)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *ClanUpdate) SetName(s string) *ClanUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ClanUpdate) SetNillableName(s *string) *ClanUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetEmblemID sets the "emblem_id" field.
func (cu *ClanUpdate) SetEmblemID(s string) *ClanUpdate {
	cu.mutation.SetEmblemID(s)
	return cu
}

// SetNillableEmblemID sets the "emblem_id" field if the given value is not nil.
func (cu *ClanUpdate) SetNillableEmblemID(s *string) *ClanUpdate {
	if s != nil {
		cu.SetEmblemID(*s)
	}
	return cu
}

// ClearEmblemID clears the value of the "emblem_id" field.
func (cu *ClanUpdate) ClearEmblemID() *ClanUpdate {
	cu.mutation.ClearEmblemID()
	return cu
}

// SetMembers sets the "members" field.
func (cu *ClanUpdate) SetMembers(s []string) *ClanUpdate {
	cu.mutation.SetMembers(s)
	return cu
}

// AppendMembers appends s to the "members" field.
func (cu *ClanUpdate) AppendMembers(s []string) *ClanUpdate {
	cu.mutation.AppendMembers(s)
	return cu
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (cu *ClanUpdate) AddAccountIDs(ids ...string) *ClanUpdate {
	cu.mutation.AddAccountIDs(ids...)
	return cu
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (cu *ClanUpdate) AddAccounts(a ...*Account) *ClanUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAccountIDs(ids...)
}

// Mutation returns the ClanMutation object of the builder.
func (cu *ClanUpdate) Mutation() *ClanMutation {
	return cu.mutation
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (cu *ClanUpdate) ClearAccounts() *ClanUpdate {
	cu.mutation.ClearAccounts()
	return cu
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (cu *ClanUpdate) RemoveAccountIDs(ids ...string) *ClanUpdate {
	cu.mutation.RemoveAccountIDs(ids...)
	return cu
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (cu *ClanUpdate) RemoveAccounts(a ...*Account) *ClanUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAccountIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClanUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClanUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClanUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClanUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ClanUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := clan.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ClanUpdate) check() error {
	if v, ok := cu.mutation.Tag(); ok {
		if err := clan.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`db: validator failed for field "Clan.tag": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Name(); ok {
		if err := clan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Clan.name": %w`, err)}
		}
	}
	return nil
}

func (cu *ClanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(clan.Table, clan.Columns, sqlgraph.NewFieldSpec(clan.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(clan.FieldUpdatedAt, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(clan.FieldUpdatedAt, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Tag(); ok {
		_spec.SetField(clan.FieldTag, field.TypeString, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(clan.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.EmblemID(); ok {
		_spec.SetField(clan.FieldEmblemID, field.TypeString, value)
	}
	if cu.mutation.EmblemIDCleared() {
		_spec.ClearField(clan.FieldEmblemID, field.TypeString)
	}
	if value, ok := cu.mutation.Members(); ok {
		_spec.SetField(clan.FieldMembers, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedMembers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, clan.FieldMembers, value)
		})
	}
	if cu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clan.AccountsTable,
			Columns: []string{clan.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !cu.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clan.AccountsTable,
			Columns: []string{clan.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clan.AccountsTable,
			Columns: []string{clan.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClanUpdateOne is the builder for updating a single Clan entity.
type ClanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClanMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ClanUpdateOne) SetUpdatedAt(i int) *ClanUpdateOne {
	cuo.mutation.ResetUpdatedAt()
	cuo.mutation.SetUpdatedAt(i)
	return cuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (cuo *ClanUpdateOne) AddUpdatedAt(i int) *ClanUpdateOne {
	cuo.mutation.AddUpdatedAt(i)
	return cuo
}

// SetTag sets the "tag" field.
func (cuo *ClanUpdateOne) SetTag(s string) *ClanUpdateOne {
	cuo.mutation.SetTag(s)
	return cuo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (cuo *ClanUpdateOne) SetNillableTag(s *string) *ClanUpdateOne {
	if s != nil {
		cuo.SetTag(*s)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *ClanUpdateOne) SetName(s string) *ClanUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ClanUpdateOne) SetNillableName(s *string) *ClanUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetEmblemID sets the "emblem_id" field.
func (cuo *ClanUpdateOne) SetEmblemID(s string) *ClanUpdateOne {
	cuo.mutation.SetEmblemID(s)
	return cuo
}

// SetNillableEmblemID sets the "emblem_id" field if the given value is not nil.
func (cuo *ClanUpdateOne) SetNillableEmblemID(s *string) *ClanUpdateOne {
	if s != nil {
		cuo.SetEmblemID(*s)
	}
	return cuo
}

// ClearEmblemID clears the value of the "emblem_id" field.
func (cuo *ClanUpdateOne) ClearEmblemID() *ClanUpdateOne {
	cuo.mutation.ClearEmblemID()
	return cuo
}

// SetMembers sets the "members" field.
func (cuo *ClanUpdateOne) SetMembers(s []string) *ClanUpdateOne {
	cuo.mutation.SetMembers(s)
	return cuo
}

// AppendMembers appends s to the "members" field.
func (cuo *ClanUpdateOne) AppendMembers(s []string) *ClanUpdateOne {
	cuo.mutation.AppendMembers(s)
	return cuo
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (cuo *ClanUpdateOne) AddAccountIDs(ids ...string) *ClanUpdateOne {
	cuo.mutation.AddAccountIDs(ids...)
	return cuo
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (cuo *ClanUpdateOne) AddAccounts(a ...*Account) *ClanUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAccountIDs(ids...)
}

// Mutation returns the ClanMutation object of the builder.
func (cuo *ClanUpdateOne) Mutation() *ClanMutation {
	return cuo.mutation
}

// ClearAccounts clears all "accounts" edges to the Account entity.
func (cuo *ClanUpdateOne) ClearAccounts() *ClanUpdateOne {
	cuo.mutation.ClearAccounts()
	return cuo
}

// RemoveAccountIDs removes the "accounts" edge to Account entities by IDs.
func (cuo *ClanUpdateOne) RemoveAccountIDs(ids ...string) *ClanUpdateOne {
	cuo.mutation.RemoveAccountIDs(ids...)
	return cuo
}

// RemoveAccounts removes "accounts" edges to Account entities.
func (cuo *ClanUpdateOne) RemoveAccounts(a ...*Account) *ClanUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAccountIDs(ids...)
}

// Where appends a list predicates to the ClanUpdate builder.
func (cuo *ClanUpdateOne) Where(ps ...predicate.Clan) *ClanUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClanUpdateOne) Select(field string, fields ...string) *ClanUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Clan entity.
func (cuo *ClanUpdateOne) Save(ctx context.Context) (*Clan, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClanUpdateOne) SaveX(ctx context.Context) *Clan {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClanUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClanUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ClanUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := clan.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ClanUpdateOne) check() error {
	if v, ok := cuo.mutation.Tag(); ok {
		if err := clan.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`db: validator failed for field "Clan.tag": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Name(); ok {
		if err := clan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Clan.name": %w`, err)}
		}
	}
	return nil
}

func (cuo *ClanUpdateOne) sqlSave(ctx context.Context) (_node *Clan, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(clan.Table, clan.Columns, sqlgraph.NewFieldSpec(clan.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "Clan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clan.FieldID)
		for _, f := range fields {
			if !clan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != clan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(clan.FieldUpdatedAt, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(clan.FieldUpdatedAt, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Tag(); ok {
		_spec.SetField(clan.FieldTag, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(clan.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.EmblemID(); ok {
		_spec.SetField(clan.FieldEmblemID, field.TypeString, value)
	}
	if cuo.mutation.EmblemIDCleared() {
		_spec.ClearField(clan.FieldEmblemID, field.TypeString)
	}
	if value, ok := cuo.mutation.Members(); ok {
		_spec.SetField(clan.FieldMembers, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedMembers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, clan.FieldMembers, value)
		})
	}
	if cuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clan.AccountsTable,
			Columns: []string{clan.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAccountsIDs(); len(nodes) > 0 && !cuo.mutation.AccountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clan.AccountsTable,
			Columns: []string{clan.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clan.AccountsTable,
			Columns: []string{clan.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Clan{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
