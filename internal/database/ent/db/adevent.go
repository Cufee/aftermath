// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/cufee/aftermath/internal/database/ent/db/adevent"
)

// AdEvent is the model entity for the AdEvent schema.
type AdEvent struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// GuildID holds the value of the "guild_id" field.
	GuildID string `json:"guild_id,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID string `json:"channel_id,omitempty"`
	// Locale holds the value of the "locale" field.
	Locale string `json:"locale,omitempty"`
	// MessageID holds the value of the "message_id" field.
	MessageID string `json:"message_id,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata     map[string]interface{} `json:"metadata,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdEvent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adevent.FieldMetadata:
			values[i] = new([]byte)
		case adevent.FieldID, adevent.FieldUserID, adevent.FieldGuildID, adevent.FieldChannelID, adevent.FieldLocale, adevent.FieldMessageID:
			values[i] = new(sql.NullString)
		case adevent.FieldCreatedAt, adevent.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdEvent fields.
func (ae *AdEvent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adevent.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ae.ID = value.String
			}
		case adevent.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ae.CreatedAt = value.Time
			}
		case adevent.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ae.UpdatedAt = value.Time
			}
		case adevent.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ae.UserID = value.String
			}
		case adevent.FieldGuildID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guild_id", values[i])
			} else if value.Valid {
				ae.GuildID = value.String
			}
		case adevent.FieldChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				ae.ChannelID = value.String
			}
		case adevent.FieldLocale:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locale", values[i])
			} else if value.Valid {
				ae.Locale = value.String
			}
		case adevent.FieldMessageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message_id", values[i])
			} else if value.Valid {
				ae.MessageID = value.String
			}
		case adevent.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ae.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		default:
			ae.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdEvent.
// This includes values selected through modifiers, order, etc.
func (ae *AdEvent) Value(name string) (ent.Value, error) {
	return ae.selectValues.Get(name)
}

// Update returns a builder for updating this AdEvent.
// Note that you need to call AdEvent.Unwrap() before calling this method if this AdEvent
// was returned from a transaction, and the transaction was committed or rolled back.
func (ae *AdEvent) Update() *AdEventUpdateOne {
	return NewAdEventClient(ae.config).UpdateOne(ae)
}

// Unwrap unwraps the AdEvent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ae *AdEvent) Unwrap() *AdEvent {
	_tx, ok := ae.config.driver.(*txDriver)
	if !ok {
		panic("db: AdEvent is not a transactional entity")
	}
	ae.config.driver = _tx.drv
	return ae
}

// String implements the fmt.Stringer.
func (ae *AdEvent) String() string {
	var builder strings.Builder
	builder.WriteString("AdEvent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ae.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ae.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ae.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(ae.UserID)
	builder.WriteString(", ")
	builder.WriteString("guild_id=")
	builder.WriteString(ae.GuildID)
	builder.WriteString(", ")
	builder.WriteString("channel_id=")
	builder.WriteString(ae.ChannelID)
	builder.WriteString(", ")
	builder.WriteString("locale=")
	builder.WriteString(ae.Locale)
	builder.WriteString(", ")
	builder.WriteString("message_id=")
	builder.WriteString(ae.MessageID)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", ae.Metadata))
	builder.WriteByte(')')
	return builder.String()
}

// AdEvents is a parsable slice of AdEvent.
type AdEvents []*AdEvent
