// Code generated by ent, DO NOT EDIT.

package moderationrequest

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cufee/aftermath/internal/database/models"
)

const (
	// Label holds the string label denoting the moderationrequest type in the database.
	Label = "moderation_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldModeratorID holds the string denoting the moderator_id field in the database.
	FieldModeratorID = "moderator_id"
	// FieldModeratorComment holds the string denoting the moderator_comment field in the database.
	FieldModeratorComment = "moderator_comment"
	// FieldContext holds the string denoting the context field in the database.
	FieldContext = "context"
	// FieldReferenceID holds the string denoting the reference_id field in the database.
	FieldReferenceID = "reference_id"
	// FieldRequestorID holds the string denoting the requestor_id field in the database.
	FieldRequestorID = "requestor_id"
	// FieldActionReason holds the string denoting the action_reason field in the database.
	FieldActionReason = "action_reason"
	// FieldActionStatus holds the string denoting the action_status field in the database.
	FieldActionStatus = "action_status"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// EdgeModerator holds the string denoting the moderator edge name in mutations.
	EdgeModerator = "moderator"
	// EdgeRequestor holds the string denoting the requestor edge name in mutations.
	EdgeRequestor = "requestor"
	// Table holds the table name of the moderationrequest in the database.
	Table = "moderation_requests"
	// ModeratorTable is the table that holds the moderator relation/edge.
	ModeratorTable = "moderation_requests"
	// ModeratorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ModeratorInverseTable = "users"
	// ModeratorColumn is the table column denoting the moderator relation/edge.
	ModeratorColumn = "moderator_id"
	// RequestorTable is the table that holds the requestor relation/edge.
	RequestorTable = "moderation_requests"
	// RequestorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	RequestorInverseTable = "users"
	// RequestorColumn is the table column denoting the requestor relation/edge.
	RequestorColumn = "requestor_id"
)

// Columns holds all SQL columns for moderationrequest fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldModeratorID,
	FieldModeratorComment,
	FieldContext,
	FieldReferenceID,
	FieldRequestorID,
	FieldActionReason,
	FieldActionStatus,
	FieldData,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// ReferenceIDValidator is a validator for the "reference_id" field. It is called by the builders before save.
	ReferenceIDValidator func(string) error
	// RequestorIDValidator is a validator for the "requestor_id" field. It is called by the builders before save.
	RequestorIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// ActionStatusValidator is a validator for the "action_status" field enum values. It is called by the builders before save.
func ActionStatusValidator(as models.ModerationStatus) error {
	switch as {
	case "submitted", "approved", "declined", "expired":
		return nil
	default:
		return fmt.Errorf("moderationrequest: invalid enum value for action_status field: %q", as)
	}
}

// OrderOption defines the ordering options for the ModerationRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByModeratorID orders the results by the moderator_id field.
func ByModeratorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModeratorID, opts...).ToFunc()
}

// ByModeratorComment orders the results by the moderator_comment field.
func ByModeratorComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModeratorComment, opts...).ToFunc()
}

// ByContext orders the results by the context field.
func ByContext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContext, opts...).ToFunc()
}

// ByReferenceID orders the results by the reference_id field.
func ByReferenceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferenceID, opts...).ToFunc()
}

// ByRequestorID orders the results by the requestor_id field.
func ByRequestorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestorID, opts...).ToFunc()
}

// ByActionReason orders the results by the action_reason field.
func ByActionReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActionReason, opts...).ToFunc()
}

// ByActionStatus orders the results by the action_status field.
func ByActionStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActionStatus, opts...).ToFunc()
}

// ByModeratorField orders the results by moderator field.
func ByModeratorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModeratorStep(), sql.OrderByField(field, opts...))
	}
}

// ByRequestorField orders the results by requestor field.
func ByRequestorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequestorStep(), sql.OrderByField(field, opts...))
	}
}
func newModeratorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModeratorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ModeratorTable, ModeratorColumn),
	)
}
func newRequestorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequestorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RequestorTable, RequestorColumn),
	)
}
