// Code generated by ent, DO NOT EDIT.

package moderationrequest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"github.com/cufee/aftermath/internal/database/models"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldUpdatedAt, v))
}

// ModeratorID applies equality check predicate on the "moderator_id" field. It's identical to ModeratorIDEQ.
func ModeratorID(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldModeratorID, v))
}

// ModeratorComment applies equality check predicate on the "moderator_comment" field. It's identical to ModeratorCommentEQ.
func ModeratorComment(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldModeratorComment, v))
}

// Context applies equality check predicate on the "context" field. It's identical to ContextEQ.
func Context(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldContext, v))
}

// ReferenceID applies equality check predicate on the "reference_id" field. It's identical to ReferenceIDEQ.
func ReferenceID(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldReferenceID, v))
}

// RequestorID applies equality check predicate on the "requestor_id" field. It's identical to RequestorIDEQ.
func RequestorID(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldRequestorID, v))
}

// ActionReason applies equality check predicate on the "action_reason" field. It's identical to ActionReasonEQ.
func ActionReason(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldActionReason, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLTE(FieldUpdatedAt, v))
}

// ModeratorIDEQ applies the EQ predicate on the "moderator_id" field.
func ModeratorIDEQ(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldModeratorID, v))
}

// ModeratorIDNEQ applies the NEQ predicate on the "moderator_id" field.
func ModeratorIDNEQ(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNEQ(FieldModeratorID, v))
}

// ModeratorIDIn applies the In predicate on the "moderator_id" field.
func ModeratorIDIn(vs ...string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldIn(FieldModeratorID, vs...))
}

// ModeratorIDNotIn applies the NotIn predicate on the "moderator_id" field.
func ModeratorIDNotIn(vs ...string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNotIn(FieldModeratorID, vs...))
}

// ModeratorIDGT applies the GT predicate on the "moderator_id" field.
func ModeratorIDGT(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGT(FieldModeratorID, v))
}

// ModeratorIDGTE applies the GTE predicate on the "moderator_id" field.
func ModeratorIDGTE(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGTE(FieldModeratorID, v))
}

// ModeratorIDLT applies the LT predicate on the "moderator_id" field.
func ModeratorIDLT(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLT(FieldModeratorID, v))
}

// ModeratorIDLTE applies the LTE predicate on the "moderator_id" field.
func ModeratorIDLTE(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLTE(FieldModeratorID, v))
}

// ModeratorIDContains applies the Contains predicate on the "moderator_id" field.
func ModeratorIDContains(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldContains(FieldModeratorID, v))
}

// ModeratorIDHasPrefix applies the HasPrefix predicate on the "moderator_id" field.
func ModeratorIDHasPrefix(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldHasPrefix(FieldModeratorID, v))
}

// ModeratorIDHasSuffix applies the HasSuffix predicate on the "moderator_id" field.
func ModeratorIDHasSuffix(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldHasSuffix(FieldModeratorID, v))
}

// ModeratorIDIsNil applies the IsNil predicate on the "moderator_id" field.
func ModeratorIDIsNil() predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldIsNull(FieldModeratorID))
}

// ModeratorIDNotNil applies the NotNil predicate on the "moderator_id" field.
func ModeratorIDNotNil() predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNotNull(FieldModeratorID))
}

// ModeratorIDEqualFold applies the EqualFold predicate on the "moderator_id" field.
func ModeratorIDEqualFold(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEqualFold(FieldModeratorID, v))
}

// ModeratorIDContainsFold applies the ContainsFold predicate on the "moderator_id" field.
func ModeratorIDContainsFold(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldContainsFold(FieldModeratorID, v))
}

// ModeratorCommentEQ applies the EQ predicate on the "moderator_comment" field.
func ModeratorCommentEQ(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldModeratorComment, v))
}

// ModeratorCommentNEQ applies the NEQ predicate on the "moderator_comment" field.
func ModeratorCommentNEQ(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNEQ(FieldModeratorComment, v))
}

// ModeratorCommentIn applies the In predicate on the "moderator_comment" field.
func ModeratorCommentIn(vs ...string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldIn(FieldModeratorComment, vs...))
}

// ModeratorCommentNotIn applies the NotIn predicate on the "moderator_comment" field.
func ModeratorCommentNotIn(vs ...string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNotIn(FieldModeratorComment, vs...))
}

// ModeratorCommentGT applies the GT predicate on the "moderator_comment" field.
func ModeratorCommentGT(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGT(FieldModeratorComment, v))
}

// ModeratorCommentGTE applies the GTE predicate on the "moderator_comment" field.
func ModeratorCommentGTE(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGTE(FieldModeratorComment, v))
}

// ModeratorCommentLT applies the LT predicate on the "moderator_comment" field.
func ModeratorCommentLT(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLT(FieldModeratorComment, v))
}

// ModeratorCommentLTE applies the LTE predicate on the "moderator_comment" field.
func ModeratorCommentLTE(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLTE(FieldModeratorComment, v))
}

// ModeratorCommentContains applies the Contains predicate on the "moderator_comment" field.
func ModeratorCommentContains(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldContains(FieldModeratorComment, v))
}

// ModeratorCommentHasPrefix applies the HasPrefix predicate on the "moderator_comment" field.
func ModeratorCommentHasPrefix(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldHasPrefix(FieldModeratorComment, v))
}

// ModeratorCommentHasSuffix applies the HasSuffix predicate on the "moderator_comment" field.
func ModeratorCommentHasSuffix(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldHasSuffix(FieldModeratorComment, v))
}

// ModeratorCommentIsNil applies the IsNil predicate on the "moderator_comment" field.
func ModeratorCommentIsNil() predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldIsNull(FieldModeratorComment))
}

// ModeratorCommentNotNil applies the NotNil predicate on the "moderator_comment" field.
func ModeratorCommentNotNil() predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNotNull(FieldModeratorComment))
}

// ModeratorCommentEqualFold applies the EqualFold predicate on the "moderator_comment" field.
func ModeratorCommentEqualFold(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEqualFold(FieldModeratorComment, v))
}

// ModeratorCommentContainsFold applies the ContainsFold predicate on the "moderator_comment" field.
func ModeratorCommentContainsFold(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldContainsFold(FieldModeratorComment, v))
}

// ContextEQ applies the EQ predicate on the "context" field.
func ContextEQ(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldContext, v))
}

// ContextNEQ applies the NEQ predicate on the "context" field.
func ContextNEQ(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNEQ(FieldContext, v))
}

// ContextIn applies the In predicate on the "context" field.
func ContextIn(vs ...string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldIn(FieldContext, vs...))
}

// ContextNotIn applies the NotIn predicate on the "context" field.
func ContextNotIn(vs ...string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNotIn(FieldContext, vs...))
}

// ContextGT applies the GT predicate on the "context" field.
func ContextGT(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGT(FieldContext, v))
}

// ContextGTE applies the GTE predicate on the "context" field.
func ContextGTE(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGTE(FieldContext, v))
}

// ContextLT applies the LT predicate on the "context" field.
func ContextLT(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLT(FieldContext, v))
}

// ContextLTE applies the LTE predicate on the "context" field.
func ContextLTE(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLTE(FieldContext, v))
}

// ContextContains applies the Contains predicate on the "context" field.
func ContextContains(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldContains(FieldContext, v))
}

// ContextHasPrefix applies the HasPrefix predicate on the "context" field.
func ContextHasPrefix(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldHasPrefix(FieldContext, v))
}

// ContextHasSuffix applies the HasSuffix predicate on the "context" field.
func ContextHasSuffix(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldHasSuffix(FieldContext, v))
}

// ContextIsNil applies the IsNil predicate on the "context" field.
func ContextIsNil() predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldIsNull(FieldContext))
}

// ContextNotNil applies the NotNil predicate on the "context" field.
func ContextNotNil() predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNotNull(FieldContext))
}

// ContextEqualFold applies the EqualFold predicate on the "context" field.
func ContextEqualFold(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEqualFold(FieldContext, v))
}

// ContextContainsFold applies the ContainsFold predicate on the "context" field.
func ContextContainsFold(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldContainsFold(FieldContext, v))
}

// ReferenceIDEQ applies the EQ predicate on the "reference_id" field.
func ReferenceIDEQ(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldReferenceID, v))
}

// ReferenceIDNEQ applies the NEQ predicate on the "reference_id" field.
func ReferenceIDNEQ(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNEQ(FieldReferenceID, v))
}

// ReferenceIDIn applies the In predicate on the "reference_id" field.
func ReferenceIDIn(vs ...string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldIn(FieldReferenceID, vs...))
}

// ReferenceIDNotIn applies the NotIn predicate on the "reference_id" field.
func ReferenceIDNotIn(vs ...string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNotIn(FieldReferenceID, vs...))
}

// ReferenceIDGT applies the GT predicate on the "reference_id" field.
func ReferenceIDGT(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGT(FieldReferenceID, v))
}

// ReferenceIDGTE applies the GTE predicate on the "reference_id" field.
func ReferenceIDGTE(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGTE(FieldReferenceID, v))
}

// ReferenceIDLT applies the LT predicate on the "reference_id" field.
func ReferenceIDLT(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLT(FieldReferenceID, v))
}

// ReferenceIDLTE applies the LTE predicate on the "reference_id" field.
func ReferenceIDLTE(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLTE(FieldReferenceID, v))
}

// ReferenceIDContains applies the Contains predicate on the "reference_id" field.
func ReferenceIDContains(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldContains(FieldReferenceID, v))
}

// ReferenceIDHasPrefix applies the HasPrefix predicate on the "reference_id" field.
func ReferenceIDHasPrefix(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldHasPrefix(FieldReferenceID, v))
}

// ReferenceIDHasSuffix applies the HasSuffix predicate on the "reference_id" field.
func ReferenceIDHasSuffix(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldHasSuffix(FieldReferenceID, v))
}

// ReferenceIDEqualFold applies the EqualFold predicate on the "reference_id" field.
func ReferenceIDEqualFold(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEqualFold(FieldReferenceID, v))
}

// ReferenceIDContainsFold applies the ContainsFold predicate on the "reference_id" field.
func ReferenceIDContainsFold(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldContainsFold(FieldReferenceID, v))
}

// RequestorIDEQ applies the EQ predicate on the "requestor_id" field.
func RequestorIDEQ(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldRequestorID, v))
}

// RequestorIDNEQ applies the NEQ predicate on the "requestor_id" field.
func RequestorIDNEQ(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNEQ(FieldRequestorID, v))
}

// RequestorIDIn applies the In predicate on the "requestor_id" field.
func RequestorIDIn(vs ...string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldIn(FieldRequestorID, vs...))
}

// RequestorIDNotIn applies the NotIn predicate on the "requestor_id" field.
func RequestorIDNotIn(vs ...string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNotIn(FieldRequestorID, vs...))
}

// RequestorIDGT applies the GT predicate on the "requestor_id" field.
func RequestorIDGT(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGT(FieldRequestorID, v))
}

// RequestorIDGTE applies the GTE predicate on the "requestor_id" field.
func RequestorIDGTE(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGTE(FieldRequestorID, v))
}

// RequestorIDLT applies the LT predicate on the "requestor_id" field.
func RequestorIDLT(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLT(FieldRequestorID, v))
}

// RequestorIDLTE applies the LTE predicate on the "requestor_id" field.
func RequestorIDLTE(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLTE(FieldRequestorID, v))
}

// RequestorIDContains applies the Contains predicate on the "requestor_id" field.
func RequestorIDContains(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldContains(FieldRequestorID, v))
}

// RequestorIDHasPrefix applies the HasPrefix predicate on the "requestor_id" field.
func RequestorIDHasPrefix(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldHasPrefix(FieldRequestorID, v))
}

// RequestorIDHasSuffix applies the HasSuffix predicate on the "requestor_id" field.
func RequestorIDHasSuffix(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldHasSuffix(FieldRequestorID, v))
}

// RequestorIDEqualFold applies the EqualFold predicate on the "requestor_id" field.
func RequestorIDEqualFold(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEqualFold(FieldRequestorID, v))
}

// RequestorIDContainsFold applies the ContainsFold predicate on the "requestor_id" field.
func RequestorIDContainsFold(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldContainsFold(FieldRequestorID, v))
}

// ActionReasonEQ applies the EQ predicate on the "action_reason" field.
func ActionReasonEQ(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEQ(FieldActionReason, v))
}

// ActionReasonNEQ applies the NEQ predicate on the "action_reason" field.
func ActionReasonNEQ(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNEQ(FieldActionReason, v))
}

// ActionReasonIn applies the In predicate on the "action_reason" field.
func ActionReasonIn(vs ...string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldIn(FieldActionReason, vs...))
}

// ActionReasonNotIn applies the NotIn predicate on the "action_reason" field.
func ActionReasonNotIn(vs ...string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNotIn(FieldActionReason, vs...))
}

// ActionReasonGT applies the GT predicate on the "action_reason" field.
func ActionReasonGT(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGT(FieldActionReason, v))
}

// ActionReasonGTE applies the GTE predicate on the "action_reason" field.
func ActionReasonGTE(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldGTE(FieldActionReason, v))
}

// ActionReasonLT applies the LT predicate on the "action_reason" field.
func ActionReasonLT(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLT(FieldActionReason, v))
}

// ActionReasonLTE applies the LTE predicate on the "action_reason" field.
func ActionReasonLTE(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldLTE(FieldActionReason, v))
}

// ActionReasonContains applies the Contains predicate on the "action_reason" field.
func ActionReasonContains(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldContains(FieldActionReason, v))
}

// ActionReasonHasPrefix applies the HasPrefix predicate on the "action_reason" field.
func ActionReasonHasPrefix(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldHasPrefix(FieldActionReason, v))
}

// ActionReasonHasSuffix applies the HasSuffix predicate on the "action_reason" field.
func ActionReasonHasSuffix(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldHasSuffix(FieldActionReason, v))
}

// ActionReasonIsNil applies the IsNil predicate on the "action_reason" field.
func ActionReasonIsNil() predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldIsNull(FieldActionReason))
}

// ActionReasonNotNil applies the NotNil predicate on the "action_reason" field.
func ActionReasonNotNil() predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldNotNull(FieldActionReason))
}

// ActionReasonEqualFold applies the EqualFold predicate on the "action_reason" field.
func ActionReasonEqualFold(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldEqualFold(FieldActionReason, v))
}

// ActionReasonContainsFold applies the ContainsFold predicate on the "action_reason" field.
func ActionReasonContainsFold(v string) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.FieldContainsFold(FieldActionReason, v))
}

// ActionStatusEQ applies the EQ predicate on the "action_status" field.
func ActionStatusEQ(v models.ModerationStatus) predicate.ModerationRequest {
	vc := v
	return predicate.ModerationRequest(sql.FieldEQ(FieldActionStatus, vc))
}

// ActionStatusNEQ applies the NEQ predicate on the "action_status" field.
func ActionStatusNEQ(v models.ModerationStatus) predicate.ModerationRequest {
	vc := v
	return predicate.ModerationRequest(sql.FieldNEQ(FieldActionStatus, vc))
}

// ActionStatusIn applies the In predicate on the "action_status" field.
func ActionStatusIn(vs ...models.ModerationStatus) predicate.ModerationRequest {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ModerationRequest(sql.FieldIn(FieldActionStatus, v...))
}

// ActionStatusNotIn applies the NotIn predicate on the "action_status" field.
func ActionStatusNotIn(vs ...models.ModerationStatus) predicate.ModerationRequest {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ModerationRequest(sql.FieldNotIn(FieldActionStatus, v...))
}

// HasModerator applies the HasEdge predicate on the "moderator" edge.
func HasModerator() predicate.ModerationRequest {
	return predicate.ModerationRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ModeratorTable, ModeratorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModeratorWith applies the HasEdge predicate on the "moderator" edge with a given conditions (other predicates).
func HasModeratorWith(preds ...predicate.User) predicate.ModerationRequest {
	return predicate.ModerationRequest(func(s *sql.Selector) {
		step := newModeratorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRequestor applies the HasEdge predicate on the "requestor" edge.
func HasRequestor() predicate.ModerationRequest {
	return predicate.ModerationRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RequestorTable, RequestorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequestorWith applies the HasEdge predicate on the "requestor" edge with a given conditions (other predicates).
func HasRequestorWith(preds ...predicate.User) predicate.ModerationRequest {
	return predicate.ModerationRequest(func(s *sql.Selector) {
		step := newRequestorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ModerationRequest) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ModerationRequest) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ModerationRequest) predicate.ModerationRequest {
	return predicate.ModerationRequest(sql.NotPredicates(p))
}
