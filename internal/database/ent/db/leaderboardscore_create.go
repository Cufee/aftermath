// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/leaderboardscore"
	"github.com/cufee/aftermath/internal/database/models"
)

// LeaderboardScoreCreate is the builder for creating a LeaderboardScore entity.
type LeaderboardScoreCreate struct {
	config
	mutation *LeaderboardScoreMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (lsc *LeaderboardScoreCreate) SetCreatedAt(t time.Time) *LeaderboardScoreCreate {
	lsc.mutation.SetCreatedAt(t)
	return lsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lsc *LeaderboardScoreCreate) SetNillableCreatedAt(t *time.Time) *LeaderboardScoreCreate {
	if t != nil {
		lsc.SetCreatedAt(*t)
	}
	return lsc
}

// SetUpdatedAt sets the "updated_at" field.
func (lsc *LeaderboardScoreCreate) SetUpdatedAt(t time.Time) *LeaderboardScoreCreate {
	lsc.mutation.SetUpdatedAt(t)
	return lsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lsc *LeaderboardScoreCreate) SetNillableUpdatedAt(t *time.Time) *LeaderboardScoreCreate {
	if t != nil {
		lsc.SetUpdatedAt(*t)
	}
	return lsc
}

// SetType sets the "type" field.
func (lsc *LeaderboardScoreCreate) SetType(mt models.ScoreType) *LeaderboardScoreCreate {
	lsc.mutation.SetType(mt)
	return lsc
}

// SetScore sets the "score" field.
func (lsc *LeaderboardScoreCreate) SetScore(f float32) *LeaderboardScoreCreate {
	lsc.mutation.SetScore(f)
	return lsc
}

// SetReferenceID sets the "reference_id" field.
func (lsc *LeaderboardScoreCreate) SetReferenceID(s string) *LeaderboardScoreCreate {
	lsc.mutation.SetReferenceID(s)
	return lsc
}

// SetLeaderboardID sets the "leaderboard_id" field.
func (lsc *LeaderboardScoreCreate) SetLeaderboardID(s string) *LeaderboardScoreCreate {
	lsc.mutation.SetLeaderboardID(s)
	return lsc
}

// SetMeta sets the "meta" field.
func (lsc *LeaderboardScoreCreate) SetMeta(m map[string]interface{}) *LeaderboardScoreCreate {
	lsc.mutation.SetMeta(m)
	return lsc
}

// SetID sets the "id" field.
func (lsc *LeaderboardScoreCreate) SetID(s string) *LeaderboardScoreCreate {
	lsc.mutation.SetID(s)
	return lsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lsc *LeaderboardScoreCreate) SetNillableID(s *string) *LeaderboardScoreCreate {
	if s != nil {
		lsc.SetID(*s)
	}
	return lsc
}

// Mutation returns the LeaderboardScoreMutation object of the builder.
func (lsc *LeaderboardScoreCreate) Mutation() *LeaderboardScoreMutation {
	return lsc.mutation
}

// Save creates the LeaderboardScore in the database.
func (lsc *LeaderboardScoreCreate) Save(ctx context.Context) (*LeaderboardScore, error) {
	lsc.defaults()
	return withHooks(ctx, lsc.sqlSave, lsc.mutation, lsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lsc *LeaderboardScoreCreate) SaveX(ctx context.Context) *LeaderboardScore {
	v, err := lsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lsc *LeaderboardScoreCreate) Exec(ctx context.Context) error {
	_, err := lsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsc *LeaderboardScoreCreate) ExecX(ctx context.Context) {
	if err := lsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lsc *LeaderboardScoreCreate) defaults() {
	if _, ok := lsc.mutation.CreatedAt(); !ok {
		v := leaderboardscore.DefaultCreatedAt()
		lsc.mutation.SetCreatedAt(v)
	}
	if _, ok := lsc.mutation.UpdatedAt(); !ok {
		v := leaderboardscore.DefaultUpdatedAt()
		lsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lsc.mutation.ID(); !ok {
		v := leaderboardscore.DefaultID()
		lsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsc *LeaderboardScoreCreate) check() error {
	if _, ok := lsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "LeaderboardScore.created_at"`)}
	}
	if _, ok := lsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "LeaderboardScore.updated_at"`)}
	}
	if _, ok := lsc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`db: missing required field "LeaderboardScore.type"`)}
	}
	if v, ok := lsc.mutation.GetType(); ok {
		if err := leaderboardscore.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`db: validator failed for field "LeaderboardScore.type": %w`, err)}
		}
	}
	if _, ok := lsc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New(`db: missing required field "LeaderboardScore.score"`)}
	}
	if _, ok := lsc.mutation.ReferenceID(); !ok {
		return &ValidationError{Name: "reference_id", err: errors.New(`db: missing required field "LeaderboardScore.reference_id"`)}
	}
	if _, ok := lsc.mutation.LeaderboardID(); !ok {
		return &ValidationError{Name: "leaderboard_id", err: errors.New(`db: missing required field "LeaderboardScore.leaderboard_id"`)}
	}
	if _, ok := lsc.mutation.Meta(); !ok {
		return &ValidationError{Name: "meta", err: errors.New(`db: missing required field "LeaderboardScore.meta"`)}
	}
	return nil
}

func (lsc *LeaderboardScoreCreate) sqlSave(ctx context.Context) (*LeaderboardScore, error) {
	if err := lsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected LeaderboardScore.ID type: %T", _spec.ID.Value)
		}
	}
	lsc.mutation.id = &_node.ID
	lsc.mutation.done = true
	return _node, nil
}

func (lsc *LeaderboardScoreCreate) createSpec() (*LeaderboardScore, *sqlgraph.CreateSpec) {
	var (
		_node = &LeaderboardScore{config: lsc.config}
		_spec = sqlgraph.NewCreateSpec(leaderboardscore.Table, sqlgraph.NewFieldSpec(leaderboardscore.FieldID, field.TypeString))
	)
	if id, ok := lsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lsc.mutation.CreatedAt(); ok {
		_spec.SetField(leaderboardscore.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lsc.mutation.UpdatedAt(); ok {
		_spec.SetField(leaderboardscore.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lsc.mutation.GetType(); ok {
		_spec.SetField(leaderboardscore.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := lsc.mutation.Score(); ok {
		_spec.SetField(leaderboardscore.FieldScore, field.TypeFloat32, value)
		_node.Score = value
	}
	if value, ok := lsc.mutation.ReferenceID(); ok {
		_spec.SetField(leaderboardscore.FieldReferenceID, field.TypeString, value)
		_node.ReferenceID = value
	}
	if value, ok := lsc.mutation.LeaderboardID(); ok {
		_spec.SetField(leaderboardscore.FieldLeaderboardID, field.TypeString, value)
		_node.LeaderboardID = value
	}
	if value, ok := lsc.mutation.Meta(); ok {
		_spec.SetField(leaderboardscore.FieldMeta, field.TypeJSON, value)
		_node.Meta = value
	}
	return _node, _spec
}

// LeaderboardScoreCreateBulk is the builder for creating many LeaderboardScore entities in bulk.
type LeaderboardScoreCreateBulk struct {
	config
	err      error
	builders []*LeaderboardScoreCreate
}

// Save creates the LeaderboardScore entities in the database.
func (lscb *LeaderboardScoreCreateBulk) Save(ctx context.Context) ([]*LeaderboardScore, error) {
	if lscb.err != nil {
		return nil, lscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lscb.builders))
	nodes := make([]*LeaderboardScore, len(lscb.builders))
	mutators := make([]Mutator, len(lscb.builders))
	for i := range lscb.builders {
		func(i int, root context.Context) {
			builder := lscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LeaderboardScoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lscb *LeaderboardScoreCreateBulk) SaveX(ctx context.Context) []*LeaderboardScore {
	v, err := lscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lscb *LeaderboardScoreCreateBulk) Exec(ctx context.Context) error {
	_, err := lscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lscb *LeaderboardScoreCreateBulk) ExecX(ctx context.Context) {
	if err := lscb.Exec(ctx); err != nil {
		panic(err)
	}
}
