// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"github.com/cufee/aftermath/internal/database/ent/db/vehiclesnapshot"
)

// VehicleSnapshotDelete is the builder for deleting a VehicleSnapshot entity.
type VehicleSnapshotDelete struct {
	config
	hooks    []Hook
	mutation *VehicleSnapshotMutation
}

// Where appends a list predicates to the VehicleSnapshotDelete builder.
func (vsd *VehicleSnapshotDelete) Where(ps ...predicate.VehicleSnapshot) *VehicleSnapshotDelete {
	vsd.mutation.Where(ps...)
	return vsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vsd *VehicleSnapshotDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vsd.sqlExec, vsd.mutation, vsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vsd *VehicleSnapshotDelete) ExecX(ctx context.Context) int {
	n, err := vsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vsd *VehicleSnapshotDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(vehiclesnapshot.Table, sqlgraph.NewFieldSpec(vehiclesnapshot.FieldID, field.TypeString))
	if ps := vsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vsd.mutation.done = true
	return affected, err
}

// VehicleSnapshotDeleteOne is the builder for deleting a single VehicleSnapshot entity.
type VehicleSnapshotDeleteOne struct {
	vsd *VehicleSnapshotDelete
}

// Where appends a list predicates to the VehicleSnapshotDelete builder.
func (vsdo *VehicleSnapshotDeleteOne) Where(ps ...predicate.VehicleSnapshot) *VehicleSnapshotDeleteOne {
	vsdo.vsd.mutation.Where(ps...)
	return vsdo
}

// Exec executes the deletion query.
func (vsdo *VehicleSnapshotDeleteOne) Exec(ctx context.Context) error {
	n, err := vsdo.vsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{vehiclesnapshot.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vsdo *VehicleSnapshotDeleteOne) ExecX(ctx context.Context) {
	if err := vsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
