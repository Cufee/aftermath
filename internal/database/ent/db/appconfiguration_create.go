// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/appconfiguration"
)

// AppConfigurationCreate is the builder for creating a AppConfiguration entity.
type AppConfigurationCreate struct {
	config
	mutation *AppConfigurationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (acc *AppConfigurationCreate) SetCreatedAt(i int64) *AppConfigurationCreate {
	acc.mutation.SetCreatedAt(i)
	return acc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acc *AppConfigurationCreate) SetNillableCreatedAt(i *int64) *AppConfigurationCreate {
	if i != nil {
		acc.SetCreatedAt(*i)
	}
	return acc
}

// SetUpdatedAt sets the "updated_at" field.
func (acc *AppConfigurationCreate) SetUpdatedAt(i int64) *AppConfigurationCreate {
	acc.mutation.SetUpdatedAt(i)
	return acc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acc *AppConfigurationCreate) SetNillableUpdatedAt(i *int64) *AppConfigurationCreate {
	if i != nil {
		acc.SetUpdatedAt(*i)
	}
	return acc
}

// SetKey sets the "key" field.
func (acc *AppConfigurationCreate) SetKey(s string) *AppConfigurationCreate {
	acc.mutation.SetKey(s)
	return acc
}

// SetValue sets the "value" field.
func (acc *AppConfigurationCreate) SetValue(a any) *AppConfigurationCreate {
	acc.mutation.SetValue(a)
	return acc
}

// SetMetadata sets the "metadata" field.
func (acc *AppConfigurationCreate) SetMetadata(m map[string]interface{}) *AppConfigurationCreate {
	acc.mutation.SetMetadata(m)
	return acc
}

// SetID sets the "id" field.
func (acc *AppConfigurationCreate) SetID(s string) *AppConfigurationCreate {
	acc.mutation.SetID(s)
	return acc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (acc *AppConfigurationCreate) SetNillableID(s *string) *AppConfigurationCreate {
	if s != nil {
		acc.SetID(*s)
	}
	return acc
}

// Mutation returns the AppConfigurationMutation object of the builder.
func (acc *AppConfigurationCreate) Mutation() *AppConfigurationMutation {
	return acc.mutation
}

// Save creates the AppConfiguration in the database.
func (acc *AppConfigurationCreate) Save(ctx context.Context) (*AppConfiguration, error) {
	acc.defaults()
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AppConfigurationCreate) SaveX(ctx context.Context) *AppConfiguration {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AppConfigurationCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AppConfigurationCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AppConfigurationCreate) defaults() {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		v := appconfiguration.DefaultCreatedAt()
		acc.mutation.SetCreatedAt(v)
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		v := appconfiguration.DefaultUpdatedAt()
		acc.mutation.SetUpdatedAt(v)
	}
	if _, ok := acc.mutation.ID(); !ok {
		v := appconfiguration.DefaultID()
		acc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AppConfigurationCreate) check() error {
	if _, ok := acc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "AppConfiguration.created_at"`)}
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "AppConfiguration.updated_at"`)}
	}
	if _, ok := acc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`db: missing required field "AppConfiguration.key"`)}
	}
	if v, ok := acc.mutation.Key(); ok {
		if err := appconfiguration.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`db: validator failed for field "AppConfiguration.key": %w`, err)}
		}
	}
	if _, ok := acc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`db: missing required field "AppConfiguration.value"`)}
	}
	return nil
}

func (acc *AppConfigurationCreate) sqlSave(ctx context.Context) (*AppConfiguration, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AppConfiguration.ID type: %T", _spec.ID.Value)
		}
	}
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *AppConfigurationCreate) createSpec() (*AppConfiguration, *sqlgraph.CreateSpec) {
	var (
		_node = &AppConfiguration{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(appconfiguration.Table, sqlgraph.NewFieldSpec(appconfiguration.FieldID, field.TypeString))
	)
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.SetField(appconfiguration.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := acc.mutation.UpdatedAt(); ok {
		_spec.SetField(appconfiguration.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := acc.mutation.Key(); ok {
		_spec.SetField(appconfiguration.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := acc.mutation.Value(); ok {
		_spec.SetField(appconfiguration.FieldValue, field.TypeJSON, value)
		_node.Value = value
	}
	if value, ok := acc.mutation.Metadata(); ok {
		_spec.SetField(appconfiguration.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	return _node, _spec
}

// AppConfigurationCreateBulk is the builder for creating many AppConfiguration entities in bulk.
type AppConfigurationCreateBulk struct {
	config
	err      error
	builders []*AppConfigurationCreate
}

// Save creates the AppConfiguration entities in the database.
func (accb *AppConfigurationCreateBulk) Save(ctx context.Context) ([]*AppConfiguration, error) {
	if accb.err != nil {
		return nil, accb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AppConfiguration, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppConfigurationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AppConfigurationCreateBulk) SaveX(ctx context.Context) []*AppConfiguration {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AppConfigurationCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AppConfigurationCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}
