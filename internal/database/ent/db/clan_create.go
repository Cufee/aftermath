// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/account"
	"github.com/cufee/aftermath/internal/database/ent/db/clan"
)

// ClanCreate is the builder for creating a Clan entity.
type ClanCreate struct {
	config
	mutation *ClanMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cc *ClanCreate) SetCreatedAt(i int) *ClanCreate {
	cc.mutation.SetCreatedAt(i)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ClanCreate) SetNillableCreatedAt(i *int) *ClanCreate {
	if i != nil {
		cc.SetCreatedAt(*i)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ClanCreate) SetUpdatedAt(i int) *ClanCreate {
	cc.mutation.SetUpdatedAt(i)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ClanCreate) SetNillableUpdatedAt(i *int) *ClanCreate {
	if i != nil {
		cc.SetUpdatedAt(*i)
	}
	return cc
}

// SetTag sets the "tag" field.
func (cc *ClanCreate) SetTag(s string) *ClanCreate {
	cc.mutation.SetTag(s)
	return cc
}

// SetName sets the "name" field.
func (cc *ClanCreate) SetName(s string) *ClanCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetEmblemID sets the "emblem_id" field.
func (cc *ClanCreate) SetEmblemID(s string) *ClanCreate {
	cc.mutation.SetEmblemID(s)
	return cc
}

// SetNillableEmblemID sets the "emblem_id" field if the given value is not nil.
func (cc *ClanCreate) SetNillableEmblemID(s *string) *ClanCreate {
	if s != nil {
		cc.SetEmblemID(*s)
	}
	return cc
}

// SetMembers sets the "members" field.
func (cc *ClanCreate) SetMembers(s []string) *ClanCreate {
	cc.mutation.SetMembers(s)
	return cc
}

// SetID sets the "id" field.
func (cc *ClanCreate) SetID(s string) *ClanCreate {
	cc.mutation.SetID(s)
	return cc
}

// AddAccountIDs adds the "accounts" edge to the Account entity by IDs.
func (cc *ClanCreate) AddAccountIDs(ids ...string) *ClanCreate {
	cc.mutation.AddAccountIDs(ids...)
	return cc
}

// AddAccounts adds the "accounts" edges to the Account entity.
func (cc *ClanCreate) AddAccounts(a ...*Account) *ClanCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cc.AddAccountIDs(ids...)
}

// Mutation returns the ClanMutation object of the builder.
func (cc *ClanCreate) Mutation() *ClanMutation {
	return cc.mutation
}

// Save creates the Clan in the database.
func (cc *ClanCreate) Save(ctx context.Context) (*Clan, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClanCreate) SaveX(ctx context.Context) *Clan {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ClanCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ClanCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ClanCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := clan.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := clan.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.EmblemID(); !ok {
		v := clan.DefaultEmblemID
		cc.mutation.SetEmblemID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClanCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`db: missing required field "Clan.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`db: missing required field "Clan.updated_at"`)}
	}
	if _, ok := cc.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`db: missing required field "Clan.tag"`)}
	}
	if v, ok := cc.mutation.Tag(); ok {
		if err := clan.TagValidator(v); err != nil {
			return &ValidationError{Name: "tag", err: fmt.Errorf(`db: validator failed for field "Clan.tag": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "Clan.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := clan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`db: validator failed for field "Clan.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Members(); !ok {
		return &ValidationError{Name: "members", err: errors.New(`db: missing required field "Clan.members"`)}
	}
	return nil
}

func (cc *ClanCreate) sqlSave(ctx context.Context) (*Clan, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Clan.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ClanCreate) createSpec() (*Clan, *sqlgraph.CreateSpec) {
	var (
		_node = &Clan{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(clan.Table, sqlgraph.NewFieldSpec(clan.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(clan.FieldCreatedAt, field.TypeInt, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(clan.FieldUpdatedAt, field.TypeInt, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Tag(); ok {
		_spec.SetField(clan.FieldTag, field.TypeString, value)
		_node.Tag = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(clan.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.EmblemID(); ok {
		_spec.SetField(clan.FieldEmblemID, field.TypeString, value)
		_node.EmblemID = value
	}
	if value, ok := cc.mutation.Members(); ok {
		_spec.SetField(clan.FieldMembers, field.TypeJSON, value)
		_node.Members = value
	}
	if nodes := cc.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clan.AccountsTable,
			Columns: []string{clan.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ClanCreateBulk is the builder for creating many Clan entities in bulk.
type ClanCreateBulk struct {
	config
	err      error
	builders []*ClanCreate
}

// Save creates the Clan entities in the database.
func (ccb *ClanCreateBulk) Save(ctx context.Context) ([]*Clan, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Clan, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ClanCreateBulk) SaveX(ctx context.Context) []*Clan {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ClanCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ClanCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
