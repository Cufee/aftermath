// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cufee/aftermath/internal/database/ent/db/predicate"
	"github.com/cufee/aftermath/internal/database/ent/db/vehicleaverage"
	"github.com/cufee/aftermath/internal/stats/frame"
)

// VehicleAverageUpdate is the builder for updating VehicleAverage entities.
type VehicleAverageUpdate struct {
	config
	hooks    []Hook
	mutation *VehicleAverageMutation
}

// Where appends a list predicates to the VehicleAverageUpdate builder.
func (vau *VehicleAverageUpdate) Where(ps ...predicate.VehicleAverage) *VehicleAverageUpdate {
	vau.mutation.Where(ps...)
	return vau
}

// SetUpdatedAt sets the "updated_at" field.
func (vau *VehicleAverageUpdate) SetUpdatedAt(i int) *VehicleAverageUpdate {
	vau.mutation.ResetUpdatedAt()
	vau.mutation.SetUpdatedAt(i)
	return vau
}

// AddUpdatedAt adds i to the "updated_at" field.
func (vau *VehicleAverageUpdate) AddUpdatedAt(i int) *VehicleAverageUpdate {
	vau.mutation.AddUpdatedAt(i)
	return vau
}

// SetData sets the "data" field.
func (vau *VehicleAverageUpdate) SetData(mf map[string]frame.StatsFrame) *VehicleAverageUpdate {
	vau.mutation.SetData(mf)
	return vau
}

// Mutation returns the VehicleAverageMutation object of the builder.
func (vau *VehicleAverageUpdate) Mutation() *VehicleAverageMutation {
	return vau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vau *VehicleAverageUpdate) Save(ctx context.Context) (int, error) {
	vau.defaults()
	return withHooks(ctx, vau.sqlSave, vau.mutation, vau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vau *VehicleAverageUpdate) SaveX(ctx context.Context) int {
	affected, err := vau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vau *VehicleAverageUpdate) Exec(ctx context.Context) error {
	_, err := vau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vau *VehicleAverageUpdate) ExecX(ctx context.Context) {
	if err := vau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vau *VehicleAverageUpdate) defaults() {
	if _, ok := vau.mutation.UpdatedAt(); !ok {
		v := vehicleaverage.UpdateDefaultUpdatedAt()
		vau.mutation.SetUpdatedAt(v)
	}
}

func (vau *VehicleAverageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(vehicleaverage.Table, vehicleaverage.Columns, sqlgraph.NewFieldSpec(vehicleaverage.FieldID, field.TypeString))
	if ps := vau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vau.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicleaverage.FieldUpdatedAt, field.TypeInt, value)
	}
	if value, ok := vau.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(vehicleaverage.FieldUpdatedAt, field.TypeInt, value)
	}
	if value, ok := vau.mutation.Data(); ok {
		_spec.SetField(vehicleaverage.FieldData, field.TypeJSON, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicleaverage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vau.mutation.done = true
	return n, nil
}

// VehicleAverageUpdateOne is the builder for updating a single VehicleAverage entity.
type VehicleAverageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VehicleAverageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vauo *VehicleAverageUpdateOne) SetUpdatedAt(i int) *VehicleAverageUpdateOne {
	vauo.mutation.ResetUpdatedAt()
	vauo.mutation.SetUpdatedAt(i)
	return vauo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (vauo *VehicleAverageUpdateOne) AddUpdatedAt(i int) *VehicleAverageUpdateOne {
	vauo.mutation.AddUpdatedAt(i)
	return vauo
}

// SetData sets the "data" field.
func (vauo *VehicleAverageUpdateOne) SetData(mf map[string]frame.StatsFrame) *VehicleAverageUpdateOne {
	vauo.mutation.SetData(mf)
	return vauo
}

// Mutation returns the VehicleAverageMutation object of the builder.
func (vauo *VehicleAverageUpdateOne) Mutation() *VehicleAverageMutation {
	return vauo.mutation
}

// Where appends a list predicates to the VehicleAverageUpdate builder.
func (vauo *VehicleAverageUpdateOne) Where(ps ...predicate.VehicleAverage) *VehicleAverageUpdateOne {
	vauo.mutation.Where(ps...)
	return vauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vauo *VehicleAverageUpdateOne) Select(field string, fields ...string) *VehicleAverageUpdateOne {
	vauo.fields = append([]string{field}, fields...)
	return vauo
}

// Save executes the query and returns the updated VehicleAverage entity.
func (vauo *VehicleAverageUpdateOne) Save(ctx context.Context) (*VehicleAverage, error) {
	vauo.defaults()
	return withHooks(ctx, vauo.sqlSave, vauo.mutation, vauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vauo *VehicleAverageUpdateOne) SaveX(ctx context.Context) *VehicleAverage {
	node, err := vauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vauo *VehicleAverageUpdateOne) Exec(ctx context.Context) error {
	_, err := vauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vauo *VehicleAverageUpdateOne) ExecX(ctx context.Context) {
	if err := vauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vauo *VehicleAverageUpdateOne) defaults() {
	if _, ok := vauo.mutation.UpdatedAt(); !ok {
		v := vehicleaverage.UpdateDefaultUpdatedAt()
		vauo.mutation.SetUpdatedAt(v)
	}
}

func (vauo *VehicleAverageUpdateOne) sqlSave(ctx context.Context) (_node *VehicleAverage, err error) {
	_spec := sqlgraph.NewUpdateSpec(vehicleaverage.Table, vehicleaverage.Columns, sqlgraph.NewFieldSpec(vehicleaverage.FieldID, field.TypeString))
	id, ok := vauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "VehicleAverage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vehicleaverage.FieldID)
		for _, f := range fields {
			if !vehicleaverage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != vehicleaverage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vauo.mutation.UpdatedAt(); ok {
		_spec.SetField(vehicleaverage.FieldUpdatedAt, field.TypeInt, value)
	}
	if value, ok := vauo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(vehicleaverage.FieldUpdatedAt, field.TypeInt, value)
	}
	if value, ok := vauo.mutation.Data(); ok {
		_spec.SetField(vehicleaverage.FieldData, field.TypeJSON, value)
	}
	_node = &VehicleAverage{config: vauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vehicleaverage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vauo.mutation.done = true
	return _node, nil
}
