//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ApplicationCommands = newApplicationCommandsTable("public", "application_commands", "")

type applicationCommandsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz
	Name        postgres.ColumnString
	Version     postgres.ColumnString
	OptionsHash postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ApplicationCommandsTable struct {
	applicationCommandsTable

	EXCLUDED applicationCommandsTable
}

// AS creates new ApplicationCommandsTable with assigned alias
func (a ApplicationCommandsTable) AS(alias string) *ApplicationCommandsTable {
	return newApplicationCommandsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ApplicationCommandsTable with assigned schema name
func (a ApplicationCommandsTable) FromSchema(schemaName string) *ApplicationCommandsTable {
	return newApplicationCommandsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ApplicationCommandsTable with assigned table prefix
func (a ApplicationCommandsTable) WithPrefix(prefix string) *ApplicationCommandsTable {
	return newApplicationCommandsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ApplicationCommandsTable with assigned table suffix
func (a ApplicationCommandsTable) WithSuffix(suffix string) *ApplicationCommandsTable {
	return newApplicationCommandsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newApplicationCommandsTable(schemaName, tableName, alias string) *ApplicationCommandsTable {
	return &ApplicationCommandsTable{
		applicationCommandsTable: newApplicationCommandsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newApplicationCommandsTableImpl("", "excluded", ""),
	}
}

func newApplicationCommandsTableImpl(schemaName, tableName, alias string) applicationCommandsTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		NameColumn        = postgres.StringColumn("name")
		VersionColumn     = postgres.StringColumn("version")
		OptionsHashColumn = postgres.StringColumn("options_hash")
		allColumns        = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, NameColumn, VersionColumn, OptionsHashColumn}
		mutableColumns    = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, NameColumn, VersionColumn, OptionsHashColumn}
		defaultColumns    = postgres.ColumnList{}
	)

	return applicationCommandsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		Name:        NameColumn,
		Version:     VersionColumn,
		OptionsHash: OptionsHashColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
