//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AuthNonces = newAuthNoncesTable("public", "auth_nonces", "")

type authNoncesTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	CreatedAt  postgres.ColumnTimestampz
	UpdatedAt  postgres.ColumnTimestampz
	Active     postgres.ColumnBool
	ExpiresAt  postgres.ColumnTimestampz
	Identifier postgres.ColumnString
	PublicID   postgres.ColumnString
	Metadata   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type AuthNoncesTable struct {
	authNoncesTable

	EXCLUDED authNoncesTable
}

// AS creates new AuthNoncesTable with assigned alias
func (a AuthNoncesTable) AS(alias string) *AuthNoncesTable {
	return newAuthNoncesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuthNoncesTable with assigned schema name
func (a AuthNoncesTable) FromSchema(schemaName string) *AuthNoncesTable {
	return newAuthNoncesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuthNoncesTable with assigned table prefix
func (a AuthNoncesTable) WithPrefix(prefix string) *AuthNoncesTable {
	return newAuthNoncesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuthNoncesTable with assigned table suffix
func (a AuthNoncesTable) WithSuffix(suffix string) *AuthNoncesTable {
	return newAuthNoncesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuthNoncesTable(schemaName, tableName, alias string) *AuthNoncesTable {
	return &AuthNoncesTable{
		authNoncesTable: newAuthNoncesTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newAuthNoncesTableImpl("", "excluded", ""),
	}
}

func newAuthNoncesTableImpl(schemaName, tableName, alias string) authNoncesTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		ActiveColumn     = postgres.BoolColumn("active")
		ExpiresAtColumn  = postgres.TimestampzColumn("expires_at")
		IdentifierColumn = postgres.StringColumn("identifier")
		PublicIDColumn   = postgres.StringColumn("public_id")
		MetadataColumn   = postgres.StringColumn("metadata")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, ActiveColumn, ExpiresAtColumn, IdentifierColumn, PublicIDColumn, MetadataColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, ActiveColumn, ExpiresAtColumn, IdentifierColumn, PublicIDColumn, MetadataColumn}
		defaultColumns   = postgres.ColumnList{}
	)

	return authNoncesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		Active:     ActiveColumn,
		ExpiresAt:  ExpiresAtColumn,
		Identifier: IdentifierColumn,
		PublicID:   PublicIDColumn,
		Metadata:   MetadataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
