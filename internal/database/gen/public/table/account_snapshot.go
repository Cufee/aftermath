//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AccountSnapshot = newAccountSnapshotTable("public", "account_snapshot", "")

type accountSnapshotTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	CreatedAt      postgres.ColumnString
	Type           postgres.ColumnString
	LastBattleTime postgres.ColumnString
	ReferenceID    postgres.ColumnString
	RatingBattles  postgres.ColumnInteger
	RatingFrame    postgres.ColumnBytea
	RegularBattles postgres.ColumnInteger
	RegularFrame   postgres.ColumnBytea
	AccountID      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type AccountSnapshotTable struct {
	accountSnapshotTable

	EXCLUDED accountSnapshotTable
}

// AS creates new AccountSnapshotTable with assigned alias
func (a AccountSnapshotTable) AS(alias string) *AccountSnapshotTable {
	return newAccountSnapshotTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountSnapshotTable with assigned schema name
func (a AccountSnapshotTable) FromSchema(schemaName string) *AccountSnapshotTable {
	return newAccountSnapshotTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountSnapshotTable with assigned table prefix
func (a AccountSnapshotTable) WithPrefix(prefix string) *AccountSnapshotTable {
	return newAccountSnapshotTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountSnapshotTable with assigned table suffix
func (a AccountSnapshotTable) WithSuffix(suffix string) *AccountSnapshotTable {
	return newAccountSnapshotTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountSnapshotTable(schemaName, tableName, alias string) *AccountSnapshotTable {
	return &AccountSnapshotTable{
		accountSnapshotTable: newAccountSnapshotTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newAccountSnapshotTableImpl("", "excluded", ""),
	}
}

func newAccountSnapshotTableImpl(schemaName, tableName, alias string) accountSnapshotTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		CreatedAtColumn      = postgres.StringColumn("created_at")
		TypeColumn           = postgres.StringColumn("type")
		LastBattleTimeColumn = postgres.StringColumn("last_battle_time")
		ReferenceIDColumn    = postgres.StringColumn("reference_id")
		RatingBattlesColumn  = postgres.IntegerColumn("rating_battles")
		RatingFrameColumn    = postgres.ByteaColumn("rating_frame")
		RegularBattlesColumn = postgres.IntegerColumn("regular_battles")
		RegularFrameColumn   = postgres.ByteaColumn("regular_frame")
		AccountIDColumn      = postgres.StringColumn("account_id")
		allColumns           = postgres.ColumnList{IDColumn, CreatedAtColumn, TypeColumn, LastBattleTimeColumn, ReferenceIDColumn, RatingBattlesColumn, RatingFrameColumn, RegularBattlesColumn, RegularFrameColumn, AccountIDColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, TypeColumn, LastBattleTimeColumn, ReferenceIDColumn, RatingBattlesColumn, RatingFrameColumn, RegularBattlesColumn, RegularFrameColumn, AccountIDColumn}
		defaultColumns       = postgres.ColumnList{RatingFrameColumn, RegularFrameColumn}
	)

	return accountSnapshotTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		Type:           TypeColumn,
		LastBattleTime: LastBattleTimeColumn,
		ReferenceID:    ReferenceIDColumn,
		RatingBattles:  RatingBattlesColumn,
		RatingFrame:    RatingFrameColumn,
		RegularBattles: RegularBattlesColumn,
		RegularFrame:   RegularFrameColumn,
		AccountID:      AccountIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
