//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WidgetSettings = newWidgetSettingsTable("public", "widget_settings", "")

type widgetSettingsTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnString
	CreatedAt          postgres.ColumnString
	UpdatedAt          postgres.ColumnString
	ReferenceID        postgres.ColumnString
	Title              postgres.ColumnString
	SessionFrom        postgres.ColumnString
	Metadata           postgres.ColumnBytea
	Styles             postgres.ColumnBytea
	UserID             postgres.ColumnString
	SessionReferenceID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type WidgetSettingsTable struct {
	widgetSettingsTable

	EXCLUDED widgetSettingsTable
}

// AS creates new WidgetSettingsTable with assigned alias
func (a WidgetSettingsTable) AS(alias string) *WidgetSettingsTable {
	return newWidgetSettingsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WidgetSettingsTable with assigned schema name
func (a WidgetSettingsTable) FromSchema(schemaName string) *WidgetSettingsTable {
	return newWidgetSettingsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WidgetSettingsTable with assigned table prefix
func (a WidgetSettingsTable) WithPrefix(prefix string) *WidgetSettingsTable {
	return newWidgetSettingsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WidgetSettingsTable with assigned table suffix
func (a WidgetSettingsTable) WithSuffix(suffix string) *WidgetSettingsTable {
	return newWidgetSettingsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWidgetSettingsTable(schemaName, tableName, alias string) *WidgetSettingsTable {
	return &WidgetSettingsTable{
		widgetSettingsTable: newWidgetSettingsTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newWidgetSettingsTableImpl("", "excluded", ""),
	}
}

func newWidgetSettingsTableImpl(schemaName, tableName, alias string) widgetSettingsTable {
	var (
		IDColumn                 = postgres.StringColumn("id")
		CreatedAtColumn          = postgres.StringColumn("created_at")
		UpdatedAtColumn          = postgres.StringColumn("updated_at")
		ReferenceIDColumn        = postgres.StringColumn("reference_id")
		TitleColumn              = postgres.StringColumn("title")
		SessionFromColumn        = postgres.StringColumn("session_from")
		MetadataColumn           = postgres.ByteaColumn("metadata")
		StylesColumn             = postgres.ByteaColumn("styles")
		UserIDColumn             = postgres.StringColumn("user_id")
		SessionReferenceIDColumn = postgres.StringColumn("session_reference_id")
		allColumns               = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, ReferenceIDColumn, TitleColumn, SessionFromColumn, MetadataColumn, StylesColumn, UserIDColumn, SessionReferenceIDColumn}
		mutableColumns           = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, ReferenceIDColumn, TitleColumn, SessionFromColumn, MetadataColumn, StylesColumn, UserIDColumn, SessionReferenceIDColumn}
		defaultColumns           = postgres.ColumnList{MetadataColumn, StylesColumn}
	)

	return widgetSettingsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		CreatedAt:          CreatedAtColumn,
		UpdatedAt:          UpdatedAtColumn,
		ReferenceID:        ReferenceIDColumn,
		Title:              TitleColumn,
		SessionFrom:        SessionFromColumn,
		Metadata:           MetadataColumn,
		Styles:             StylesColumn,
		UserID:             UserIDColumn,
		SessionReferenceID: SessionReferenceIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
