//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserConnection = newUserConnectionTable("public", "user_connection", "")

type userConnectionTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	CreatedAt   postgres.ColumnString
	UpdatedAt   postgres.ColumnString
	Type        postgres.ColumnString
	Verified    postgres.ColumnBool
	Selected    postgres.ColumnBool
	ReferenceID postgres.ColumnString
	Permissions postgres.ColumnString
	Metadata    postgres.ColumnBytea
	UserID      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type UserConnectionTable struct {
	userConnectionTable

	EXCLUDED userConnectionTable
}

// AS creates new UserConnectionTable with assigned alias
func (a UserConnectionTable) AS(alias string) *UserConnectionTable {
	return newUserConnectionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserConnectionTable with assigned schema name
func (a UserConnectionTable) FromSchema(schemaName string) *UserConnectionTable {
	return newUserConnectionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserConnectionTable with assigned table prefix
func (a UserConnectionTable) WithPrefix(prefix string) *UserConnectionTable {
	return newUserConnectionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserConnectionTable with assigned table suffix
func (a UserConnectionTable) WithSuffix(suffix string) *UserConnectionTable {
	return newUserConnectionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserConnectionTable(schemaName, tableName, alias string) *UserConnectionTable {
	return &UserConnectionTable{
		userConnectionTable: newUserConnectionTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newUserConnectionTableImpl("", "excluded", ""),
	}
}

func newUserConnectionTableImpl(schemaName, tableName, alias string) userConnectionTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		CreatedAtColumn   = postgres.StringColumn("created_at")
		UpdatedAtColumn   = postgres.StringColumn("updated_at")
		TypeColumn        = postgres.StringColumn("type")
		VerifiedColumn    = postgres.BoolColumn("verified")
		SelectedColumn    = postgres.BoolColumn("selected")
		ReferenceIDColumn = postgres.StringColumn("reference_id")
		PermissionsColumn = postgres.StringColumn("permissions")
		MetadataColumn    = postgres.ByteaColumn("metadata")
		UserIDColumn      = postgres.StringColumn("user_id")
		allColumns        = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, TypeColumn, VerifiedColumn, SelectedColumn, ReferenceIDColumn, PermissionsColumn, MetadataColumn, UserIDColumn}
		mutableColumns    = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, TypeColumn, VerifiedColumn, SelectedColumn, ReferenceIDColumn, PermissionsColumn, MetadataColumn, UserIDColumn}
		defaultColumns    = postgres.ColumnList{VerifiedColumn, SelectedColumn, PermissionsColumn, MetadataColumn}
	)

	return userConnectionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		Type:        TypeColumn,
		Verified:    VerifiedColumn,
		Selected:    SelectedColumn,
		ReferenceID: ReferenceIDColumn,
		Permissions: PermissionsColumn,
		Metadata:    MetadataColumn,
		UserID:      UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
