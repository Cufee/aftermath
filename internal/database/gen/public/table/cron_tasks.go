//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CronTasks = newCronTasksTable("public", "cron_tasks", "")

type cronTasksTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz
	Type           postgres.ColumnString
	ReferenceID    postgres.ColumnString
	Targets        postgres.ColumnString
	Status         postgres.ColumnString
	ScheduledAfter postgres.ColumnTimestampz
	LastRun        postgres.ColumnTimestampz
	TriesLeft      postgres.ColumnInteger
	Logs           postgres.ColumnString
	Data           postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type CronTasksTable struct {
	cronTasksTable

	EXCLUDED cronTasksTable
}

// AS creates new CronTasksTable with assigned alias
func (a CronTasksTable) AS(alias string) *CronTasksTable {
	return newCronTasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CronTasksTable with assigned schema name
func (a CronTasksTable) FromSchema(schemaName string) *CronTasksTable {
	return newCronTasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CronTasksTable with assigned table prefix
func (a CronTasksTable) WithPrefix(prefix string) *CronTasksTable {
	return newCronTasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CronTasksTable with assigned table suffix
func (a CronTasksTable) WithSuffix(suffix string) *CronTasksTable {
	return newCronTasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCronTasksTable(schemaName, tableName, alias string) *CronTasksTable {
	return &CronTasksTable{
		cronTasksTable: newCronTasksTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newCronTasksTableImpl("", "excluded", ""),
	}
}

func newCronTasksTableImpl(schemaName, tableName, alias string) cronTasksTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		TypeColumn           = postgres.StringColumn("type")
		ReferenceIDColumn    = postgres.StringColumn("reference_id")
		TargetsColumn        = postgres.StringColumn("targets")
		StatusColumn         = postgres.StringColumn("status")
		ScheduledAfterColumn = postgres.TimestampzColumn("scheduled_after")
		LastRunColumn        = postgres.TimestampzColumn("last_run")
		TriesLeftColumn      = postgres.IntegerColumn("tries_left")
		LogsColumn           = postgres.StringColumn("logs")
		DataColumn           = postgres.StringColumn("data")
		allColumns           = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, TypeColumn, ReferenceIDColumn, TargetsColumn, StatusColumn, ScheduledAfterColumn, LastRunColumn, TriesLeftColumn, LogsColumn, DataColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, TypeColumn, ReferenceIDColumn, TargetsColumn, StatusColumn, ScheduledAfterColumn, LastRunColumn, TriesLeftColumn, LogsColumn, DataColumn}
		defaultColumns       = postgres.ColumnList{TriesLeftColumn}
	)

	return cronTasksTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		Type:           TypeColumn,
		ReferenceID:    ReferenceIDColumn,
		Targets:        TargetsColumn,
		Status:         StatusColumn,
		ScheduledAfter: ScheduledAfterColumn,
		LastRun:        LastRunColumn,
		TriesLeft:      TriesLeftColumn,
		Logs:           LogsColumn,
		Data:           DataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
