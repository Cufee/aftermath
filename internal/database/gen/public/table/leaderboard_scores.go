//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var LeaderboardScores = newLeaderboardScoresTable("public", "leaderboard_scores", "")

type leaderboardScoresTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnString
	CreatedAt     postgres.ColumnTimestampz
	UpdatedAt     postgres.ColumnTimestampz
	Type          postgres.ColumnString
	Score         postgres.ColumnFloat
	ReferenceID   postgres.ColumnString
	LeaderboardID postgres.ColumnString
	Meta          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type LeaderboardScoresTable struct {
	leaderboardScoresTable

	EXCLUDED leaderboardScoresTable
}

// AS creates new LeaderboardScoresTable with assigned alias
func (a LeaderboardScoresTable) AS(alias string) *LeaderboardScoresTable {
	return newLeaderboardScoresTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LeaderboardScoresTable with assigned schema name
func (a LeaderboardScoresTable) FromSchema(schemaName string) *LeaderboardScoresTable {
	return newLeaderboardScoresTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LeaderboardScoresTable with assigned table prefix
func (a LeaderboardScoresTable) WithPrefix(prefix string) *LeaderboardScoresTable {
	return newLeaderboardScoresTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LeaderboardScoresTable with assigned table suffix
func (a LeaderboardScoresTable) WithSuffix(suffix string) *LeaderboardScoresTable {
	return newLeaderboardScoresTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLeaderboardScoresTable(schemaName, tableName, alias string) *LeaderboardScoresTable {
	return &LeaderboardScoresTable{
		leaderboardScoresTable: newLeaderboardScoresTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newLeaderboardScoresTableImpl("", "excluded", ""),
	}
}

func newLeaderboardScoresTableImpl(schemaName, tableName, alias string) leaderboardScoresTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn     = postgres.TimestampzColumn("updated_at")
		TypeColumn          = postgres.StringColumn("type")
		ScoreColumn         = postgres.FloatColumn("score")
		ReferenceIDColumn   = postgres.StringColumn("reference_id")
		LeaderboardIDColumn = postgres.StringColumn("leaderboard_id")
		MetaColumn          = postgres.StringColumn("meta")
		allColumns          = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, TypeColumn, ScoreColumn, ReferenceIDColumn, LeaderboardIDColumn, MetaColumn}
		mutableColumns      = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, TypeColumn, ScoreColumn, ReferenceIDColumn, LeaderboardIDColumn, MetaColumn}
		defaultColumns      = postgres.ColumnList{}
	)

	return leaderboardScoresTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,
		Type:          TypeColumn,
		Score:         ScoreColumn,
		ReferenceID:   ReferenceIDColumn,
		LeaderboardID: LeaderboardIDColumn,
		Meta:          MetaColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
