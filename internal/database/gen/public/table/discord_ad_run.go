//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DiscordAdRun = newDiscordAdRunTable("public", "discord_ad_run", "")

type discordAdRunTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	CreatedAt  postgres.ColumnString
	UpdatedAt  postgres.ColumnString
	CampaignID postgres.ColumnString
	ContentID  postgres.ColumnString
	GuildID    postgres.ColumnString
	ChannelID  postgres.ColumnString
	MessageID  postgres.ColumnString
	Locale     postgres.ColumnString
	Tags       postgres.ColumnString
	Metadata   postgres.ColumnBytea

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type DiscordAdRunTable struct {
	discordAdRunTable

	EXCLUDED discordAdRunTable
}

// AS creates new DiscordAdRunTable with assigned alias
func (a DiscordAdRunTable) AS(alias string) *DiscordAdRunTable {
	return newDiscordAdRunTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DiscordAdRunTable with assigned schema name
func (a DiscordAdRunTable) FromSchema(schemaName string) *DiscordAdRunTable {
	return newDiscordAdRunTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DiscordAdRunTable with assigned table prefix
func (a DiscordAdRunTable) WithPrefix(prefix string) *DiscordAdRunTable {
	return newDiscordAdRunTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DiscordAdRunTable with assigned table suffix
func (a DiscordAdRunTable) WithSuffix(suffix string) *DiscordAdRunTable {
	return newDiscordAdRunTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDiscordAdRunTable(schemaName, tableName, alias string) *DiscordAdRunTable {
	return &DiscordAdRunTable{
		discordAdRunTable: newDiscordAdRunTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newDiscordAdRunTableImpl("", "excluded", ""),
	}
}

func newDiscordAdRunTableImpl(schemaName, tableName, alias string) discordAdRunTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CreatedAtColumn  = postgres.StringColumn("created_at")
		UpdatedAtColumn  = postgres.StringColumn("updated_at")
		CampaignIDColumn = postgres.StringColumn("campaign_id")
		ContentIDColumn  = postgres.StringColumn("content_id")
		GuildIDColumn    = postgres.StringColumn("guild_id")
		ChannelIDColumn  = postgres.StringColumn("channel_id")
		MessageIDColumn  = postgres.StringColumn("message_id")
		LocaleColumn     = postgres.StringColumn("locale")
		TagsColumn       = postgres.StringColumn("tags")
		MetadataColumn   = postgres.ByteaColumn("metadata")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, CampaignIDColumn, ContentIDColumn, GuildIDColumn, ChannelIDColumn, MessageIDColumn, LocaleColumn, TagsColumn, MetadataColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, CampaignIDColumn, ContentIDColumn, GuildIDColumn, ChannelIDColumn, MessageIDColumn, LocaleColumn, TagsColumn, MetadataColumn}
		defaultColumns   = postgres.ColumnList{MetadataColumn}
	)

	return discordAdRunTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		CampaignID: CampaignIDColumn,
		ContentID:  ContentIDColumn,
		GuildID:    GuildIDColumn,
		ChannelID:  ChannelIDColumn,
		MessageID:  MessageIDColumn,
		Locale:     LocaleColumn,
		Tags:       TagsColumn,
		Metadata:   MetadataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
