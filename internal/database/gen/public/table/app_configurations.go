//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AppConfigurations = newAppConfigurationsTable("public", "app_configurations", "")

type appConfigurationsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz
	Key       postgres.ColumnString
	Value     postgres.ColumnString
	Metadata  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type AppConfigurationsTable struct {
	appConfigurationsTable

	EXCLUDED appConfigurationsTable
}

// AS creates new AppConfigurationsTable with assigned alias
func (a AppConfigurationsTable) AS(alias string) *AppConfigurationsTable {
	return newAppConfigurationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AppConfigurationsTable with assigned schema name
func (a AppConfigurationsTable) FromSchema(schemaName string) *AppConfigurationsTable {
	return newAppConfigurationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AppConfigurationsTable with assigned table prefix
func (a AppConfigurationsTable) WithPrefix(prefix string) *AppConfigurationsTable {
	return newAppConfigurationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AppConfigurationsTable with assigned table suffix
func (a AppConfigurationsTable) WithSuffix(suffix string) *AppConfigurationsTable {
	return newAppConfigurationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAppConfigurationsTable(schemaName, tableName, alias string) *AppConfigurationsTable {
	return &AppConfigurationsTable{
		appConfigurationsTable: newAppConfigurationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newAppConfigurationsTableImpl("", "excluded", ""),
	}
}

func newAppConfigurationsTableImpl(schemaName, tableName, alias string) appConfigurationsTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		KeyColumn       = postgres.StringColumn("key")
		ValueColumn     = postgres.StringColumn("value")
		MetadataColumn  = postgres.StringColumn("metadata")
		allColumns      = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, KeyColumn, ValueColumn, MetadataColumn}
		mutableColumns  = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, KeyColumn, ValueColumn, MetadataColumn}
		defaultColumns  = postgres.ColumnList{}
	)

	return appConfigurationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		Key:       KeyColumn,
		Value:     ValueColumn,
		Metadata:  MetadataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
