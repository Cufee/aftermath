//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CronTask = newCronTaskTable("public", "cron_task", "")

type cronTaskTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	CreatedAt      postgres.ColumnString
	UpdatedAt      postgres.ColumnString
	Type           postgres.ColumnString
	ReferenceID    postgres.ColumnString
	Targets        postgres.ColumnBytea
	Status         postgres.ColumnString
	ScheduledAfter postgres.ColumnString
	LastRun        postgres.ColumnString
	TriesLeft      postgres.ColumnInteger
	Logs           postgres.ColumnBytea
	Data           postgres.ColumnBytea

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type CronTaskTable struct {
	cronTaskTable

	EXCLUDED cronTaskTable
}

// AS creates new CronTaskTable with assigned alias
func (a CronTaskTable) AS(alias string) *CronTaskTable {
	return newCronTaskTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CronTaskTable with assigned schema name
func (a CronTaskTable) FromSchema(schemaName string) *CronTaskTable {
	return newCronTaskTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CronTaskTable with assigned table prefix
func (a CronTaskTable) WithPrefix(prefix string) *CronTaskTable {
	return newCronTaskTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CronTaskTable with assigned table suffix
func (a CronTaskTable) WithSuffix(suffix string) *CronTaskTable {
	return newCronTaskTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCronTaskTable(schemaName, tableName, alias string) *CronTaskTable {
	return &CronTaskTable{
		cronTaskTable: newCronTaskTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newCronTaskTableImpl("", "excluded", ""),
	}
}

func newCronTaskTableImpl(schemaName, tableName, alias string) cronTaskTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		CreatedAtColumn      = postgres.StringColumn("created_at")
		UpdatedAtColumn      = postgres.StringColumn("updated_at")
		TypeColumn           = postgres.StringColumn("type")
		ReferenceIDColumn    = postgres.StringColumn("reference_id")
		TargetsColumn        = postgres.ByteaColumn("targets")
		StatusColumn         = postgres.StringColumn("status")
		ScheduledAfterColumn = postgres.StringColumn("scheduled_after")
		LastRunColumn        = postgres.StringColumn("last_run")
		TriesLeftColumn      = postgres.IntegerColumn("tries_left")
		LogsColumn           = postgres.ByteaColumn("logs")
		DataColumn           = postgres.ByteaColumn("data")
		allColumns           = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, TypeColumn, ReferenceIDColumn, TargetsColumn, StatusColumn, ScheduledAfterColumn, LastRunColumn, TriesLeftColumn, LogsColumn, DataColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, TypeColumn, ReferenceIDColumn, TargetsColumn, StatusColumn, ScheduledAfterColumn, LastRunColumn, TriesLeftColumn, LogsColumn, DataColumn}
		defaultColumns       = postgres.ColumnList{TargetsColumn, TriesLeftColumn, LogsColumn, DataColumn}
	)

	return cronTaskTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		Type:           TypeColumn,
		ReferenceID:    ReferenceIDColumn,
		Targets:        TargetsColumn,
		Status:         StatusColumn,
		ScheduledAfter: ScheduledAfterColumn,
		LastRun:        LastRunColumn,
		TriesLeft:      TriesLeftColumn,
		Logs:           LogsColumn,
		Data:           DataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
