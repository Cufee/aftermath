//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserConnections = newUserConnectionsTable("public", "user_connections", "")

type userConnectionsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz
	Type        postgres.ColumnString
	ReferenceID postgres.ColumnString
	Permissions postgres.ColumnString
	Metadata    postgres.ColumnString
	UserID      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type UserConnectionsTable struct {
	userConnectionsTable

	EXCLUDED userConnectionsTable
}

// AS creates new UserConnectionsTable with assigned alias
func (a UserConnectionsTable) AS(alias string) *UserConnectionsTable {
	return newUserConnectionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserConnectionsTable with assigned schema name
func (a UserConnectionsTable) FromSchema(schemaName string) *UserConnectionsTable {
	return newUserConnectionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserConnectionsTable with assigned table prefix
func (a UserConnectionsTable) WithPrefix(prefix string) *UserConnectionsTable {
	return newUserConnectionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserConnectionsTable with assigned table suffix
func (a UserConnectionsTable) WithSuffix(suffix string) *UserConnectionsTable {
	return newUserConnectionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserConnectionsTable(schemaName, tableName, alias string) *UserConnectionsTable {
	return &UserConnectionsTable{
		userConnectionsTable: newUserConnectionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newUserConnectionsTableImpl("", "excluded", ""),
	}
}

func newUserConnectionsTableImpl(schemaName, tableName, alias string) userConnectionsTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		TypeColumn        = postgres.StringColumn("type")
		ReferenceIDColumn = postgres.StringColumn("reference_id")
		PermissionsColumn = postgres.StringColumn("permissions")
		MetadataColumn    = postgres.StringColumn("metadata")
		UserIDColumn      = postgres.StringColumn("user_id")
		allColumns        = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, TypeColumn, ReferenceIDColumn, PermissionsColumn, MetadataColumn, UserIDColumn}
		mutableColumns    = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, TypeColumn, ReferenceIDColumn, PermissionsColumn, MetadataColumn, UserIDColumn}
		defaultColumns    = postgres.ColumnList{PermissionsColumn}
	)

	return userConnectionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		Type:        TypeColumn,
		ReferenceID: ReferenceIDColumn,
		Permissions: PermissionsColumn,
		Metadata:    MetadataColumn,
		UserID:      UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
