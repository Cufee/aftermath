//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AuthNonce = newAuthNonceTable("public", "auth_nonce", "")

type authNonceTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	CreatedAt  postgres.ColumnString
	UpdatedAt  postgres.ColumnString
	Active     postgres.ColumnBool
	ExpiresAt  postgres.ColumnString
	Identifier postgres.ColumnString
	PublicID   postgres.ColumnString
	Metadata   postgres.ColumnBytea

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type AuthNonceTable struct {
	authNonceTable

	EXCLUDED authNonceTable
}

// AS creates new AuthNonceTable with assigned alias
func (a AuthNonceTable) AS(alias string) *AuthNonceTable {
	return newAuthNonceTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AuthNonceTable with assigned schema name
func (a AuthNonceTable) FromSchema(schemaName string) *AuthNonceTable {
	return newAuthNonceTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AuthNonceTable with assigned table prefix
func (a AuthNonceTable) WithPrefix(prefix string) *AuthNonceTable {
	return newAuthNonceTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AuthNonceTable with assigned table suffix
func (a AuthNonceTable) WithSuffix(suffix string) *AuthNonceTable {
	return newAuthNonceTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAuthNonceTable(schemaName, tableName, alias string) *AuthNonceTable {
	return &AuthNonceTable{
		authNonceTable: newAuthNonceTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newAuthNonceTableImpl("", "excluded", ""),
	}
}

func newAuthNonceTableImpl(schemaName, tableName, alias string) authNonceTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		CreatedAtColumn  = postgres.StringColumn("created_at")
		UpdatedAtColumn  = postgres.StringColumn("updated_at")
		ActiveColumn     = postgres.BoolColumn("active")
		ExpiresAtColumn  = postgres.StringColumn("expires_at")
		IdentifierColumn = postgres.StringColumn("identifier")
		PublicIDColumn   = postgres.StringColumn("public_id")
		MetadataColumn   = postgres.ByteaColumn("metadata")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, ActiveColumn, ExpiresAtColumn, IdentifierColumn, PublicIDColumn, MetadataColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, ActiveColumn, ExpiresAtColumn, IdentifierColumn, PublicIDColumn, MetadataColumn}
		defaultColumns   = postgres.ColumnList{MetadataColumn}
	)

	return authNonceTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		Active:     ActiveColumn,
		ExpiresAt:  ExpiresAtColumn,
		Identifier: IdentifierColumn,
		PublicID:   PublicIDColumn,
		Metadata:   MetadataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
