//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VehicleAchievementsSnapshot = newVehicleAchievementsSnapshotTable("public", "vehicle_achievements_snapshot", "")

type vehicleAchievementsSnapshotTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	CreatedAt      postgres.ColumnString
	Type           postgres.ColumnString
	VehicleID      postgres.ColumnString
	ReferenceID    postgres.ColumnString
	Battles        postgres.ColumnInteger
	LastBattleTime postgres.ColumnString
	Frame          postgres.ColumnBytea
	AccountID      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type VehicleAchievementsSnapshotTable struct {
	vehicleAchievementsSnapshotTable

	EXCLUDED vehicleAchievementsSnapshotTable
}

// AS creates new VehicleAchievementsSnapshotTable with assigned alias
func (a VehicleAchievementsSnapshotTable) AS(alias string) *VehicleAchievementsSnapshotTable {
	return newVehicleAchievementsSnapshotTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VehicleAchievementsSnapshotTable with assigned schema name
func (a VehicleAchievementsSnapshotTable) FromSchema(schemaName string) *VehicleAchievementsSnapshotTable {
	return newVehicleAchievementsSnapshotTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VehicleAchievementsSnapshotTable with assigned table prefix
func (a VehicleAchievementsSnapshotTable) WithPrefix(prefix string) *VehicleAchievementsSnapshotTable {
	return newVehicleAchievementsSnapshotTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VehicleAchievementsSnapshotTable with assigned table suffix
func (a VehicleAchievementsSnapshotTable) WithSuffix(suffix string) *VehicleAchievementsSnapshotTable {
	return newVehicleAchievementsSnapshotTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVehicleAchievementsSnapshotTable(schemaName, tableName, alias string) *VehicleAchievementsSnapshotTable {
	return &VehicleAchievementsSnapshotTable{
		vehicleAchievementsSnapshotTable: newVehicleAchievementsSnapshotTableImpl(schemaName, tableName, alias),
		EXCLUDED:                         newVehicleAchievementsSnapshotTableImpl("", "excluded", ""),
	}
}

func newVehicleAchievementsSnapshotTableImpl(schemaName, tableName, alias string) vehicleAchievementsSnapshotTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		CreatedAtColumn      = postgres.StringColumn("created_at")
		TypeColumn           = postgres.StringColumn("type")
		VehicleIDColumn      = postgres.StringColumn("vehicle_id")
		ReferenceIDColumn    = postgres.StringColumn("reference_id")
		BattlesColumn        = postgres.IntegerColumn("battles")
		LastBattleTimeColumn = postgres.StringColumn("last_battle_time")
		FrameColumn          = postgres.ByteaColumn("frame")
		AccountIDColumn      = postgres.StringColumn("account_id")
		allColumns           = postgres.ColumnList{IDColumn, CreatedAtColumn, TypeColumn, VehicleIDColumn, ReferenceIDColumn, BattlesColumn, LastBattleTimeColumn, FrameColumn, AccountIDColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, TypeColumn, VehicleIDColumn, ReferenceIDColumn, BattlesColumn, LastBattleTimeColumn, FrameColumn, AccountIDColumn}
		defaultColumns       = postgres.ColumnList{FrameColumn}
	)

	return vehicleAchievementsSnapshotTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		Type:           TypeColumn,
		VehicleID:      VehicleIDColumn,
		ReferenceID:    ReferenceIDColumn,
		Battles:        BattlesColumn,
		LastBattleTime: LastBattleTimeColumn,
		Frame:          FrameColumn,
		AccountID:      AccountIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
