//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var GameMap = newGameMapTable("public", "game_map", "")

type gameMapTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnString
	CreatedAt       postgres.ColumnString
	UpdatedAt       postgres.ColumnString
	GameModes       postgres.ColumnBytea
	SupremacyPoints postgres.ColumnInteger
	LocalizedNames  postgres.ColumnBytea

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type GameMapTable struct {
	gameMapTable

	EXCLUDED gameMapTable
}

// AS creates new GameMapTable with assigned alias
func (a GameMapTable) AS(alias string) *GameMapTable {
	return newGameMapTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GameMapTable with assigned schema name
func (a GameMapTable) FromSchema(schemaName string) *GameMapTable {
	return newGameMapTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GameMapTable with assigned table prefix
func (a GameMapTable) WithPrefix(prefix string) *GameMapTable {
	return newGameMapTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GameMapTable with assigned table suffix
func (a GameMapTable) WithSuffix(suffix string) *GameMapTable {
	return newGameMapTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGameMapTable(schemaName, tableName, alias string) *GameMapTable {
	return &GameMapTable{
		gameMapTable: newGameMapTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newGameMapTableImpl("", "excluded", ""),
	}
}

func newGameMapTableImpl(schemaName, tableName, alias string) gameMapTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		CreatedAtColumn       = postgres.StringColumn("created_at")
		UpdatedAtColumn       = postgres.StringColumn("updated_at")
		GameModesColumn       = postgres.ByteaColumn("game_modes")
		SupremacyPointsColumn = postgres.IntegerColumn("supremacy_points")
		LocalizedNamesColumn  = postgres.ByteaColumn("localized_names")
		allColumns            = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, GameModesColumn, SupremacyPointsColumn, LocalizedNamesColumn}
		mutableColumns        = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, GameModesColumn, SupremacyPointsColumn, LocalizedNamesColumn}
		defaultColumns        = postgres.ColumnList{GameModesColumn, LocalizedNamesColumn}
	)

	return gameMapTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,
		GameModes:       GameModesColumn,
		SupremacyPoints: SupremacyPointsColumn,
		LocalizedNames:  LocalizedNamesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
