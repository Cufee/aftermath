//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AtlasSchemaRevisions = newAtlasSchemaRevisionsTable("public", "atlas_schema_revisions", "")

type atlasSchemaRevisionsTable struct {
	postgres.Table

	// Columns
	Version         postgres.ColumnString
	Description     postgres.ColumnString
	Type            postgres.ColumnInteger
	Applied         postgres.ColumnInteger
	Total           postgres.ColumnInteger
	ExecutedAt      postgres.ColumnTimestampz
	ExecutionTime   postgres.ColumnInteger
	Error           postgres.ColumnString
	ErrorStmt       postgres.ColumnString
	Hash            postgres.ColumnString
	PartialHashes   postgres.ColumnString
	OperatorVersion postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type AtlasSchemaRevisionsTable struct {
	atlasSchemaRevisionsTable

	EXCLUDED atlasSchemaRevisionsTable
}

// AS creates new AtlasSchemaRevisionsTable with assigned alias
func (a AtlasSchemaRevisionsTable) AS(alias string) *AtlasSchemaRevisionsTable {
	return newAtlasSchemaRevisionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AtlasSchemaRevisionsTable with assigned schema name
func (a AtlasSchemaRevisionsTable) FromSchema(schemaName string) *AtlasSchemaRevisionsTable {
	return newAtlasSchemaRevisionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AtlasSchemaRevisionsTable with assigned table prefix
func (a AtlasSchemaRevisionsTable) WithPrefix(prefix string) *AtlasSchemaRevisionsTable {
	return newAtlasSchemaRevisionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AtlasSchemaRevisionsTable with assigned table suffix
func (a AtlasSchemaRevisionsTable) WithSuffix(suffix string) *AtlasSchemaRevisionsTable {
	return newAtlasSchemaRevisionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAtlasSchemaRevisionsTable(schemaName, tableName, alias string) *AtlasSchemaRevisionsTable {
	return &AtlasSchemaRevisionsTable{
		atlasSchemaRevisionsTable: newAtlasSchemaRevisionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newAtlasSchemaRevisionsTableImpl("", "excluded", ""),
	}
}

func newAtlasSchemaRevisionsTableImpl(schemaName, tableName, alias string) atlasSchemaRevisionsTable {
	var (
		VersionColumn         = postgres.StringColumn("version")
		DescriptionColumn     = postgres.StringColumn("description")
		TypeColumn            = postgres.IntegerColumn("type")
		AppliedColumn         = postgres.IntegerColumn("applied")
		TotalColumn           = postgres.IntegerColumn("total")
		ExecutedAtColumn      = postgres.TimestampzColumn("executed_at")
		ExecutionTimeColumn   = postgres.IntegerColumn("execution_time")
		ErrorColumn           = postgres.StringColumn("error")
		ErrorStmtColumn       = postgres.StringColumn("error_stmt")
		HashColumn            = postgres.StringColumn("hash")
		PartialHashesColumn   = postgres.StringColumn("partial_hashes")
		OperatorVersionColumn = postgres.StringColumn("operator_version")
		allColumns            = postgres.ColumnList{VersionColumn, DescriptionColumn, TypeColumn, AppliedColumn, TotalColumn, ExecutedAtColumn, ExecutionTimeColumn, ErrorColumn, ErrorStmtColumn, HashColumn, PartialHashesColumn, OperatorVersionColumn}
		mutableColumns        = postgres.ColumnList{DescriptionColumn, TypeColumn, AppliedColumn, TotalColumn, ExecutedAtColumn, ExecutionTimeColumn, ErrorColumn, ErrorStmtColumn, HashColumn, PartialHashesColumn, OperatorVersionColumn}
		defaultColumns        = postgres.ColumnList{TypeColumn, AppliedColumn, TotalColumn}
	)

	return atlasSchemaRevisionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Version:         VersionColumn,
		Description:     DescriptionColumn,
		Type:            TypeColumn,
		Applied:         AppliedColumn,
		Total:           TotalColumn,
		ExecutedAt:      ExecutedAtColumn,
		ExecutionTime:   ExecutionTimeColumn,
		Error:           ErrorColumn,
		ErrorStmt:       ErrorStmtColumn,
		Hash:            HashColumn,
		PartialHashes:   PartialHashesColumn,
		OperatorVersion: OperatorVersionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
