//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DiscordInteraction = newDiscordInteractionTable("public", "discord_interaction", "")

type discordInteractionTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	CreatedAt postgres.ColumnString
	UpdatedAt postgres.ColumnString
	Result    postgres.ColumnString
	EventID   postgres.ColumnString
	GuildID   postgres.ColumnString
	Snowflake postgres.ColumnString
	ChannelID postgres.ColumnString
	MessageID postgres.ColumnString
	Type      postgres.ColumnString
	Locale    postgres.ColumnString
	Metadata  postgres.ColumnBytea
	UserID    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type DiscordInteractionTable struct {
	discordInteractionTable

	EXCLUDED discordInteractionTable
}

// AS creates new DiscordInteractionTable with assigned alias
func (a DiscordInteractionTable) AS(alias string) *DiscordInteractionTable {
	return newDiscordInteractionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DiscordInteractionTable with assigned schema name
func (a DiscordInteractionTable) FromSchema(schemaName string) *DiscordInteractionTable {
	return newDiscordInteractionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DiscordInteractionTable with assigned table prefix
func (a DiscordInteractionTable) WithPrefix(prefix string) *DiscordInteractionTable {
	return newDiscordInteractionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DiscordInteractionTable with assigned table suffix
func (a DiscordInteractionTable) WithSuffix(suffix string) *DiscordInteractionTable {
	return newDiscordInteractionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDiscordInteractionTable(schemaName, tableName, alias string) *DiscordInteractionTable {
	return &DiscordInteractionTable{
		discordInteractionTable: newDiscordInteractionTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newDiscordInteractionTableImpl("", "excluded", ""),
	}
}

func newDiscordInteractionTableImpl(schemaName, tableName, alias string) discordInteractionTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		CreatedAtColumn = postgres.StringColumn("created_at")
		UpdatedAtColumn = postgres.StringColumn("updated_at")
		ResultColumn    = postgres.StringColumn("result")
		EventIDColumn   = postgres.StringColumn("event_id")
		GuildIDColumn   = postgres.StringColumn("guild_id")
		SnowflakeColumn = postgres.StringColumn("snowflake")
		ChannelIDColumn = postgres.StringColumn("channel_id")
		MessageIDColumn = postgres.StringColumn("message_id")
		TypeColumn      = postgres.StringColumn("type")
		LocaleColumn    = postgres.StringColumn("locale")
		MetadataColumn  = postgres.ByteaColumn("metadata")
		UserIDColumn    = postgres.StringColumn("user_id")
		allColumns      = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, ResultColumn, EventIDColumn, GuildIDColumn, SnowflakeColumn, ChannelIDColumn, MessageIDColumn, TypeColumn, LocaleColumn, MetadataColumn, UserIDColumn}
		mutableColumns  = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, ResultColumn, EventIDColumn, GuildIDColumn, SnowflakeColumn, ChannelIDColumn, MessageIDColumn, TypeColumn, LocaleColumn, MetadataColumn, UserIDColumn}
		defaultColumns  = postgres.ColumnList{SnowflakeColumn, MetadataColumn}
	)

	return discordInteractionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		Result:    ResultColumn,
		EventID:   EventIDColumn,
		GuildID:   GuildIDColumn,
		Snowflake: SnowflakeColumn,
		ChannelID: ChannelIDColumn,
		MessageID: MessageIDColumn,
		Type:      TypeColumn,
		Locale:    LocaleColumn,
		Metadata:  MetadataColumn,
		UserID:    UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
