//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserSubscription = newUserSubscriptionTable("public", "user_subscription", "")

type userSubscriptionTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	CreatedAt   postgres.ColumnString
	UpdatedAt   postgres.ColumnString
	Type        postgres.ColumnString
	ExpiresAt   postgres.ColumnString
	Permissions postgres.ColumnString
	ReferenceID postgres.ColumnString
	UserID      postgres.ColumnString
	Metadata    postgres.ColumnBytea

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type UserSubscriptionTable struct {
	userSubscriptionTable

	EXCLUDED userSubscriptionTable
}

// AS creates new UserSubscriptionTable with assigned alias
func (a UserSubscriptionTable) AS(alias string) *UserSubscriptionTable {
	return newUserSubscriptionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserSubscriptionTable with assigned schema name
func (a UserSubscriptionTable) FromSchema(schemaName string) *UserSubscriptionTable {
	return newUserSubscriptionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserSubscriptionTable with assigned table prefix
func (a UserSubscriptionTable) WithPrefix(prefix string) *UserSubscriptionTable {
	return newUserSubscriptionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserSubscriptionTable with assigned table suffix
func (a UserSubscriptionTable) WithSuffix(suffix string) *UserSubscriptionTable {
	return newUserSubscriptionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserSubscriptionTable(schemaName, tableName, alias string) *UserSubscriptionTable {
	return &UserSubscriptionTable{
		userSubscriptionTable: newUserSubscriptionTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newUserSubscriptionTableImpl("", "excluded", ""),
	}
}

func newUserSubscriptionTableImpl(schemaName, tableName, alias string) userSubscriptionTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		CreatedAtColumn   = postgres.StringColumn("created_at")
		UpdatedAtColumn   = postgres.StringColumn("updated_at")
		TypeColumn        = postgres.StringColumn("type")
		ExpiresAtColumn   = postgres.StringColumn("expires_at")
		PermissionsColumn = postgres.StringColumn("permissions")
		ReferenceIDColumn = postgres.StringColumn("reference_id")
		UserIDColumn      = postgres.StringColumn("user_id")
		MetadataColumn    = postgres.ByteaColumn("metadata")
		allColumns        = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, TypeColumn, ExpiresAtColumn, PermissionsColumn, ReferenceIDColumn, UserIDColumn, MetadataColumn}
		mutableColumns    = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, TypeColumn, ExpiresAtColumn, PermissionsColumn, ReferenceIDColumn, UserIDColumn, MetadataColumn}
		defaultColumns    = postgres.ColumnList{MetadataColumn}
	)

	return userSubscriptionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		Type:        TypeColumn,
		ExpiresAt:   ExpiresAtColumn,
		Permissions: PermissionsColumn,
		ReferenceID: ReferenceIDColumn,
		UserID:      UserIDColumn,
		Metadata:    MetadataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
