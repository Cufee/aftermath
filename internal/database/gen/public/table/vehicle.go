//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Vehicle = newVehicleTable("public", "vehicle", "")

type vehicleTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnString
	CreatedAt      postgres.ColumnString
	UpdatedAt      postgres.ColumnString
	Tier           postgres.ColumnInteger
	LocalizedNames postgres.ColumnBytea

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type VehicleTable struct {
	vehicleTable

	EXCLUDED vehicleTable
}

// AS creates new VehicleTable with assigned alias
func (a VehicleTable) AS(alias string) *VehicleTable {
	return newVehicleTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VehicleTable with assigned schema name
func (a VehicleTable) FromSchema(schemaName string) *VehicleTable {
	return newVehicleTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VehicleTable with assigned table prefix
func (a VehicleTable) WithPrefix(prefix string) *VehicleTable {
	return newVehicleTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VehicleTable with assigned table suffix
func (a VehicleTable) WithSuffix(suffix string) *VehicleTable {
	return newVehicleTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVehicleTable(schemaName, tableName, alias string) *VehicleTable {
	return &VehicleTable{
		vehicleTable: newVehicleTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newVehicleTableImpl("", "excluded", ""),
	}
}

func newVehicleTableImpl(schemaName, tableName, alias string) vehicleTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		CreatedAtColumn      = postgres.StringColumn("created_at")
		UpdatedAtColumn      = postgres.StringColumn("updated_at")
		TierColumn           = postgres.IntegerColumn("tier")
		LocalizedNamesColumn = postgres.ByteaColumn("localized_names")
		allColumns           = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, TierColumn, LocalizedNamesColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, TierColumn, LocalizedNamesColumn}
		defaultColumns       = postgres.ColumnList{LocalizedNamesColumn}
	)

	return vehicleTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		Tier:           TierColumn,
		LocalizedNames: LocalizedNamesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
