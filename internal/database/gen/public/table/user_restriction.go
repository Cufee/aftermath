//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserRestriction = newUserRestrictionTable("public", "user_restriction", "")

type userRestrictionTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnString
	CreatedAt        postgres.ColumnString
	UpdatedAt        postgres.ColumnString
	ExpiresAt        postgres.ColumnString
	Type             postgres.ColumnString
	Restriction      postgres.ColumnString
	PublicReason     postgres.ColumnString
	ModeratorComment postgres.ColumnString
	Events           postgres.ColumnBytea
	UserID           postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type UserRestrictionTable struct {
	userRestrictionTable

	EXCLUDED userRestrictionTable
}

// AS creates new UserRestrictionTable with assigned alias
func (a UserRestrictionTable) AS(alias string) *UserRestrictionTable {
	return newUserRestrictionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserRestrictionTable with assigned schema name
func (a UserRestrictionTable) FromSchema(schemaName string) *UserRestrictionTable {
	return newUserRestrictionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserRestrictionTable with assigned table prefix
func (a UserRestrictionTable) WithPrefix(prefix string) *UserRestrictionTable {
	return newUserRestrictionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserRestrictionTable with assigned table suffix
func (a UserRestrictionTable) WithSuffix(suffix string) *UserRestrictionTable {
	return newUserRestrictionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserRestrictionTable(schemaName, tableName, alias string) *UserRestrictionTable {
	return &UserRestrictionTable{
		userRestrictionTable: newUserRestrictionTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newUserRestrictionTableImpl("", "excluded", ""),
	}
}

func newUserRestrictionTableImpl(schemaName, tableName, alias string) userRestrictionTable {
	var (
		IDColumn               = postgres.StringColumn("id")
		CreatedAtColumn        = postgres.StringColumn("created_at")
		UpdatedAtColumn        = postgres.StringColumn("updated_at")
		ExpiresAtColumn        = postgres.StringColumn("expires_at")
		TypeColumn             = postgres.StringColumn("type")
		RestrictionColumn      = postgres.StringColumn("restriction")
		PublicReasonColumn     = postgres.StringColumn("public_reason")
		ModeratorCommentColumn = postgres.StringColumn("moderator_comment")
		EventsColumn           = postgres.ByteaColumn("events")
		UserIDColumn           = postgres.StringColumn("user_id")
		allColumns             = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, ExpiresAtColumn, TypeColumn, RestrictionColumn, PublicReasonColumn, ModeratorCommentColumn, EventsColumn, UserIDColumn}
		mutableColumns         = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, ExpiresAtColumn, TypeColumn, RestrictionColumn, PublicReasonColumn, ModeratorCommentColumn, EventsColumn, UserIDColumn}
		defaultColumns         = postgres.ColumnList{EventsColumn}
	)

	return userRestrictionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		CreatedAt:        CreatedAtColumn,
		UpdatedAt:        UpdatedAtColumn,
		ExpiresAt:        ExpiresAtColumn,
		Type:             TypeColumn,
		Restriction:      RestrictionColumn,
		PublicReason:     PublicReasonColumn,
		ModeratorComment: ModeratorCommentColumn,
		Events:           EventsColumn,
		UserID:           UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
