//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Accounts = newAccountsTable("", "accounts", "")

type accountsTable struct {
	sqlite.Table

	// Columns
	ID               sqlite.ColumnString
	CreatedAt        sqlite.ColumnTimestamp
	UpdatedAt        sqlite.ColumnTimestamp
	LastBattleTime   sqlite.ColumnTimestamp
	AccountCreatedAt sqlite.ColumnTimestamp
	Realm            sqlite.ColumnString
	Nickname         sqlite.ColumnString
	Private          sqlite.ColumnBool
	ClanID           sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type AccountsTable struct {
	accountsTable

	EXCLUDED accountsTable
}

// AS creates new AccountsTable with assigned alias
func (a AccountsTable) AS(alias string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountsTable with assigned schema name
func (a AccountsTable) FromSchema(schemaName string) *AccountsTable {
	return newAccountsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountsTable with assigned table prefix
func (a AccountsTable) WithPrefix(prefix string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountsTable with assigned table suffix
func (a AccountsTable) WithSuffix(suffix string) *AccountsTable {
	return newAccountsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountsTable(schemaName, tableName, alias string) *AccountsTable {
	return &AccountsTable{
		accountsTable: newAccountsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newAccountsTableImpl("", "excluded", ""),
	}
}

func newAccountsTableImpl(schemaName, tableName, alias string) accountsTable {
	var (
		IDColumn               = sqlite.StringColumn("id")
		CreatedAtColumn        = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn        = sqlite.TimestampColumn("updated_at")
		LastBattleTimeColumn   = sqlite.TimestampColumn("last_battle_time")
		AccountCreatedAtColumn = sqlite.TimestampColumn("account_created_at")
		RealmColumn            = sqlite.StringColumn("realm")
		NicknameColumn         = sqlite.StringColumn("nickname")
		PrivateColumn          = sqlite.BoolColumn("private")
		ClanIDColumn           = sqlite.StringColumn("clan_id")
		allColumns             = sqlite.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, LastBattleTimeColumn, AccountCreatedAtColumn, RealmColumn, NicknameColumn, PrivateColumn, ClanIDColumn}
		mutableColumns         = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn, LastBattleTimeColumn, AccountCreatedAtColumn, RealmColumn, NicknameColumn, PrivateColumn, ClanIDColumn}
	)

	return accountsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		CreatedAt:        CreatedAtColumn,
		UpdatedAt:        UpdatedAtColumn,
		LastBattleTime:   LastBattleTimeColumn,
		AccountCreatedAt: AccountCreatedAtColumn,
		Realm:            RealmColumn,
		Nickname:         NicknameColumn,
		Private:          PrivateColumn,
		ClanID:           ClanIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
