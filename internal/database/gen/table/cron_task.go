//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var CronTask = newCronTaskTable("", "cron_task", "")

type cronTaskTable struct {
	sqlite.Table

	// Columns
	ID             sqlite.ColumnString
	CreatedAt      sqlite.ColumnTimestamp
	UpdatedAt      sqlite.ColumnTimestamp
	Type           sqlite.ColumnString
	ReferenceID    sqlite.ColumnString
	Targets        sqlite.ColumnString
	Status         sqlite.ColumnString
	ScheduledAfter sqlite.ColumnTimestamp
	LastRun        sqlite.ColumnTimestamp
	TriesLeft      sqlite.ColumnInteger
	Logs           sqlite.ColumnString
	Data           sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type CronTaskTable struct {
	cronTaskTable

	EXCLUDED cronTaskTable
}

// AS creates new CronTaskTable with assigned alias
func (a CronTaskTable) AS(alias string) *CronTaskTable {
	return newCronTaskTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CronTaskTable with assigned schema name
func (a CronTaskTable) FromSchema(schemaName string) *CronTaskTable {
	return newCronTaskTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CronTaskTable with assigned table prefix
func (a CronTaskTable) WithPrefix(prefix string) *CronTaskTable {
	return newCronTaskTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CronTaskTable with assigned table suffix
func (a CronTaskTable) WithSuffix(suffix string) *CronTaskTable {
	return newCronTaskTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCronTaskTable(schemaName, tableName, alias string) *CronTaskTable {
	return &CronTaskTable{
		cronTaskTable: newCronTaskTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newCronTaskTableImpl("", "excluded", ""),
	}
}

func newCronTaskTableImpl(schemaName, tableName, alias string) cronTaskTable {
	var (
		IDColumn             = sqlite.StringColumn("id")
		CreatedAtColumn      = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn      = sqlite.TimestampColumn("updated_at")
		TypeColumn           = sqlite.StringColumn("type")
		ReferenceIDColumn    = sqlite.StringColumn("reference_id")
		TargetsColumn        = sqlite.StringColumn("targets")
		StatusColumn         = sqlite.StringColumn("status")
		ScheduledAfterColumn = sqlite.TimestampColumn("scheduled_after")
		LastRunColumn        = sqlite.TimestampColumn("last_run")
		TriesLeftColumn      = sqlite.IntegerColumn("tries_left")
		LogsColumn           = sqlite.StringColumn("logs")
		DataColumn           = sqlite.StringColumn("data")
		allColumns           = sqlite.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, TypeColumn, ReferenceIDColumn, TargetsColumn, StatusColumn, ScheduledAfterColumn, LastRunColumn, TriesLeftColumn, LogsColumn, DataColumn}
		mutableColumns       = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn, TypeColumn, ReferenceIDColumn, TargetsColumn, StatusColumn, ScheduledAfterColumn, LastRunColumn, TriesLeftColumn, LogsColumn, DataColumn}
	)

	return cronTaskTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		Type:           TypeColumn,
		ReferenceID:    ReferenceIDColumn,
		Targets:        TargetsColumn,
		Status:         StatusColumn,
		ScheduledAfter: ScheduledAfterColumn,
		LastRun:        LastRunColumn,
		TriesLeft:      TriesLeftColumn,
		Logs:           LogsColumn,
		Data:           DataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
