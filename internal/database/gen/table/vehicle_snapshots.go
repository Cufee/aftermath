//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var VehicleSnapshots = newVehicleSnapshotsTable("", "vehicle_snapshots", "")

type vehicleSnapshotsTable struct {
	sqlite.Table

	// Columns
	ID             sqlite.ColumnString
	CreatedAt      sqlite.ColumnTimestamp
	UpdatedAt      sqlite.ColumnTimestamp
	Type           sqlite.ColumnString
	VehicleID      sqlite.ColumnString
	ReferenceID    sqlite.ColumnString
	Battles        sqlite.ColumnInteger
	LastBattleTime sqlite.ColumnTimestamp
	Frame          sqlite.ColumnString
	AccountID      sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type VehicleSnapshotsTable struct {
	vehicleSnapshotsTable

	EXCLUDED vehicleSnapshotsTable
}

// AS creates new VehicleSnapshotsTable with assigned alias
func (a VehicleSnapshotsTable) AS(alias string) *VehicleSnapshotsTable {
	return newVehicleSnapshotsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VehicleSnapshotsTable with assigned schema name
func (a VehicleSnapshotsTable) FromSchema(schemaName string) *VehicleSnapshotsTable {
	return newVehicleSnapshotsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VehicleSnapshotsTable with assigned table prefix
func (a VehicleSnapshotsTable) WithPrefix(prefix string) *VehicleSnapshotsTable {
	return newVehicleSnapshotsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VehicleSnapshotsTable with assigned table suffix
func (a VehicleSnapshotsTable) WithSuffix(suffix string) *VehicleSnapshotsTable {
	return newVehicleSnapshotsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVehicleSnapshotsTable(schemaName, tableName, alias string) *VehicleSnapshotsTable {
	return &VehicleSnapshotsTable{
		vehicleSnapshotsTable: newVehicleSnapshotsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newVehicleSnapshotsTableImpl("", "excluded", ""),
	}
}

func newVehicleSnapshotsTableImpl(schemaName, tableName, alias string) vehicleSnapshotsTable {
	var (
		IDColumn             = sqlite.StringColumn("id")
		CreatedAtColumn      = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn      = sqlite.TimestampColumn("updated_at")
		TypeColumn           = sqlite.StringColumn("type")
		VehicleIDColumn      = sqlite.StringColumn("vehicle_id")
		ReferenceIDColumn    = sqlite.StringColumn("reference_id")
		BattlesColumn        = sqlite.IntegerColumn("battles")
		LastBattleTimeColumn = sqlite.TimestampColumn("last_battle_time")
		FrameColumn          = sqlite.StringColumn("frame")
		AccountIDColumn      = sqlite.StringColumn("account_id")
		allColumns           = sqlite.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, TypeColumn, VehicleIDColumn, ReferenceIDColumn, BattlesColumn, LastBattleTimeColumn, FrameColumn, AccountIDColumn}
		mutableColumns       = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn, TypeColumn, VehicleIDColumn, ReferenceIDColumn, BattlesColumn, LastBattleTimeColumn, FrameColumn, AccountIDColumn}
	)

	return vehicleSnapshotsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		Type:           TypeColumn,
		VehicleID:      VehicleIDColumn,
		ReferenceID:    ReferenceIDColumn,
		Battles:        BattlesColumn,
		LastBattleTime: LastBattleTimeColumn,
		Frame:          FrameColumn,
		AccountID:      AccountIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
