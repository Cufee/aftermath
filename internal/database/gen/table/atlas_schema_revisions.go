//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var AtlasSchemaRevisions = newAtlasSchemaRevisionsTable("", "atlas_schema_revisions", "")

type atlasSchemaRevisionsTable struct {
	sqlite.Table

	// Columns
	Version         sqlite.ColumnString
	Description     sqlite.ColumnString
	Type            sqlite.ColumnInteger
	Applied         sqlite.ColumnInteger
	Total           sqlite.ColumnInteger
	ExecutedAt      sqlite.ColumnTimestamp
	ExecutionTime   sqlite.ColumnInteger
	Error           sqlite.ColumnString
	ErrorStmt       sqlite.ColumnString
	Hash            sqlite.ColumnString
	PartialHashes   sqlite.ColumnString
	OperatorVersion sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type AtlasSchemaRevisionsTable struct {
	atlasSchemaRevisionsTable

	EXCLUDED atlasSchemaRevisionsTable
}

// AS creates new AtlasSchemaRevisionsTable with assigned alias
func (a AtlasSchemaRevisionsTable) AS(alias string) *AtlasSchemaRevisionsTable {
	return newAtlasSchemaRevisionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AtlasSchemaRevisionsTable with assigned schema name
func (a AtlasSchemaRevisionsTable) FromSchema(schemaName string) *AtlasSchemaRevisionsTable {
	return newAtlasSchemaRevisionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AtlasSchemaRevisionsTable with assigned table prefix
func (a AtlasSchemaRevisionsTable) WithPrefix(prefix string) *AtlasSchemaRevisionsTable {
	return newAtlasSchemaRevisionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AtlasSchemaRevisionsTable with assigned table suffix
func (a AtlasSchemaRevisionsTable) WithSuffix(suffix string) *AtlasSchemaRevisionsTable {
	return newAtlasSchemaRevisionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAtlasSchemaRevisionsTable(schemaName, tableName, alias string) *AtlasSchemaRevisionsTable {
	return &AtlasSchemaRevisionsTable{
		atlasSchemaRevisionsTable: newAtlasSchemaRevisionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newAtlasSchemaRevisionsTableImpl("", "excluded", ""),
	}
}

func newAtlasSchemaRevisionsTableImpl(schemaName, tableName, alias string) atlasSchemaRevisionsTable {
	var (
		VersionColumn         = sqlite.StringColumn("version")
		DescriptionColumn     = sqlite.StringColumn("description")
		TypeColumn            = sqlite.IntegerColumn("type")
		AppliedColumn         = sqlite.IntegerColumn("applied")
		TotalColumn           = sqlite.IntegerColumn("total")
		ExecutedAtColumn      = sqlite.TimestampColumn("executed_at")
		ExecutionTimeColumn   = sqlite.IntegerColumn("execution_time")
		ErrorColumn           = sqlite.StringColumn("error")
		ErrorStmtColumn       = sqlite.StringColumn("error_stmt")
		HashColumn            = sqlite.StringColumn("hash")
		PartialHashesColumn   = sqlite.StringColumn("partial_hashes")
		OperatorVersionColumn = sqlite.StringColumn("operator_version")
		allColumns            = sqlite.ColumnList{VersionColumn, DescriptionColumn, TypeColumn, AppliedColumn, TotalColumn, ExecutedAtColumn, ExecutionTimeColumn, ErrorColumn, ErrorStmtColumn, HashColumn, PartialHashesColumn, OperatorVersionColumn}
		mutableColumns        = sqlite.ColumnList{DescriptionColumn, TypeColumn, AppliedColumn, TotalColumn, ExecutedAtColumn, ExecutionTimeColumn, ErrorColumn, ErrorStmtColumn, HashColumn, PartialHashesColumn, OperatorVersionColumn}
	)

	return atlasSchemaRevisionsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Version:         VersionColumn,
		Description:     DescriptionColumn,
		Type:            TypeColumn,
		Applied:         AppliedColumn,
		Total:           TotalColumn,
		ExecutedAt:      ExecutedAtColumn,
		ExecutionTime:   ExecutionTimeColumn,
		Error:           ErrorColumn,
		ErrorStmt:       ErrorStmtColumn,
		Hash:            HashColumn,
		PartialHashes:   PartialHashesColumn,
		OperatorVersion: OperatorVersionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
