//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ModerationRequest = newModerationRequestTable("", "moderation_request", "")

type moderationRequestTable struct {
	sqlite.Table

	// Columns
	ID               sqlite.ColumnString
	CreatedAt        sqlite.ColumnString
	UpdatedAt        sqlite.ColumnString
	ModeratorComment sqlite.ColumnString
	Context          sqlite.ColumnString
	ReferenceID      sqlite.ColumnString
	ActionReason     sqlite.ColumnString
	ActionStatus     sqlite.ColumnString
	Data             sqlite.ColumnString
	RequestorID      sqlite.ColumnString
	ModeratorID      sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ModerationRequestTable struct {
	moderationRequestTable

	EXCLUDED moderationRequestTable
}

// AS creates new ModerationRequestTable with assigned alias
func (a ModerationRequestTable) AS(alias string) *ModerationRequestTable {
	return newModerationRequestTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ModerationRequestTable with assigned schema name
func (a ModerationRequestTable) FromSchema(schemaName string) *ModerationRequestTable {
	return newModerationRequestTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ModerationRequestTable with assigned table prefix
func (a ModerationRequestTable) WithPrefix(prefix string) *ModerationRequestTable {
	return newModerationRequestTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ModerationRequestTable with assigned table suffix
func (a ModerationRequestTable) WithSuffix(suffix string) *ModerationRequestTable {
	return newModerationRequestTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newModerationRequestTable(schemaName, tableName, alias string) *ModerationRequestTable {
	return &ModerationRequestTable{
		moderationRequestTable: newModerationRequestTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newModerationRequestTableImpl("", "excluded", ""),
	}
}

func newModerationRequestTableImpl(schemaName, tableName, alias string) moderationRequestTable {
	var (
		IDColumn               = sqlite.StringColumn("id")
		CreatedAtColumn        = sqlite.StringColumn("created_at")
		UpdatedAtColumn        = sqlite.StringColumn("updated_at")
		ModeratorCommentColumn = sqlite.StringColumn("moderator_comment")
		ContextColumn          = sqlite.StringColumn("context")
		ReferenceIDColumn      = sqlite.StringColumn("reference_id")
		ActionReasonColumn     = sqlite.StringColumn("action_reason")
		ActionStatusColumn     = sqlite.StringColumn("action_status")
		DataColumn             = sqlite.StringColumn("data")
		RequestorIDColumn      = sqlite.StringColumn("requestor_id")
		ModeratorIDColumn      = sqlite.StringColumn("moderator_id")
		allColumns             = sqlite.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, ModeratorCommentColumn, ContextColumn, ReferenceIDColumn, ActionReasonColumn, ActionStatusColumn, DataColumn, RequestorIDColumn, ModeratorIDColumn}
		mutableColumns         = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn, ModeratorCommentColumn, ContextColumn, ReferenceIDColumn, ActionReasonColumn, ActionStatusColumn, DataColumn, RequestorIDColumn, ModeratorIDColumn}
	)

	return moderationRequestTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		CreatedAt:        CreatedAtColumn,
		UpdatedAt:        UpdatedAtColumn,
		ModeratorComment: ModeratorCommentColumn,
		Context:          ContextColumn,
		ReferenceID:      ReferenceIDColumn,
		ActionReason:     ActionReasonColumn,
		ActionStatus:     ActionStatusColumn,
		Data:             DataColumn,
		RequestorID:      RequestorIDColumn,
		ModeratorID:      ModeratorIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
