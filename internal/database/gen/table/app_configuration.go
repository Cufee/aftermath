//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var AppConfiguration = newAppConfigurationTable("", "app_configuration", "")

type appConfigurationTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnString
	CreatedAt sqlite.ColumnString
	UpdatedAt sqlite.ColumnString
	Key       sqlite.ColumnString
	Value     sqlite.ColumnString
	Metadata  sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type AppConfigurationTable struct {
	appConfigurationTable

	EXCLUDED appConfigurationTable
}

// AS creates new AppConfigurationTable with assigned alias
func (a AppConfigurationTable) AS(alias string) *AppConfigurationTable {
	return newAppConfigurationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AppConfigurationTable with assigned schema name
func (a AppConfigurationTable) FromSchema(schemaName string) *AppConfigurationTable {
	return newAppConfigurationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AppConfigurationTable with assigned table prefix
func (a AppConfigurationTable) WithPrefix(prefix string) *AppConfigurationTable {
	return newAppConfigurationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AppConfigurationTable with assigned table suffix
func (a AppConfigurationTable) WithSuffix(suffix string) *AppConfigurationTable {
	return newAppConfigurationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAppConfigurationTable(schemaName, tableName, alias string) *AppConfigurationTable {
	return &AppConfigurationTable{
		appConfigurationTable: newAppConfigurationTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newAppConfigurationTableImpl("", "excluded", ""),
	}
}

func newAppConfigurationTableImpl(schemaName, tableName, alias string) appConfigurationTable {
	var (
		IDColumn        = sqlite.StringColumn("id")
		CreatedAtColumn = sqlite.StringColumn("created_at")
		UpdatedAtColumn = sqlite.StringColumn("updated_at")
		KeyColumn       = sqlite.StringColumn("key")
		ValueColumn     = sqlite.StringColumn("value")
		MetadataColumn  = sqlite.StringColumn("metadata")
		allColumns      = sqlite.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, KeyColumn, ValueColumn, MetadataColumn}
		mutableColumns  = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn, KeyColumn, ValueColumn, MetadataColumn}
	)

	return appConfigurationTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		Key:       KeyColumn,
		Value:     ValueColumn,
		Metadata:  MetadataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
