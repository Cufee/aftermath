//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var UserConnection = newUserConnectionTable("", "user_connection", "")

type userConnectionTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnString
	CreatedAt   sqlite.ColumnTimestamp
	UpdatedAt   sqlite.ColumnTimestamp
	Type        sqlite.ColumnString
	ReferenceID sqlite.ColumnString
	Permissions sqlite.ColumnString
	Metadata    sqlite.ColumnString
	UserID      sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type UserConnectionTable struct {
	userConnectionTable

	EXCLUDED userConnectionTable
}

// AS creates new UserConnectionTable with assigned alias
func (a UserConnectionTable) AS(alias string) *UserConnectionTable {
	return newUserConnectionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserConnectionTable with assigned schema name
func (a UserConnectionTable) FromSchema(schemaName string) *UserConnectionTable {
	return newUserConnectionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserConnectionTable with assigned table prefix
func (a UserConnectionTable) WithPrefix(prefix string) *UserConnectionTable {
	return newUserConnectionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserConnectionTable with assigned table suffix
func (a UserConnectionTable) WithSuffix(suffix string) *UserConnectionTable {
	return newUserConnectionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserConnectionTable(schemaName, tableName, alias string) *UserConnectionTable {
	return &UserConnectionTable{
		userConnectionTable: newUserConnectionTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newUserConnectionTableImpl("", "excluded", ""),
	}
}

func newUserConnectionTableImpl(schemaName, tableName, alias string) userConnectionTable {
	var (
		IDColumn          = sqlite.StringColumn("id")
		CreatedAtColumn   = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn   = sqlite.TimestampColumn("updated_at")
		TypeColumn        = sqlite.StringColumn("type")
		ReferenceIDColumn = sqlite.StringColumn("reference_id")
		PermissionsColumn = sqlite.StringColumn("permissions")
		MetadataColumn    = sqlite.StringColumn("metadata")
		UserIDColumn      = sqlite.StringColumn("user_id")
		allColumns        = sqlite.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, TypeColumn, ReferenceIDColumn, PermissionsColumn, MetadataColumn, UserIDColumn}
		mutableColumns    = sqlite.ColumnList{CreatedAtColumn, UpdatedAtColumn, TypeColumn, ReferenceIDColumn, PermissionsColumn, MetadataColumn, UserIDColumn}
	)

	return userConnectionTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		Type:        TypeColumn,
		ReferenceID: ReferenceIDColumn,
		Permissions: PermissionsColumn,
		Metadata:    MetadataColumn,
		UserID:      UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
