datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

//
// === App Data ===
//

// Stores some long-lived app condiguration values
// the values here would typically be set programmatically
model AppConfiguration {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  valueEncoded    Bytes
  metadataEncoded Bytes @default("")

  @@map("app_configurations")
}

// A record of a cron task
model CronTask {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type           String
  referenceId    String
  targetsEncoded Bytes

  status         String
  lastRun        DateTime
  scheduledAfter DateTime

  logsEncoded Bytes @default("")
  dataEncoded Bytes @default("")

  @@index([referenceId])
  @@index([status, referenceId, scheduledAfter])
  @@index([lastRun, status])
  @@map("cron_tasks")
}

//
// === Authentification ===
//

// // A single-use nonce value generated during the auth flow
// model AuthNonce {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   expiresAt DateTime

//   referenceId     String
//   metadataEncoded Bytes  @default("")

//   @@index([createdAt])
//   @@index([referenceId])
//   @@index([referenceId, expiresAt])
//   @@map("auth_nonces")
//   @@ignore
// }

//
// === Users ===
//

// User record withing the app, primary id is a Discord user ID
model User {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions  String
  featureFlags Int    @default(0)

  subscriptions UserSubscription[]
  connections   UserConnection[]
  content       UserContent[]

  @@map("users")
}

// A subscription record for a user
model UserSubscription {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  type        String
  expiresAt   DateTime
  referenceId String
  permissions String

  @@map("user_subscriptions")
}

// A connection to some external service for a user, like Google or Wargaming
//   - ReferenceID here would be a user id received from the external service
model UserConnection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  type        String
  permissions String
  referenceId String

  metadataEncoded Bytes @default("")

  @@index([userId])
  @@index([type, userId])
  @@index([referenceId])
  @@index([type, referenceId])
  @@map("user_connections")
}

// Content uploaded by a user, such as an image
model UserContent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  type        String
  referenceId String

  valueEncoded    Bytes
  metadataEncoded Bytes @default("")

  @@index([userId])
  @@index([type, userId])
  @@index([referenceId])
  @@index([type, referenceId])
  @@map("user_content")
}

//
// === Wargaming Data ===
//

// Wargaming Account record
model Account {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastBattleTime   DateTime
  accountCreatedAt DateTime

  realm    String
  nickname String
  private  Boolean @default(false)

  clan   Clan?   @relation(fields: [clanId], references: [id])
  clanId String?

  @@index([realm])
  @@index([nickname])
  @@index([lastBattleTime])
  @@map("accounts")
}

// Wargaming Clan record
model Clan {
  id        String   @id
  createdAt DateTime
  updatedAt DateTime @updatedAt

  tag      String
  name     String
  emblemId String @default("")

  accounts      Account[]
  membersString String

  recordUpdatedAt DateTime @updatedAt

  @@index([tag])
  @@map("account_clans")
}

// A snapshot of account statistics
model AccountSnapshot {
  id        String   @id @default(cuid())
  createdAt DateTime

  type           String
  lastBattleTime DateTime

  accountId   String
  referenceId String

  frameEncoded Bytes

  @@index([createdAt])
  @@index([accountId, lastBattleTime])
  @@map("account_snapshots")
}

// A snapshot of vehicle statistics on a specific account
model VehicleSnapshot {
  id        String   @id @default(cuid())
  createdAt DateTime

  type           String
  lastBattleTime DateTime

  accountId   String
  vehicleId   String
  referenceId String

  frameEncoded Bytes

  @@index([createdAt])
  @@index([accountId, vehicleId, lastBattleTime])
  @@map("vehicle_snapshots")
}

// A snapshot of all account achievements
model AchievementsSnapshot {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountId   String
  referenceId String

  dataEncoded Bytes

  @@map("achievements_snapshots")
}

// // A snapshot of account rating season stats
// model AccountRatingSeasonSnapshot {
//   id        String   @id @default(cuid())
//   createdAt DateTime
//   updatedAt DateTime @updatedAt

//   seasonId       String
//   accountId      String
//   referenceId    String
//   lastBattleTime DateTime

//   dataEncoded Bytes

//   @@index([createdAt])
//   @@index([seasonId, accountId])
//   @@index([seasonId, referenceId])
//   @@map("account_rating_season_snapshots")
//   @@ignore // unused atm and may require significant changes
// }

// A stats frame representing an average player performance on a vehicle
model VehicleAverage {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dataEncoded Bytes

  @@map("glossary_averages")
}

// Wargaming Vehicle glossary information
model Vehicle {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tier   Int
  type   String
  class  String
  nation String

  localizedNamesEncoded Bytes

  @@map("glossary_vehicles")
}

// // Wargaming Achievement glossary information
// model Achievement {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   section String

//   dataEncoded Bytes

//   @@map("glossary_achievements")
//   @@ignore
// }

//
// === Discord Data ===
//

// // A log of a user interaction with the bot
// model DiscordInteraction {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   type        String
//   userId      String
//   referenceId String

//   dataEncoded     Bytes
//   metadataEncoded Bytes @default("")

//   @@map("user_interactions")
//   @@ignore
// }

// // An active live session record of a user, requested through the bot
// model LiveSession {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   locale String

//   userId      String
//   referenceId String

//   lastUpdate     DateTime @default(now())
//   lastBattleTime DateTime @default(now())

//   options   StatsRequestsOptions @relation(fields: [optionsId], references: [id])
//   optionsId String

//   metadataEncoded Bytes @default("")

//   @@index([referenceId])
//   @@map("live_sessions")
//   @@ignore
// }

// model StatsRequestsOptions {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   type        String
//   userId      String
//   accountId   String
//   referenceId String

//   dataEncoded  Bytes
//   liveSessions LiveSession[] @ignore

//   @@index([referenceId])
//   @@map("stats_request_options")
//   @@ignore
// }
