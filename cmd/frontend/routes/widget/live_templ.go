// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package widget

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"context"
	"fmt"
	"github.com/cufee/aftermath/cmd/frontend/components/widget"
	"github.com/cufee/aftermath/cmd/frontend/handler"
	"github.com/cufee/aftermath/cmd/frontend/layouts"
	"github.com/cufee/aftermath/cmd/frontend/logic"
	"github.com/cufee/aftermath/internal/constants"
	"github.com/cufee/aftermath/internal/database"
	"github.com/cufee/aftermath/internal/database/models"
	backend "github.com/cufee/aftermath/internal/logic"
	"github.com/cufee/aftermath/internal/realtime"
	"github.com/cufee/aftermath/internal/stats/client/v1"
	"github.com/cufee/aftermath/internal/stats/fetch/v1"
	"github.com/pkg/errors"
	"github.com/rs/zerolog/log"
	"golang.org/x/text/language"
	"net/http"
	"slices"
	"strconv"
	"time"
)

var CustomLiveWidget handler.Page = func(ctx *handler.Context) (handler.Layout, templ.Component, error) {
	widgetID := ctx.Path("widgetId")
	if widgetID == "" {
		return nil, nil, ctx.Redirect("/app", http.StatusMovedPermanently)
	}

	settings, err := ctx.Database().GetWidgetSettings(ctx.Context, widgetID)
	if err != nil {
		if database.IsNotFound(err) {
			return nil, nil, ctx.Redirect("/app", http.StatusTemporaryRedirect)
		}
		return layouts.StyleOnly, nil, ctx.Err(err, "failed to get widget settings")
	}
	if settings.AccountID == "" {
		return layouts.StyleOnly, nil, ctx.Error("bad widget settings, missing account id")
	}

	account, err := ctx.Database().GetAccountByID(ctx.Context, settings.AccountID)
	if err != nil {
		if database.IsNotFound(err) {
			return nil, nil, ctx.Redirect("/app", http.StatusTemporaryRedirect)
		}
		return layouts.StyleOnly, nil, errors.New("invalid account id")
	}
	if account.Private {
		return layouts.StyleOnly, nil, ctx.Error("private accounts cannot be tracked")
	}

	var opts = []client.RequestOption{client.WithWN8(), client.WithReferenceID(settings.ID)}
	cards, _, err := ctx.Client.Stats(language.English).SessionCards(context.Background(), account.ID, time.Now(), opts...)
	if err != nil {
		if errors.Is(err, fetch.ErrSessionNotFound) {
			go func(widget, account string) {
				c, cancel := context.WithTimeout(context.Background(), time.Second*15)
				defer cancel()
				_, err = backend.RecordAccountSnapshots(c, ctx.Wargaming(), ctx.Database(), ctx.Wargaming().RealmFromAccountID(account), false, backend.WithReference(account, widget))
				if err != nil {
					log.Err(err).Str("widgetId", widget).Str("account", account).Msg("failed to record a new session for an existing widget")
					return
				}

				topicID := fmt.Sprintf("widget-settings-%s", widget)
				pctx, cancel := context.WithTimeout(context.Background(), time.Second*1)
				defer cancel()
				err = ctx.PubSub().Send(pctx, realtime.Message{Topic: topicID, Strategy: realtime.RouteToAll, Data: "reload"})
				if err != nil && !errors.Is(err, realtime.ErrInvalidTopic) && !errors.Is(err, realtime.ErrTopicHasNoListeners) {
					log.Err(err).Str("topic", topicID).Str("widget", widgetID).Msg("failed to update the live widget through pubsub")
				}
			}(settings.ID, settings.AccountID)

			cards, _, err = ctx.Client.Stats(language.English).EmptySessionCards(ctx.Context, account.ID)
			if err == nil {
				return layouts.StyleOnly, customLiveWidget(settings.ID, widget.Widget(account, cards, widget.WithAutoReload(), widget.WithStyle(settings.Style))), nil
			}
		}
		return layouts.StyleOnly, nil, err
	}

	return layouts.StyleOnly, customLiveWidget(settings.ID, widget.Widget(account, cards, widget.WithAutoReload(), widget.WithStyle(settings.Style))), nil
}

func customLiveWidget(id string, widget templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"min-w-max\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = widget.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div><style>\n    :root { background-color: rgba(0, 0, 0, 0); white-space: nowrap; }\n  </style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = logic.EmbedMinifiedScript(customLiveWidgetScript(logic.StringIfElse("ws", "wss", constants.DevMode), constants.FrontendHost, id), logic.StringIfElse("ws", "wss", constants.DevMode), constants.FrontendHost, id).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func customLiveWidgetScript(protocol, host, id string) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_customLiveWidgetScript_183d`,
		Function: `function __templ_customLiveWidgetScript_183d(protocol, host, id){const socket = new WebSocket(` + "`" + `${protocol}://${host}/api/p/realtime/widget/custom/${id}/` + "`" + `);
	socket.addEventListener("open", (event) => {
		console.log("connected")
	});
	socket.addEventListener("message", (event) => {
		try {
			const data = JSON.parse(event.data)
			if (data.command === "reload") {
				window.location.reload();
			}
		} catch (e) {
			console.error(r)
			setTimeout(() => {window.location.reload();}, 5000);
		}
	});
	socket.addEventListener("error", (event) => {
		console.error(event.data)
		setTimeout(() => {window.location.reload();}, 5000);
	});
	socket.addEventListener("close", (event) => {
		console.error(event.data)
		setTimeout(() => {window.location.reload();}, 5000);
	});
}`,
		Call:       templ.SafeScript(`__templ_customLiveWidgetScript_183d`, protocol, host, id),
		CallInline: templ.SafeScriptInline(`__templ_customLiveWidgetScript_183d`, protocol, host, id),
	}
}

var LiveWidget handler.Page = func(ctx *handler.Context) (handler.Layout, templ.Component, error) {
	accountID := ctx.Path("accountId")
	if accountID == "" {
		return nil, nil, errors.New("invalid account id")
	}

	account, err := ctx.Fetch().Account(ctx.Context, accountID)
	if err != nil {
		return nil, nil, errors.New("invalid account id")
	}

	var opts = []client.RequestOption{client.WithWN8()}
	if ref := ctx.Query("ref"); ref != "" {
		opts = append(opts, client.WithReferenceID(ref))
	}
	if t := ctx.Query("type"); t != "" && slices.Contains(models.SnapshotType("").Values(), t) {
		opts = append(opts, client.WithType(models.SnapshotType(t)))
	}

	cards, _, err := ctx.Client.Stats(language.English).SessionCards(context.Background(), account.ID, time.Now(), opts...)
	if err != nil {
		return nil, nil, err
	}

	var wopts = []widget.WidgetOption{widget.WithAutoReload()}
	if v, err := strconv.Atoi(ctx.Query("vl")); err == nil && v >= 0 && v <= 10 {
		wopts = append(wopts, widget.WithVehicleLimit(int(v)))
	}
	if v := ctx.Query("or"); v != "" {
		wopts = append(wopts, widget.WithRatingOverview(v == "1"))
	}
	if v := ctx.Query("ou"); v != "" {
		wopts = append(wopts, widget.WithUnratedOverview(v == "1"))
	}

	return layouts.StyleOnly, liveWidget(widget.Widget(account, cards, wopts...)), nil
}

func liveWidget(widget templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"min-w-max\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = widget.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div><style>\n    :root { background-color: rgba(0, 0, 0, 0); white-space: nowrap; }\n  </style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
