package widget

import (
	"github.com/cufee/aftermath/cmd/frontend/components"
	cwidget "github.com/cufee/aftermath/cmd/frontend/components/widget"
	"github.com/cufee/aftermath/cmd/frontend/handler"
	"github.com/cufee/aftermath/cmd/frontend/layouts"
	"github.com/cufee/aftermath/cmd/frontend/logic"
	"github.com/cufee/aftermath/cmd/frontend/routes/api/widget"
	"os"
	"strconv"
)

var publicWgAppID = os.Getenv("WG_AUTH_APP_ID")

var WidgetHome handler.Page = func(ctx *handler.Context) (handler.Layout, templ.Component, error) {
	widget, err := widget.MockWidget(ctx)
	if err != nil {
		return layouts.Main, nil, ctx.Error(err, "failed to generate a widget preview")
	}

	var withUnrated = ctx.Query("ou") != "0"
	var withRating = ctx.Query("or") != "0"
	var vehicles int = 3
	if v, err := strconv.Atoi(ctx.Query("vl")); err == nil && v >= 0 && v <= 10 {
		vehicles = v
	}

	return layouts.Main, widgetHome(widget, withRating, withUnrated, vehicles), nil
}

templ widgetHome(widget templ.Component, or, ou bool, vl int) {
	<div class="flex flex-row flex-wrap gap-4">
		<div class="flex flex-col gap-4 basis-1/2 grow">
			<div class="flex flex-col gap-2 text-center">
				<div class="text-3xl font-bold">
					Aftermath Streaming Widget
				</div>
				<p>
					Level up your stream with a real-time stats widget!
				</p>
			</div>
			@cwidget.Settings(handlePreviewOnHome(), or, ou, vl)
			<div class="flex flex-row flex-wrap gap-2">
				<select id="player-search-realm" class="select select-bordered" onchange={ onRealmSelect() }>
					<option disabled selected class="text-center">Pick a Server</option>
					<option value="NA">North America</option>
					<option value="EU">Europe</option>
					<option value="AS">Asia</option>
				</select>
				<div class="dropdown dropdown-top grow">
					<input id="player-search-nickname" type="text" placeholder="Nickname" class="join-item input input-bordered placeholder:text-center w-full" disabled oninput={ onNicknameInput() }/>
					<ul id="player-search-results" tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-300 rounded-t-box flex-nowrap overflow-auto w-full">
						<span class="text-xs text-center cursor-default">Start typing to search</span>
					</ul>
				</div>
			</div>
		</div>
		<div class="flex items-center justify-center grow">
			<div class="max-w-4xl w-full">
				@components.OBSMockup("/assets/widget-background.jpg") {
					<div class="w-max p-8 min-w-[500px] min-h-[100vh]" style="zoom: 0.5;">
						@widget
					</div>
				}
			</div>
		</div>
	</div>
	@logic.EmbedMinifiedScript(searchEventHandler(publicWgAppID), publicWgAppID)
}

script onRealmSelect() {
	const results = document.getElementById("player-search-results");
	const select = document.getElementById("player-search-realm");
	const realm = select.value;
	// enable/disable field
	const nickname = document.getElementById("player-search-nickname");
	if (realm) {
		if (nickname.value.length >= 5) {
			// if the input already exists - send a request
			results.innerHTML = '<li><span class="loading loading-dots loading-xs m-auto"></span></li>';
			const event = new CustomEvent("player-search", { detail: {query: nickname.value, realm} });
			document.dispatchEvent(event);
			return
		}
		nickname.disabled = false;
	} else {
		nickname.disabled = true;
	}
	// clear results
	results.innerHTML = '<span class="text-xs text-center cursor-default">Start typing to search</span>';
}

script onNicknameInput() {
	const nickname = document.getElementById("player-search-nickname");
	const results = document.getElementById("player-search-results");
	const select = document.getElementById("player-search-realm");
	const realm = select.value;
	if (!realm) {
		results.innerHTML = '<span class="text-xs text-center cursor-default">Start typing to search</span>';
		nickname.disabled = true;
		nickname.value = '';
		return;
	}
	if (!nickname.value) {
		results.innerHTML = '<span class="text-xs text-center cursor-default">Start typing to search</span>';
		return;
	}
	if (nickname.value.length < 5) {
		results.innerHTML = '<span class="text-xs text-center cursor-default">Continue typing to search</span>';
		return;
	}
	const event = new CustomEvent("player-search", { detail: {query: nickname.value, realm} });
	document.dispatchEvent(event);
}

script searchEventHandler(appId string) {
	const results = document.getElementById("player-search-results");
	const nickname = document.getElementById("player-search-nickname");

	const setResultsLoading = () => {
		results.innerHTML = '<li><span class="loading loading-dots loading-xs m-auto"></span></li>';
	}
	window.setResultsLoading = setResultsLoading

	const getApiUrl = (realm, query) => {
		let baseUrl = "";
		switch (realm) {
			case "NA":
				baseUrl = "https://api.wotblitz.com/wotb";
				break;
			case "EU":
				baseUrl = "https://api.wotblitz.eu/wotb";
				break;
			case "AS":
				baseUrl = "https://api.wotblitz.asia/wotb";
				break;
			default:
				return "";
		}
		return baseUrl + "/account/list/" + "?application_id=" + appId + "&limit=5" + "&search=" + query;
	}

	let debounceTimeout;
	const debounceDelay = 500;

	document.addEventListener(
		"player-search",
		(evt) => {
			clearTimeout(debounceTimeout);
			debounceTimeout = setTimeout(() => {
				setResultsLoading()
				
				const { query, realm } = evt.detail;
				const url = getApiUrl(realm, query);
				if (!url) return;

				fetch(url).then(res => res.json()).then(data => {
					if (data.status != "ok") {
						results.innerHTML = `<span class="text-xs text-center cursor-default">${data?.error?.message.toLocaleLowerCase().replaceAll("_", " ") || "Failed to get accounts"}</span>`;
						nickname.disabled = false;
						return;
					}
					const elements = []
					for (const account of data.data || []) {
						if (!account.account_id || !account.nickname) continue;
						elements.push(`<li><a onclick="window.setResultsLoading()" href="/widget/${account.account_id}">${account.nickname}</a></li>`);
					}
					if (elements.length == 0) {
						results.innerHTML = '<span class="text-xs text-center cursor-default">No players found</span>';
						nickname.disabled = false;
						return;
					}
					results.innerHTML = elements.join("");
					return;
				}).catch(e => {
					console.log("failed to search for accounts",e);
					results.innerHTML = '<span class="text-xs text-center cursor-default">No players found</span>';
					nickname.disabled = false;
				});
			}, debounceDelay);
		},
		false,
	);
}

script handlePreviewOnHome() {
	const ouEl = document.getElementById("widget-settings-ou");
	const orEl = document.getElementById("widget-settings-or");
	const vlEl = document.getElementById("widget-settings-vl");

	const ou = ouEl.checked ? "1" : "0";
	const or = orEl.checked ? "1" : "0";
	const vl = vlEl.value;
	const newQuery = `?or=${or}&ou=${ou}&vl=${vl}`;
	if (newQuery != window.location.search) {
		ouEl.disabled = true;
		orEl.disabled = true;
		vlEl.disabled = true;
		fetch("/api/widget/mock"+newQuery).then((r) => r.text()).then((html) => {
			document.getElementById("mock-widget").outerHTML = html;
			const url = window.location.protocol + "//" + window.location.host + window.location.pathname + newQuery;
			window.history?.pushState({path:url},'',url);
		}).catch(e => console.log(e)).finally(() => {
			setTimeout(() => {
				ouEl.disabled = false;
				orEl.disabled = false;
				vlEl.disabled = false;
			}, 500);
		});
	}
}
