package widget

import (
	"fmt"
	"github.com/cufee/aftermath/cmd/frontend/components"
	"github.com/cufee/aftermath/cmd/frontend/handler"
	"github.com/cufee/aftermath/cmd/frontend/layouts"
	"github.com/cufee/aftermath/cmd/frontend/routes/api/widget"
	"strconv"
)

var WidgetHome handler.Page = func(ctx *handler.Context) (handler.Layout, templ.Component, error) {
	widget, err := widget.MockWidget(ctx)
	if err != nil {
		return layouts.Main, nil, ctx.Error(err, "failed to generate a widget preview")
	}

	var withUnrated = ctx.Query("ou") != "0"
	var withRating = ctx.Query("or") != "0"
	var vehicles int = 3
	if v, err := strconv.Atoi(ctx.Query("vl")); err == nil && v >= 0 && v <= 10 {
		vehicles = v
	}

	return layouts.Main, widgetHome(widget, withRating, withUnrated, vehicles), nil
}

templ widgetHome(widget templ.Component, or, ou bool, vl int) {
	<div class="flex flex-row flex-wrap gap-4">
		<div class="flex flex-col gap-4 basis-1/2 grow">
			<div class="flex flex-col gap-2 items-center">
				<div class="text-3xl font-bold">
					Aftermath Streaming Widget
				</div>
				<p>
					Level up your stream with a real-time stats widget!
				</p>
			</div>
			<div class="form-control flex gap-2 grow">
				<div class="flex flex-col bg-base-200 rounded-lg p-4">
					<span class="text-lg">Rating Battles</span>
					<label class="label cursor-pointer">
						<span class="label-text">Show Overview Card</span>
						<input id="widget-or" type="checkbox" class="toggle toggle-secondary" checked?={ or }/>
					</label>
				</div>
				<div class="flex flex-col bg-base-200 rounded-lg p-4">
					<span class="text-lg">Regular Battles</span>
					<label class="label cursor-pointer">
						<span class="label-text">Show Overview Card</span>
						<input id="widget-ou" type="checkbox" class="toggle toggle-secondary" checked?={ ou }/>
					</label>
					<label class="label cursor-pointer flex flex-col items-start gap-1">
						<span class="label-text">Vehicle Cards</span>
						<input id="widget-vl" type="range" min="0" max="10" value={ fmt.Sprint(vl) } class="range" step="1"/>
						<div class="flex w-full justify-between px-2 text-xs">
							for i := range 11 {
								<div class="flex flex-col items-center">
									<span>{ fmt.Sprint(i) }</span>
								</div>
							}
						</div>
					</label>
				</div>
				<button onclick={ handlePreview() } type="button" id="preview-widget" class="btn btn-primary w-full">Preview</button>
			</div>
		</div>
		<div class="flex items-center justify-center grow">
			<div class="max-w-4xl w-full">
				@components.OBSMockup("/assets/widget-background.jpg") {
					<div class="w-max p-8 min-h-96" style="zoom: 0.5;">
						@widget
					</div>
				}
			</div>
		</div>
	</div>
}

script handlePreview() {
	const ou = document.getElementById("widget-ou").checked ? "1" : "0"
	const or = document.getElementById("widget-or").checked ? "1" : "0"
	const vl = document.getElementById("widget-vl").value
	const newQuery = `?or=${or}&ou=${ou}&vl=${vl}`
	if (newQuery != window.location.search) {
		fetch("/api/widget/mock"+newQuery).then((r) => r.text()).then((html) => {
			document.getElementById("mock-widget").outerHTML = html
			const url = window.location.protocol + "//" + window.location.host + window.location.pathname + newQuery;
			window.history?.pushState({path:url},'',url);
		}).catch(e => console.log(e))
	}
}
