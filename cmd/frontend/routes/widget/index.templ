package widget

import (
	"github.com/cufee/aftermath/cmd/frontend/components"
	cwidget "github.com/cufee/aftermath/cmd/frontend/components/widget"
	"github.com/cufee/aftermath/cmd/frontend/handler"
	"github.com/cufee/aftermath/cmd/frontend/layouts"
	"github.com/cufee/aftermath/cmd/frontend/routes/api/widget"
	"strconv"
)

var WidgetHome handler.Page = func(ctx *handler.Context) (handler.Layout, templ.Component, error) {
	widget, err := widget.MockWidget(ctx)
	if err != nil {
		return layouts.Main, nil, ctx.Error(err, "failed to generate a widget preview")
	}

	var withUnrated = ctx.Query("ou") != "0"
	var withRating = ctx.Query("or") != "0"
	var vehicles int = 3
	if v, err := strconv.Atoi(ctx.Query("vl")); err == nil && v >= 0 && v <= 10 {
		vehicles = v
	}

	return layouts.Main, widgetHome(widget, withRating, withUnrated, vehicles), nil
}

templ widgetHome(widget templ.Component, or, ou bool, vl int) {
	<div class="flex flex-row flex-wrap gap-4">
		<div class="flex flex-col gap-4 basis-1/2 grow">
			<div class="flex flex-col gap-2 text-center">
				<div class="text-3xl font-bold">
					Aftermath Streaming Widget
				</div>
				<p>
					Level up your stream with a real-time stats widget!
				</p>
			</div>
			@cwidget.Settings(handlePreviewOnHome(), or, ou, vl)
			<button disabled type="button" id="preview-widget" class="btn btn-primary w-full">Create Your Widget</button>
		</div>
		<div class="flex items-center justify-center grow">
			<div class="max-w-4xl w-full">
				@components.OBSMockup("/assets/widget-background.jpg") {
					<div class="w-max p-8 min-w-[500px] min-h-[100vh]" style="zoom: 0.5;">
						@widget
					</div>
				}
			</div>
		</div>
	</div>
}

script handlePreviewOnHome() {
	const ouEl = document.getElementById("widget-settings-ou")
	const orEl = document.getElementById("widget-settings-or")
	const vlEl = document.getElementById("widget-settings-vl")

	const ou = ouEl.checked ? "1" : "0"
	const or = orEl.checked ? "1" : "0"
	const vl = vlEl.value
	const newQuery = `?or=${or}&ou=${ou}&vl=${vl}`
	if (newQuery != window.location.search) {
		ouEl.disabled = true
		orEl.disabled = true
		vlEl.disabled = true
		fetch("/api/widget/mock"+newQuery).then((r) => r.text()).then((html) => {
			document.getElementById("mock-widget").outerHTML = html
			const url = window.location.protocol + "//" + window.location.host + window.location.pathname + newQuery;
			window.history?.pushState({path:url},'',url);
		}).catch(e => console.log(e)).finally(() => {
			setTimeout(() => {
				ouEl.disabled = false
				orEl.disabled = false
				vlEl.disabled = false
			}, 500)
		})
	}
}
