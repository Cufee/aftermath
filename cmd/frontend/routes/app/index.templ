package app

import (
	"fmt"
	components "github.com/cufee/aftermath/cmd/frontend/components/connections"
	wc "github.com/cufee/aftermath/cmd/frontend/components/widget"
	"github.com/cufee/aftermath/cmd/frontend/handler"
	"github.com/cufee/aftermath/cmd/frontend/layouts"
	"github.com/cufee/aftermath/internal/database"
	"github.com/cufee/aftermath/internal/database/models"
	"net/http"
	"slices"
	"time"
)

var Index handler.Page = func(ctx *handler.Context) (handler.Layout, templ.Component, error) {
	user, err := ctx.SessionUser(database.WithConnections())
	if err != nil {
		return nil, nil, ctx.Redirect("/login", http.StatusTemporaryRedirect)
	}

	var ids []string
	var widgets []wc.WidgetWithAccount
	settings, err := ctx.Database().GetUserWidgetSettings(ctx, user.ID, nil)
	if err != nil && !database.IsNotFound(err) {
		return nil, nil, ctx.Error(err, "failed to get widgets")
	}
	for _, widget := range settings {
		widget.SessionFrom = time.Now()
		widgets = append(widgets, wc.WidgetWithAccount{WidgetOptions: widget})
		if !slices.Contains(ids, widget.AccountID) {
			ids = append(ids, widget.AccountID)
		}
	}

	var connections []components.ConnectionWithAccount
	var accountToConnection = make(map[string]models.UserConnection)
	accountConnection, _ := user.FilterConnections(models.ConnectionTypeWargaming, nil)
	for _, conn := range accountConnection {
		accountToConnection[conn.ReferenceID] = conn
		if !slices.Contains(ids, conn.ReferenceID) {
			ids = append(ids, conn.ReferenceID)
		}
	}
	if len(ids) > 0 {
		accounts, err := ctx.Database().GetAccounts(ctx.Context, ids)
		if err != nil {
			return nil, nil, ctx.Error(err, "failed to get account information")
		}
		for _, acc := range accounts {
			connections = append(connections, components.ConnectionWithAccount{
				UserConnection: accountToConnection[acc.ID],
				Account:        acc,
			})
			for i, widget := range widgets {
				if widget.AccountID != acc.ID {
					continue
				}
				widget.Account = acc
				widgets[i] = widget
			}
		}
	}
	defaultConn, _ := user.Connection(models.ConnectionTypeWargaming, map[string]any{"default": true})

	return layouts.Main, index(user, connections, defaultConn.ID, 3, widgets, 10), nil
}

templ index(user *models.User, connections []components.ConnectionWithAccount, defaultConnID string, linkLimit int, widgets []wc.WidgetWithAccount, widgetsLimit int) {
	<div class="flex flex-col items-center gap-4">
		<div class="text-2xl font-bold text-center">
			Linked Accounts { fmt.Sprintf("%d/%d", len(connections),linkLimit) }
		</div>
		<div class="flex flex-col sm:flex-row sm:flex-wrap gap-2 w-full">
			for _, connection := range connections {
				@components.ConnectionCard(connection, defaultConnID)
			}
			if len(connections) < linkLimit {
				<div class="dropdown dropdown-hover grow basis-2/3 md:basis-1/3 lg:basis-1/4">
					<button tabindex="0" class="verify-button verify-button-large no-animation btn h-full rounded-md w-full">Link a new account</button>
					<ul hx-boost="false" tabindex="0" class="dropdown-content menu bg-base-100 rounded-box z-[1] p-2 shadow w-full gap-1">
						<li>
							<a class="verify-button bg-base-200 flex flex-row align-center justify-between gap-1" href="/api/auth/wargaming/login/na">
								<span>North America</span>
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-3">
									<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path>
								</svg>
							</a>
						</li>
						<li>
							<a class="verify-button bg-base-200 flex flex-row align-center justify-between gap-1" href="/api/auth/wargaming/login/eu">
								<span>Europe</span>
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-3">
									<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path>
								</svg>
							</a>
						</li>
						<li>
							<a class="verify-button bg-base-200 flex flex-row align-center justify-between gap-1" href="/api/auth/wargaming/login/as">
								<span>Asia</span>
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-3">
									<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path>
								</svg>
							</a>
						</li>
					</ul>
				</div>
			}
		</div>
		<div class="flex flex-row flex-wrap items-center justify-center gap-2">
			<span class="text-2xl font-bold text-center">
				Custom Widgets { fmt.Sprintf("%d/%d", len(widgets),widgetsLimit) }
			</span>
			<div class="tooltip" data-tip="This feature is in Beta and might become limited to premium users once released.">
				<span class="badge badge-outline badge-info font-bold">
					BETA
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4 text-info ml-1 -mr-2">
						<path stroke-linecap="round" stroke-linejoin="round" d="m11.25 11.25.041-.02a.75.75 0 0 1 1.063.852l-.708 2.836a.75.75 0 0 0 1.063.853l.041-.021M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9-3.75h.008v.008H12V8.25Z"></path>
					</svg>
				</span>
			</div>
		</div>
		<div class="flex flex-col md:flex-row md:flex-wrap gap-2 w-full">
			for _, widget:= range widgets {
				@wc.WidgetCard(widget)
			}
			if  len(widgets) < widgetsLimit {
				<div class="flex justify-center w-full">
					<a hx-boost="true" href="/app/widgets/new" tabindex="1" class="no-animation btn rounded-md">Create a New Widget</a>
				</div>
			}
		</div>
	</div>
}
