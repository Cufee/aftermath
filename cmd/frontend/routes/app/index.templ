package app

import (
	"fmt"
	"github.com/cufee/aftermath/cmd/frontend/handler"
	"github.com/cufee/aftermath/cmd/frontend/layouts"
	"github.com/cufee/aftermath/cmd/frontend/logic"
	"github.com/cufee/aftermath/internal/database"
	"github.com/cufee/aftermath/internal/database/models"
	"net/http"
	"time"
)

type connectionWithAccount struct {
	models.UserConnection
	Account models.Account
}

var Index handler.Page = func(ctx *handler.Context) (handler.Layout, templ.Component, error) {
	user, err := ctx.SessionUser(database.WithConnections())
	if err != nil {
		return nil, nil, ctx.Redirect("/login", http.StatusTemporaryRedirect)
	}

	var ids []string
	var connections []connectionWithAccount
	var accountToConnection = make(map[string]models.UserConnection)
	accountConnection, _ := user.FilterConnections(models.ConnectionTypeWargaming, nil)
	for _, conn := range accountConnection {
		accountToConnection[conn.ReferenceID] = conn
		ids = append(ids, conn.ReferenceID)
	}
	if len(ids) > 0 {
		accounts, _ := ctx.Database().GetAccounts(ctx.Context, ids)
		for _, acc := range accounts {
			connections = append(connections, connectionWithAccount{
				UserConnection: accountToConnection[acc.ID],
				Account:        acc,
			})
		}
	}

	return layouts.Main, index(connections, 3), nil
}

templ index(connections []connectionWithAccount, linkLimit int) {
	<div class="flex flex-col items-center gap-4">
		<div class="text-2xl font-bold">
			Linked Accounts { fmt.Sprintf("%d/%d", len(connections),linkLimit) }
		</div>
		<div class="flex flex-row flex-wrap gap-2">
			for _, connection:= range connections {
				@connectionCard(connection)
			}
			if len(connections) < linkLimit {
				<div class="grow dropdown dropdown-hover">
					<button tabindex="0" class="verify-button verify-button-large no-animation btn h-full rounded-md w-full">Link a new account</button>
					<ul hx-boost="false" tabindex="0" class="dropdown-content menu bg-base-100 rounded-box z-[1] p-2 shadow w-full gap-1">
						<li>
							<a class="verify-button bg-base-200 flex flex-row align-center justify-between gap-1" href="/api/auth/wargaming/na">
								<span>North America</span>
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-3">
									<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path>
								</svg>
							</a>
						</li>
						<li>
							<a class="verify-button bg-base-200 flex flex-row align-center justify-between gap-1" href="/api/auth/wargaming/eu">
								<span>Europe</span>
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-3">
									<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path>
								</svg>
							</a>
						</li>
						<li>
							<a class="verify-button bg-base-200 flex flex-row align-center justify-between gap-1" href="/api/auth/wargaming/as">
								<span>Asia</span>
								<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-3">
									<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path>
								</svg>
							</a>
						</li>
					</ul>
				</div>
			}
		</div>
	</div>
	@logic.EmbedMinifiedScript(verifyButtonExpiration(int(time.Minute*5)), int(time.Minute*5))
}

templ connectionCard(connection connectionWithAccount) {
	<div class="rounded-md bg-base-300 flex flex-row grow overflow-hidden">
		<div class="p-1 bg-base-200 flex justify-center items-center h-full aspect-square">
			<span class="font-bold">
				{ connection.Account.Realm }
			</span>
		</div>
		<div class="grow p-3 pr-0 flex flex-row gap-2 items-center justify-between">
			<div class="grow flex flex-row gap-2 items-center">
				<div class="flex flex-row gap-1 items-center">
					<div class="text-lg line-clamp-1 break-all overflow-hidden">
						{ connection.Account.Nickname }
					</div>
					<button class={ logic.StringIfElse("text-yellow-500", "", connection.Metadata["default"] == true) } disabled?={ connection.Metadata["default"] == true }>
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4">
							<path stroke-linecap="round" stroke-linejoin="round" d="M11.48 3.499a.562.562 0 0 1 1.04 0l2.125 5.111a.563.563 0 0 0 .475.345l5.518.442c.499.04.701.663.321.988l-4.204 3.602a.563.563 0 0 0-.182.557l1.285 5.385a.562.562 0 0 1-.84.61l-4.725-2.885a.562.562 0 0 0-.586 0L6.982 20.54a.562.562 0 0 1-.84-.61l1.285-5.386a.562.562 0 0 0-.182-.557l-4.204-3.602a.562.562 0 0 1 .321-.988l5.518-.442a.563.563 0 0 0 .475-.345L11.48 3.5Z"></path>
						</svg>
						<span class="hidden loading loading-xs text-base-content"></span>
					</button>
				</div>
			</div>
			if connection.Metadata["verified"] != true {
				<form action={ templ.URL("/api/auth/wargaming/" + connection.Account.Realm) }>
					<button type="submit" class="verify-button btn btn-sm btn-info flex flex-row flex-nowrap items-center justify-between gap-1 font-normal">
						<span>Verify</span>
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-3">
							<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path>
						</svg>
					</button>
				</form>
			}
		</div>
		<button class="btn btn-sm rounded-none h-full btn-ghost" disabled>
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
				<path stroke-linecap="round" stroke-linejoin="round" d="M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.325.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 0 1 1.37.49l1.296 2.247a1.125 1.125 0 0 1-.26 1.431l-1.003.827c-.293.241-.438.613-.43.992a7.723 7.723 0 0 1 0 .255c-.008.378.137.75.43.991l1.004.827c.424.35.534.955.26 1.43l-1.298 2.247a1.125 1.125 0 0 1-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.47 6.47 0 0 1-.22.128c-.331.183-.581.495-.644.869l-.213 1.281c-.09.543-.56.94-1.11.94h-2.594c-.55 0-1.019-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 0 1-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 0 1-1.369-.49l-1.297-2.247a1.125 1.125 0 0 1 .26-1.431l1.004-.827c.292-.24.437-.613.43-.991a6.932 6.932 0 0 1 0-.255c.007-.38-.138-.751-.43-.992l-1.004-.827a1.125 1.125 0 0 1-.26-1.43l1.297-2.247a1.125 1.125 0 0 1 1.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.086.22-.128.332-.183.582-.495.644-.869l.214-1.28Z"></path>
				<path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path>
			</svg>
		</button>
	</div>
}

script verifyButtonExpiration(expirationSec int) {
	setTimeout(() => {
		const elements = document.querySelectorAll(".verify-button");
		for (const el of elements) {
			el.disabled = true;
			if (el.classList.contains("verify-button-large")) {
				el.innerText = "Page refresh required";
			}
		}
	}, expirationSec * 1000);
}
