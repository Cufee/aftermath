// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package app

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	components "github.com/cufee/aftermath/cmd/frontend/components/connections"
	wc "github.com/cufee/aftermath/cmd/frontend/components/widget"
	"github.com/cufee/aftermath/cmd/frontend/handler"
	"github.com/cufee/aftermath/cmd/frontend/layouts"
	"github.com/cufee/aftermath/internal/constants"
	"github.com/cufee/aftermath/internal/database"
	"github.com/cufee/aftermath/internal/database/models"
	"net/http"
	"slices"
)

var Index handler.Page = func(ctx *handler.Context) (handler.Layout, templ.Component, error) {
	user, err := ctx.SessionUser(database.WithConnections())
	if err != nil {
		return nil, nil, ctx.Redirect("/login", http.StatusTemporaryRedirect)
	}

	var ids []string
	var widgets []wc.WidgetWithAccount
	settings, err := ctx.Database().GetUserWidgetSettings(ctx, user.ID, nil)
	if err != nil && !database.IsNotFound(err) {
		return nil, nil, ctx.Error(err, "failed to get widgets")
	}
	for _, widget := range settings {
		widgets = append(widgets, wc.WidgetWithAccount{WidgetOptions: widget})
		if !slices.Contains(ids, widget.AccountID) {
			ids = append(ids, widget.AccountID)
		}
	}

	var connections []components.ConnectionWithAccount
	var accountToConnection = make(map[string]models.UserConnection)
	accountConnection, _ := user.FilterConnections(models.ConnectionTypeWargaming, nil)
	for _, conn := range accountConnection {
		accountToConnection[conn.ReferenceID] = conn
		if !slices.Contains(ids, conn.ReferenceID) {
			ids = append(ids, conn.ReferenceID)
		}
	}
	if len(ids) > 0 {
		accounts, err := ctx.Database().GetAccounts(ctx.Context, ids)
		if err != nil {
			return nil, nil, ctx.Error(err, "failed to get account information")
		}
		for _, acc := range accounts {
			connections = append(connections, components.ConnectionWithAccount{
				UserConnection: accountToConnection[acc.ID],
				Account:        acc,
			})
			for i, widget := range widgets {
				if widget.AccountID != acc.ID {
					continue
				}
				widget.Account = acc
				widgets[i] = widget
			}
		}
	}
	defaultConn, _ := user.Connection(models.ConnectionTypeWargaming, map[string]any{"default": true})

	return layouts.Main, index(user, connections, defaultConn.ID, 3, widgets, constants.WidgetAccountLimit), nil
}

func index(user *models.User, connections []components.ConnectionWithAccount, defaultConnID string, linkLimit int, widgets []wc.WidgetWithAccount, widgetsLimit int) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"flex flex-col items-center gap-4\"><div class=\"text-2xl font-bold text-center\">Linked Accounts ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d/%d", len(connections), linkLimit))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `cmd/frontend/routes/app/index.templ`, Line: 71, Col: 69}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div><div class=\"flex flex-col sm:flex-row sm:flex-wrap gap-2 w-full\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, connection := range connections {
			templ_7745c5c3_Err = components.ConnectionCard(connection, defaultConnID).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if len(connections) < linkLimit {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"dropdown dropdown-hover grow basis-2/3 md:basis-1/3 lg:basis-1/4\"><button tabindex=\"0\" class=\"verify-button verify-button-large no-animation btn h-full rounded-md w-full\">Link a new account</button><ul hx-boost=\"false\" tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-[1] p-2 shadow w-full gap-1\"><li><a class=\"verify-button bg-base-200 flex flex-row align-center justify-between gap-1\" href=\"/api/p/auth/wargaming/login/na\"><span>North America</span> <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-3\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25\"></path></svg></a></li><li><a class=\"verify-button bg-base-200 flex flex-row align-center justify-between gap-1\" href=\"/api/p/auth/wargaming/login/eu\"><span>Europe</span> <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-3\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25\"></path></svg></a></li><li><a class=\"verify-button bg-base-200 flex flex-row align-center justify-between gap-1\" href=\"/api/p/auth/wargaming/login/as\"><span>Asia</span> <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-3\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M13.5 6H5.25A2.25 2.25 0 0 0 3 8.25v10.5A2.25 2.25 0 0 0 5.25 21h10.5A2.25 2.25 0 0 0 18 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25\"></path></svg></a></li></ul></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div><div class=\"flex flex-row flex-wrap items-center justify-center gap-2\"><span class=\"text-2xl font-bold text-center\">Custom Widgets ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d/%d", len(widgets), widgetsLimit))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `cmd/frontend/routes/app/index.templ`, Line: 111, Col: 68}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span> <span class=\"badge badge-outline badge-info font-bold\">BETA</span></div><div class=\"flex flex-col md:flex-row md:flex-wrap gap-2 w-full\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, widget := range widgets {
			templ_7745c5c3_Err = wc.WidgetCard(widget).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if len(widgets) < widgetsLimit {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"flex justify-center w-full\"><a hx-boost=\"true\" href=\"/app/widgets/new\" tabindex=\"1\" class=\"no-animation btn rounded-md\">Create a New Widget</a></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
