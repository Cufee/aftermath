package widget

import (
	"fmt"
	"github.com/cufee/aftermath/cmd/frontend/logic"
	"github.com/cufee/aftermath/internal/constants"
	"github.com/cufee/aftermath/internal/database/models"
	prepare "github.com/cufee/aftermath/internal/stats/prepare/session/v1"
)

type WidgetOption func(*widget)
type WidgetOptions []WidgetOption

func (o WidgetOptions) Style() models.WidgetStyling {
	widget := widget{style: models.DefaultWidgetStyle}
	for _, apply := range o {
		apply(&widget)
	}
	return widget.style
}

func WithAutoReload() WidgetOption {
	return func(w *widget) { w.autoReload = true }
}
func WithVehicleLimit(limit int) WidgetOption {
	return func(w *widget) { w.style.Vehicles.Limit = limit; w.style.Vehicles.Visible = limit > 0 }
}
func WithRatingOverview(shown bool) WidgetOption {
	return func(w *widget) { w.style.RatingOverview.Visible = shown }
}
func WithUnratedOverview(shown bool) WidgetOption {
	return func(w *widget) { w.style.UnratedOverview.Visible = shown }
}
func WithFlavor(flavor models.WidgetFlavor) WidgetOption {
	return func(w *widget) { w.style.Flavor = flavor }
}
func WithHead(componeent templ.Component) WidgetOption {
	return func(w *widget) { w.head = componeent }
}
func WithStyle(style *models.WidgetStyling) WidgetOption {
	if style == nil {
		return func(w *widget) {}
	}
	return func(w *widget) { w.style = *style }
}

func Widget(account models.Account, cards prepare.Cards, options ...WidgetOption) templ.Component {
	widget := widget{
		head:       widgetHead(account.Nickname, account.Realm),
		style:      models.DefaultWidgetStyle,
		account:    account,
		cards:      cards,
		autoReload: false,
	}
	for _, apply := range options {
		apply(&widget)
	}

	return widget.Render()
}

type styleOptions struct {
	showTitle  bool
	showCareer bool
	showLabel  bool
}

type widget struct {
	cards   prepare.Cards
	account models.Account

	autoReload bool
	head       templ.Component
	style      models.WidgetStyling
}

templ (w widget) Render() {
	@w.head
	<div class="text-nowrap whitespace-nowrap" id="widget-container">
		switch w.style.Flavor {
			default:
				@w.defaultWidget()
		}
		if w.autoReload {
			@logic.EmbedMinifiedScript(widgetRefresh(w.account.Realm, w.account.ID, w.account.LastBattleTime.Unix()), w.account.Realm, w.account.ID, w.account.LastBattleTime.Unix())
		}
	</div>
}

templ widgetHead(nickname, realm string) {
	<head>
		<title>Aftermath - { nickname }</title>
		<meta property="og:type" content="website"/>
		<meta property="og:title" content="Aftermath - Streaming Widget"/>
		<meta property="og:image" content={ constants.FrontendURL + "/assets/og/widget.jpg" }/>
		<meta property="og:description" content={ fmt.Sprintf("Aftermath streaming widget for %s [%s]", nickname, realm) }/>
		<meta name="twitter:card" content="summary_large_image"/>
		<meta name="twitter:title" content="Aftermath - Streaming Widget"/>
		<meta name="twitter:image:alt" content="Aftermath Streaming Widget"/>
		<meta name="twitter:image" content={ constants.FrontendURL + "/assets/og/widget.jpg" }/>
		<meta name="twitter:description" content={ fmt.Sprintf("Aftermath streaming widget for %s [%s]", nickname, realm) }/>
	</head>
}

script widgetRefresh(realm string, accountID string, lastBattle int64) {
  let apiHost = ""
  switch (realm.toLowerCase()) {
    case 'na':
      apiHost = "wotblitz.com"
      break;
    case 'eu':
      apiHost = "wotblitz.eu"
      break;
    case 'as':
      apiHost = "wotblitz.asia"
      break;
    default:
      throw new Error("Unknown realm: " + realm)
  }
  const refresh = () => {
    fetch(`https://api.${apiHost}/wotb/account/info/?application_id=f44aa6f863c9327c63ba26be3db0d07f&account_id=${accountID}&fields=last_battle_time`)
      .then(response => response.json())
      .then(data => {
        if (data.data[accountID.toString()].last_battle_time > lastBattle) {
          location.reload()
        }
      })
      .catch(error => { console.error(error); setTimeout(()=>location.reload(), 10000) })
  }
  setInterval(refresh, 5000)
}
