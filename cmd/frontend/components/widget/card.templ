package widget

import (
	"fmt"
	"github.com/cufee/aftermath/cmd/frontend/components"
	"github.com/cufee/aftermath/cmd/frontend/logic"
	"github.com/cufee/aftermath/internal/constants"
	"github.com/cufee/aftermath/internal/database/models"
	"time"
)

type WidgetWithAccount struct {
	models.WidgetOptions
	Account models.Account
}

templ WidgetCard(widget WidgetWithAccount) {
	<div class="flex grow basis-2/3 md:basis-1/3" id={ fmt.Sprintf("widget-%s", widget.ID) }>
		<div class="rounded-md bg-base-300 flex flex-col grow overflow-hidden">
			<div class="flex flex-row grow">
				<div class="p-1 bg-base-200 flex justify-center items-center h-full aspect-square rounded-none rounded-br-md">
					<span class="font-bold">
						{ widget.Account.Realm }
					</span>
				</div>
				<div class="p-3 pr-0 flex flex-row gap-2 items-center justify-between grow">
					<div class="flex flex-row gap-1 items-center w-full">
						<div class="text-lg break-all overflow-hidden line-clamp-1">
							{ logic.StringIfElse(widget.Title, widget.Account.Nickname, widget.Title != "" ) }
						</div>
					</div>
				</div>
				<button id="copy-widget-link" class="btn btn-sm rounded-none rounded-bl-md h-full btn-ghost w-24 transition-all duration-250 ease-in-out" onclick={ copyButtonAction("copy-widget-link", widget.ID) }>
					Copy Link
				</button>
				<a hx-boost="true" class="btn btn-sm rounded-none h-full btn-ghost" href={ templ.URL("/app/widgets/" + widget.ID) }>
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
						<path stroke-linecap="round" stroke-linejoin="round" d="M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.325.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 0 1 1.37.49l1.296 2.247a1.125 1.125 0 0 1-.26 1.431l-1.003.827c-.293.241-.438.613-.43.992a7.723 7.723 0 0 1 0 .255c-.008.378.137.75.43.991l1.004.827c.424.35.534.955.26 1.43l-1.298 2.247a1.125 1.125 0 0 1-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.47 6.47 0 0 1-.22.128c-.331.183-.581.495-.644.869l-.213 1.281c-.09.543-.56.94-1.11.94h-2.594c-.55 0-1.019-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 0 1-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 0 1-1.369-.49l-1.297-2.247a1.125 1.125 0 0 1 .26-1.431l1.004-.827c.292-.24.437-.613.43-.991a6.932 6.932 0 0 1 0-.255c.007-.38-.138-.751-.43-.992l-1.004-.827a1.125 1.125 0 0 1-.26-1.43l1.297-2.247a1.125 1.125 0 0 1 1.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.086.22-.128.332-.183.582-.495.644-.869l.214-1.28Z"></path>
						<path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"></path>
					</svg>
				</a>
			</div>
			<div class="flex flex-row flex-wrap gap-2 p-2 grow">
				@QuickSettingButton("rating_overview", widget.WidgetOptions)
				@QuickSettingButton("unrated_overview", widget.WidgetOptions)
				@QuickSettingButton("unrated_vehicles", widget.WidgetOptions)
				<div class="flex grow basis-2/3 sm:basis-1/3 lg:basis-1/4 xl:basis-1/5">
					<button disabled id={ "widget-reset-button-" + widget.ID } class="group btn hover:bg-base-200 p-1 flex justify-center items-center gap-2 w-full bg-base-100 rounded-sm flex-nowrap px-2">
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4 group-hover:text-yellow-500 group-hover:rotate-180 transition-all duration-500">
							<path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99"></path>
						</svg>
						<span class="font-bold">
							Reset Session
						</span>
					</button>
					@logic.EmbedMinifiedScript(resetTimeoutTicker("widget-reset-button-"+widget.ID, (constants.WidgetSessionResetTimeout-time.Since(widget.SessionFrom)).Seconds()), "widget-reset-button-"+widget.ID, (constants.WidgetSessionResetTimeout - time.Since(widget.SessionFrom)).Seconds())
				</div>
			</div>
		</div>
	</div>
}

templ QuickSettingButton(id string, widget models.WidgetOptions) {
	switch id {
		case "rating_overview":
			@quickSettingButton(widget.ID, id, widget.Style.RatingOverview.Visible) {
				Rating Battles
			}
		case "unrated_overview":
			@quickSettingButton(widget.ID, id, widget.Style.UnratedOverview.Visible) {
				Regular Battles
			}
		case "unrated_vehicles":
			@quickSettingButton(widget.ID, id, widget.Style.Vehicles.Visible) {
				Vehicles
				if widget.Style.Vehicles.Visible {
					<span class={ "text-xs font-light" + logic.StringIfElse("", " text-red-500", widget.Style.Vehicles.Limit > 0) }>
						({ fmt.Sprint(widget.Style.Vehicles.Limit) })
					</span>
				}
			}
	}
}

templ quickSettingButton(widgetID, fieldID string, enabled bool) {
	<form
		id={ fieldID + "_form" }
		class="flex grow basis-2/3 sm:basis-1/3 lg:basis-1/4 xl:basis-1/5 flex-nowrap"
		hx-patch={ "/api/widget/custom/" + widgetID + "/action/?field=" + fieldID }
		hx-select={ "#" + fieldID + "_form" }
		hx-target={ "#" + fieldID + "_form" }
		hx-swap="outerHTML"
	>
		<input id={ fieldID } name={ fieldID } type="text" value={ fmt.Sprint(!enabled) } class="hidden"/>
		<button type="submit" class="group btn hover:bg-base-200 px-2 flex flex-nowrap justify-center items-center gap-2 bg-base-100 rounded-sm w-full">
			if enabled {
				@components.IconEye("size-4 text-green-500 group-hover:hidden")
				@components.IconEyeCrossed("size-4 text-yellow-500 hidden group-hover:block")
			} else {
				@components.IconEyeCrossed("size-4 text-red-500 group-hover:hidden")
				@components.IconEye("size-4 text-yellow-500 hidden group-hover:block")
			}
			<div class="flex flex-row items-center justify-center text-nowrap">
				{ children... }
			</div>
		</button>
	</form>
}

script resetTimeoutTicker(elementID string, seconds float64) {
	if (seconds <= 0) {
		return;
	}
	const btn = document.getElementById(elementID);
	const oldContent = btn.innerHTML.includes("(") ? btn.innerHTML.split("(")[0] : btn.innerHTML;

	btn.disabled = true;
	const getContent = (s) => {
		return oldContent + `<span class="text-xs font-light">(${s})</span>`;
	}

	
	let secondsLeft = Math.ceil(seconds);
	btn.innerHTML = getContent(secondsLeft);
	const timeoutId = setInterval(()=> {
		secondsLeft = secondsLeft - 1;
		if (secondsLeft <= 0) {
			btn.disabled = false;
			btn.innerHTML = oldContent;
			clearTimeout(timeoutId);
			return;
		}
		btn.innerHTML = getContent(secondsLeft);
	}, 1000)
}

script copyButtonAction(elementID, widgetID string) {
	const url = window.location.protocol + "//" + window.location.host + "/widget/custom/" + widgetID + "/live/"
	navigator.clipboard.writeText(url);
	
	const btn = document.getElementById(elementID)
	const oldContent = btn.innerHTML
	btn.innerHTML = `
	<div class="flex flex-row items-center justify-center">
		<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-4 text-green-500">
			<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
		</svg>
	</div>
	`
	setTimeout(()=> {
		btn.innerHTML = oldContent;
	}, 2000)
}
