package components

import (
	"github.com/cufee/aftermath/cmd/frontend/handler"
	"github.com/cufee/aftermath/cmd/frontend/logic"
	"strings"
)

type navbarProps struct {
	authenticated bool
	path          string
}

var Navbar handler.Partial = func(ctx *handler.Context) (templ.Component, error) {
	var props navbarProps
	props.path = ctx.URL().Path

	user, err := ctx.SessionUser()
	if err == nil {
		props.authenticated = user.ID != ""
	}

	return navbar(props), nil
}

templ navbar(props navbarProps) {
	@navProgressAnimated()
	<div class="no-animation" hx-boost="true">
		<div class="navbar bg-base-100 gap-1 h-6">
			<div class="navbar-start gap-1">
				<a href="/" class="p-2 aspect-square">
					@Logo("32")
				</a>
			</div>
			<div class="navbar-center">
				if !strings.HasPrefix(props.path, "/widget") && !strings.HasPrefix(props.path, "/app") {
					<div class="form-control">
						<input type="text" placeholder="Search Players" class="input input-bordered w-48 md:w-auto placeholder:text-center" disabled/>
					</div>
				}
			</div>
			<ul class="navbar-end menu menu-horizontal px-1 gap-1 hidden md:flex">
				<li><a href="/widget" class={ logic.StringIfElse("active", "", strings.HasPrefix(props.path, "/widget")) }>Widget</a></li>
				if !props.authenticated {
					<li><a href="/login" hx-boost="false" class={ logic.StringIfElse("btn active", "btn", props.path == "/login") }>Login</a></li>
				} else {
					<li><a href="/app" class={ logic.StringIfElse("btn active", "btn", props.path == "/app") }>Profile</a></li>
				}
			</ul>
			<ul class="navbar-end menu menu-horizontal px-1 gap-1 md:hidden">
				<div class="drawer drawer-end">
					<input id="menu-drawer" type="checkbox" class="drawer-toggle"/>
					<div class="drawer-content flex justify-end items-center">
						<label for="menu-drawer" class="btn drawer-button">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								fill="none"
								viewBox="0 0 24 24"
								class="inline-block h-5 w-5 stroke-current"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M4 6h16M4 12h16M4 18h16"
								></path>
							</svg>
						</label>
					</div>
					<div class="drawer-side z-20">
						<label for="menu-drawer" aria-label="close sidebar" class="drawer-overlay"></label>
						<ul class="menu bg-base-300 min-h-full min-w-64 p-4 gap-2">
							<li><a href="/widget" class={ "btn btn-neutral" + logic.StringIfElse(" active", "", props.path == "/widget") }>Widget</a></li>
							if !props.authenticated {
								<li><a href="/login" hx-boost="false" onclick="htmx.trigger('body','htmx:beforeSend');" class={ "btn btn-primary" + logic.StringIfElse(" active", "", props.path == "/login") }>Login</a></li>
							} else {
								<li><a href="/app" class={ logic.StringIfElse("btn active", "btn", props.path == "/app") }>Profile</a></li>
							}
						</ul>
					</div>
				</div>
			</ul>
		</div>
	</div>
}

templ navMenuLink(label, href, currentPath string) {
	<a href={ templ.URL(href) } class={ navLinkClass(href, currentPath) }>{ label }</a>
}

func navLinkClass(path, requiredPath string) string {
	base := "underline-offset-4 link"

	if !strings.HasSuffix(path, "/") {
		path += "/"
	}
	if path == requiredPath {
		return base
	}

	return base + " " + "link-hover"
}

templ navProgressAnimated(...templ.Component) {
	<div class="w-full h-fit fixed top-0 rounded-b-box overflow-hidden">
		<div id="nav-progress" class="invisible h-1 transition-all bg-primary rounded-r-full duration-[50ms] ease-in" style="width: 0%"></div>
	</div>
	@logic.EmbedMinifiedScript(animateNavProgress())
}

script animateNavProgress() {
	const progressBar = document.getElementById('nav-progress');
	const progressBaseStep = 5;
	
	let stopAnimation;

	const progressRandomStep = () => {
		return Math.floor(progressBaseStep * Math.random()) + progressBaseStep;
	}
	const progressSlowStep = () => {
		return Math.floor(Math.random() * 2);
	}

	const resetProgress = () => {
		progressBar.value = 0;
		progressBar.style.width = progressBar.value + "%"
		progressBar.classList.add('invisible');
		document.querySelectorAll('.nav-btn').forEach((btn) => {
			btn.removeAttribute('disabled');
		});
		if (stopAnimation) {
			clearInterval(stopAnimation);
			stopAnimation = null;
		}
	}
	resetProgress();

	document.body.addEventListener('load', resetProgress);
	document.body.addEventListener('popstate', resetProgress);
	document.body.addEventListener('hashchange', resetProgress);
	document.body.addEventListener('beforeunload', resetProgress);
	
	document.body.addEventListener('htmx:afterRequest', () => {
		setTimeout(() => {
			progressBar.classList.add('invisible');
			progressBar.value = 0;
			progressBar.style.width = progressBar.value + "%"
		}, 250);
		progressBar.value = 100;
		progressBar.style.width = progressBar.value + "%"
		if (stopAnimation) {
			clearInterval(stopAnimation);
			stopAnimation = null;
		}
	});

	document.body.addEventListener('htmx:beforeSend', () => {
		progressBar.value = progressRandomStep()
		progressBar.style.width = progressBar.value + "%"
		progressBar.classList.remove('invisible');

		stopAnimation = setInterval(() => {
			if (progressBar.value <= 65) {
				progressBar.value += progressRandomStep()
				progressBar.style.width = progressBar.value + "%"
			} else if (progressBar.value <= 85) {
				progressBar.value += progressSlowStep()
				progressBar.style.width = progressBar.value + "%"
			} else if (progressBar.value <= 95){
				progressBar.value += 1
				progressBar.style.width = progressBar.value + "%"
			}
		}, 50);
	});
}
